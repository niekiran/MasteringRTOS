
STM32_FreeRTOS11_continuous_recording.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006838  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080069c8  080069c8  000079c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b5c  08006b5c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b5c  08006b5c  00007b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006b64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          0001a95c  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001a9c8  2001a9c8  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012563  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b03  00000000  00000000  0001a5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  0001d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db9  00000000  00000000  0001e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249f0  00000000  00000000  0001f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015247  00000000  00000000  00043a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e802f  00000000  00000000  00058cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140cff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f3c  00000000  00000000  00140d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c1  00000000  00000000  00145c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069b0 	.word	0x080069b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080069b0 	.word	0x080069b0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192a8 	.word	0x200192a8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb7d 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f857 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8bf 	bl	8000790 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <main+0x9c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <main+0x9c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800061e:	4820      	ldr	r0, [pc, #128]	@ (80006a0 <main+0xa0>)
 8000620:	f003 fb0a 	bl	8003c38 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000624:	f003 f932 	bl	800388c <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <main+0xa4>)
 8000634:	22c8      	movs	r2, #200	@ 0xc8
 8000636:	491c      	ldr	r1, [pc, #112]	@ (80006a8 <main+0xa8>)
 8000638:	481c      	ldr	r0, [pc, #112]	@ (80006ac <main+0xac>)
 800063a:	f001 fe31 	bl	80022a0 <xTaskCreate>
 800063e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d00b      	beq.n	800065e <main+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <main+0xb0>)
 8000668:	22c8      	movs	r2, #200	@ 0xc8
 800066a:	4912      	ldr	r1, [pc, #72]	@ (80006b4 <main+0xb4>)
 800066c:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <main+0xb8>)
 800066e:	f001 fe17 	bl	80022a0 <xTaskCreate>
 8000672:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d00b      	beq.n	8000692 <main+0x92>
    __asm volatile
 800067a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	60fb      	str	r3, [r7, #12]
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	e7fd      	b.n	800068e <main+0x8e>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000692:	f001 ffab 	bl	80025ec <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0x96>
 800069a:	bf00      	nop
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	0007a120 	.word	0x0007a120
 80006a4:	080069c8 	.word	0x080069c8
 80006a8:	080069e0 	.word	0x080069e0
 80006ac:	08000a4d 	.word	0x08000a4d
 80006b0:	080069e8 	.word	0x080069e8
 80006b4:	08006a00 	.word	0x08006a00
 80006b8:	08000a89 	.word	0x08000a89

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	@ 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fce8 	bl	80060a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	@ (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	@ (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	@ 0xa8
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fdb9 	bl	80012b8 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9cc 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f81a 	bl	80017a8 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9b5 	bl	8000ae8 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4ba2      	ldr	r3, [pc, #648]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4aa1      	ldr	r2, [pc, #644]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b9f      	ldr	r3, [pc, #636]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a9a      	ldr	r2, [pc, #616]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b98      	ldr	r3, [pc, #608]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b94      	ldr	r3, [pc, #592]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a93      	ldr	r2, [pc, #588]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b91      	ldr	r3, [pc, #580]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b8d      	ldr	r3, [pc, #564]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a8c      	ldr	r2, [pc, #560]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b86      	ldr	r3, [pc, #536]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a85      	ldr	r2, [pc, #532]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b83      	ldr	r3, [pc, #524]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b7f      	ldr	r3, [pc, #508]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b7c      	ldr	r3, [pc, #496]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4879      	ldr	r0, [pc, #484]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000854:	f000 fd16 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4877      	ldr	r0, [pc, #476]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 800085e:	f000 fd11 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000868:	4875      	ldr	r0, [pc, #468]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 800086a:	f000 fd0b 	bl	8001284 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	486c      	ldr	r0, [pc, #432]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000886:	f000 fb61 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4866      	ldr	r0, [pc, #408]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 80008a2:	f000 fb53 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	485e      	ldr	r0, [pc, #376]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 80008c2:	f000 fb43 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	485a      	ldr	r0, [pc, #360]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80008dc:	f000 fb36 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4852      	ldr	r0, [pc, #328]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80008fc:	f000 fb26 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000900:	23e0      	movs	r3, #224	@ 0xe0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000910:	2305      	movs	r3, #5
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	484a      	ldr	r0, [pc, #296]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 800091c:	f000 fb16 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4845      	ldr	r0, [pc, #276]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000934:	f000 fb0a 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483c      	ldr	r0, [pc, #240]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000956:	f000 faf9 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800095e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4833      	ldr	r0, [pc, #204]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 8000974:	f000 faea 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000978:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098a:	2306      	movs	r3, #6
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 8000996:	f000 fad9 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80009b0:	f000 facc 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c6:	230a      	movs	r3, #10
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80009d2:	f000 fabb 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 80009ea:	f000 faaf 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a00:	2304      	movs	r3, #4
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000a0c:	f000 fa9e 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000a26:	f000 fa91 	bl	8000f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400

08000a4c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	@ 0x70
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  char msg[100];

  while(1)
  {
    snprintf(msg,100,"%s\n", (char*)parameters);
 8000a54:	f107 000c 	add.w	r0, r7, #12
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <task1_handler+0x34>)
 8000a5c:	2164      	movs	r1, #100	@ 0x64
 8000a5e:	f005 fadb 	bl	8006018 <sniprintf>
    SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 fa38 	bl	8005edc <SEGGER_SYSVIEW_PrintfTarget>
    taskYIELD();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <task1_handler+0x38>)
 8000a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	f3bf 8f6f 	isb	sy
    snprintf(msg,100,"%s\n", (char*)parameters);
 8000a7c:	bf00      	nop
 8000a7e:	e7e9      	b.n	8000a54 <task1_handler+0x8>
 8000a80:	08006a08 	.word	0x08006a08
 8000a84:	e000ed04 	.word	0xe000ed04

08000a88 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09c      	sub	sp, #112	@ 0x70
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  char msg[100];
  while(1)
  {
    snprintf(msg,100,"%s\n", (char*)parameters);
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <task2_handler+0x34>)
 8000a98:	2164      	movs	r1, #100	@ 0x64
 8000a9a:	f005 fabd 	bl	8006018 <sniprintf>
    SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f005 fa1a 	bl	8005edc <SEGGER_SYSVIEW_PrintfTarget>
    taskYIELD();
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <task2_handler+0x38>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
    snprintf(msg,100,"%s\n", (char*)parameters);
 8000ab8:	bf00      	nop
 8000aba:	e7e9      	b.n	8000a90 <task2_handler+0x8>
 8000abc:	08006a08 	.word	0x08006a08
 8000ac0:	e000ed04 	.word	0xe000ed04

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f937 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b36:	f002 fa6d 	bl	8003014 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f81e 	bl	8001bc0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f001 f803 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b96:	f000 ffff 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <HAL_InitTick+0xe8>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	3b01      	subs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_InitTick+0xf0>)
 8000bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd6:	f001 f825 	bl	8001c24 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be8:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bea:	f001 f875 	bl	8001cd8 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bfc:	2036      	movs	r0, #54	@ 0x36
 8000bfe:	f000 f997 	bl	8000f30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d808      	bhi.n	8000c1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2036      	movs	r0, #54	@ 0x36
 8000c0e:	f000 f973 	bl	8000ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0xf4>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e002      	b.n	8000c20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000088 	.word	0x20000088
 8000c38:	40001000 	.word	0x40001000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <TIM6_DAC_IRQHandler+0x10>)
 8000c7e:	f001 f89b 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000088 	.word	0x20000088

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f005 f9e7 	bl	80060b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fc8d 	bl	8000600 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cf4:	08006b64 	.word	0x08006b64
  ldr r2, =_sbss
 8000cf8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cfc:	2001a9c8 	.word	0x2001a9c8

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f8d8 	bl	8000ee2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f7ff ff08 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fede 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200000d0 	.word	0x200000d0

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200000d0 	.word	0x200000d0

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	@ (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	@ (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff4c 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0a:	f7ff ff61 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	f7ff ffb1 	bl	8000e7c <NVIC_EncodePriority>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff80 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff54 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e16b      	b.n	8001240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 815a 	bne.w	800123a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b4 	beq.w	800123a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b60      	ldr	r3, [pc, #384]	@ (8001258 <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	4a5f      	ldr	r2, [pc, #380]	@ (8001258 <HAL_GPIO_Init+0x30c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001258 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a5b      	ldr	r2, [pc, #364]	@ (800125c <HAL_GPIO_Init+0x310>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	@ (8001260 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02b      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a51      	ldr	r2, [pc, #324]	@ (8001264 <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a50      	ldr	r2, [pc, #320]	@ (8001268 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4f      	ldr	r2, [pc, #316]	@ (800126c <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4e      	ldr	r2, [pc, #312]	@ (8001270 <HAL_GPIO_Init+0x324>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4d      	ldr	r2, [pc, #308]	@ (8001274 <HAL_GPIO_Init+0x328>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	@ (8001278 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x20e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4b      	ldr	r2, [pc, #300]	@ (800127c <HAL_GPIO_Init+0x330>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x20a>
 8001152:	2307      	movs	r3, #7
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001156:	2308      	movs	r3, #8
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115a:	2306      	movs	r3, #6
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	@ (800125c <HAL_GPIO_Init+0x310>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <HAL_GPIO_Init+0x334>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	@ (8001280 <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_GPIO_Init+0x334>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	@ (8001280 <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_GPIO_Init+0x334>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_GPIO_Init+0x334>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae90 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	@ 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e267      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4b88      	ldr	r3, [pc, #544]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b85      	ldr	r3, [pc, #532]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b82      	ldr	r3, [pc, #520]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b7e      	ldr	r3, [pc, #504]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e242      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b76      	ldr	r3, [pc, #472]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a75      	ldr	r2, [pc, #468]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6f      	ldr	r2, [pc, #444]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6d      	ldr	r3, [pc, #436]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6c      	ldr	r2, [pc, #432]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b69      	ldr	r3, [pc, #420]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a68      	ldr	r2, [pc, #416]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a65      	ldr	r2, [pc, #404]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fcfe 	bl	8000d70 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcfa 	bl	8000d70 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e207      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcea 	bl	8000d70 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fce6 	bl	8000d70 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1f3      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b44      	ldr	r3, [pc, #272]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1c7      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b3b      	ldr	r3, [pc, #236]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4937      	ldr	r1, [pc, #220]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_RCC_OscConfig+0x244>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc9f 	bl	8000d70 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc9b 	bl	8000d70 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1a8      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_RCC_OscConfig+0x244>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc7e 	bl	8000d70 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc7a 	bl	8000d70 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e187      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d036      	beq.n	8001510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_RCC_OscConfig+0x248>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc5e 	bl	8000d70 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc5a 	bl	8000d70 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e167      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e01b      	b.n	8001510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_OscConfig+0x248>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc47 	bl	8000d70 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e00e      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc43 	bl	8000d70 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d907      	bls.n	8001504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e150      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470000 	.word	0x42470000
 8001500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ea      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8097 	beq.w	800164c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b81      	ldr	r3, [pc, #516]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a7c      	ldr	r2, [pc, #496]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b7a      	ldr	r3, [pc, #488]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b77      	ldr	r3, [pc, #476]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b74      	ldr	r3, [pc, #464]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a73      	ldr	r2, [pc, #460]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fc03 	bl	8000d70 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fbff 	bl	8000d70 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e10c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2ea>
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a63      	ldr	r2, [pc, #396]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x30c>
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a57      	ldr	r2, [pc, #348]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d0:	4b55      	ldr	r3, [pc, #340]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a54      	ldr	r2, [pc, #336]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbc4 	bl	8000d70 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbc0 	bl	8000d70 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0cb      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0ee      	beq.n	80015ec <HAL_RCC_OscConfig+0x334>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fbae 	bl	8000d70 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fbaa 	bl	8000d70 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0b5      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	4a38      	ldr	r2, [pc, #224]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a1 	beq.w	8001798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001656:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b08      	cmp	r3, #8
 8001660:	d05c      	beq.n	800171c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d141      	bne.n	80016ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb7e 	bl	8000d70 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb7a 	bl	8000d70 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e087      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	3b01      	subs	r3, #1
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	491b      	ldr	r1, [pc, #108]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb53 	bl	8000d70 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fb4f 	bl	8000d70 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e05c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x416>
 80016ec:	e054      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb3c 	bl	8000d70 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb38 	bl	8000d70 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e045      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x444>
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e038      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000
 8001730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d028      	beq.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d121      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176c:	4293      	cmp	r3, r2
 800176e:	d111      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0cc      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90c      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b65      	ldr	r3, [pc, #404]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a52      	ldr	r2, [pc, #328]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800181e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d044      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d119      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e067      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4934      	ldr	r1, [pc, #208]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff fa6a 	bl	8000d70 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa66 	bl	8000d70 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e04f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f8fa 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00
 8001964:	40023800 	.word	0x40023800
 8001968:	08006acc 	.word	0x08006acc
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001978:	b094      	sub	sp, #80	@ 0x50
 800197a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001980:	2300      	movs	r3, #0
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198c:	4b79      	ldr	r3, [pc, #484]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d00d      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001998:	2b08      	cmp	r3, #8
 800199a:	f200 80e1 	bhi.w	8001b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x3a>
 80019a6:	e0db      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b73      	ldr	r3, [pc, #460]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80019aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019ac:	e0db      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80019b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b2:	e0d8      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b6d      	ldr	r3, [pc, #436]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019e6:	4622      	mov	r2, r4
 80019e8:	462b      	mov	r3, r5
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	0159      	lsls	r1, r3, #5
 80019f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f8:	0150      	lsls	r0, r2, #5
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4621      	mov	r1, r4
 8001a00:	1a51      	subs	r1, r2, r1
 8001a02:	6139      	str	r1, [r7, #16]
 8001a04:	4629      	mov	r1, r5
 8001a06:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a18:	4659      	mov	r1, fp
 8001a1a:	018b      	lsls	r3, r1, #6
 8001a1c:	4651      	mov	r1, sl
 8001a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a22:	4651      	mov	r1, sl
 8001a24:	018a      	lsls	r2, r1, #6
 8001a26:	4651      	mov	r1, sl
 8001a28:	ebb2 0801 	subs.w	r8, r2, r1
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	eb18 0303 	adds.w	r3, r8, r3
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	462b      	mov	r3, r5
 8001a54:	eb49 0303 	adc.w	r3, r9, r3
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a66:	4629      	mov	r1, r5
 8001a68:	024b      	lsls	r3, r1, #9
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a70:	4621      	mov	r1, r4
 8001a72:	024a      	lsls	r2, r1, #9
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a84:	f7fe fc44 	bl	8000310 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	e058      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa2:	623b      	str	r3, [r7, #32]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aac:	4642      	mov	r2, r8
 8001aae:	464b      	mov	r3, r9
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	0159      	lsls	r1, r3, #5
 8001aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001abe:	0150      	lsls	r0, r2, #5
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aca:	4649      	mov	r1, r9
 8001acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	00eb      	lsls	r3, r5, #3
 8001af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afa:	00e2      	lsls	r2, r4, #3
 8001afc:	4614      	mov	r4, r2
 8001afe:	461d      	mov	r5, r3
 8001b00:	4643      	mov	r3, r8
 8001b02:	18e3      	adds	r3, r4, r3
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	464b      	mov	r3, r9
 8001b08:	eb45 0303 	adc.w	r3, r5, r3
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	028b      	lsls	r3, r1, #10
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b24:	4621      	mov	r1, r4
 8001b26:	028a      	lsls	r2, r1, #10
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	61fa      	str	r2, [r7, #28]
 8001b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b38:	f7fe fbea 	bl	8000310 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b5e:	e002      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3750      	adds	r7, #80	@ 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	08006adc 	.word	0x08006adc

08001bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220f      	movs	r2, #15
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_RCC_GetClockConfig+0x60>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f839 	bl	8001cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f9c0 	bl	8001fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04e      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d022      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1a:	d01d      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d018      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00e      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_TIM_Base_Start_IT+0xd4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d010      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7a:	e007      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	40010400 	.word	0x40010400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	40001800 	.word	0x40001800

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0202 	mvn.w	r2, #2
 8001dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8d2 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8c4 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8d5 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8ac 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f89e 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8af 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0208 	mvn.w	r2, #8
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f886 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f878 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f889 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0210 	mvn.w	r2, #16
 8001ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f860 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f852 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f863 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fdd0 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f906 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f834 	bl	8001fd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0220 	mvn.w	r2, #32
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8d8 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a46      	ldr	r2, [pc, #280]	@ (8002114 <TIM_Base_SetConfig+0x12c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002006:	d00f      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a43      	ldr	r2, [pc, #268]	@ (8002118 <TIM_Base_SetConfig+0x130>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00b      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a42      	ldr	r2, [pc, #264]	@ (800211c <TIM_Base_SetConfig+0x134>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a41      	ldr	r2, [pc, #260]	@ (8002120 <TIM_Base_SetConfig+0x138>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a40      	ldr	r2, [pc, #256]	@ (8002124 <TIM_Base_SetConfig+0x13c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d108      	bne.n	800203a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a35      	ldr	r2, [pc, #212]	@ (8002114 <TIM_Base_SetConfig+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002048:	d027      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a32      	ldr	r2, [pc, #200]	@ (8002118 <TIM_Base_SetConfig+0x130>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d023      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a31      	ldr	r2, [pc, #196]	@ (800211c <TIM_Base_SetConfig+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a30      	ldr	r2, [pc, #192]	@ (8002120 <TIM_Base_SetConfig+0x138>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01b      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2f      	ldr	r2, [pc, #188]	@ (8002124 <TIM_Base_SetConfig+0x13c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d017      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <TIM_Base_SetConfig+0x140>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <TIM_Base_SetConfig+0x144>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00f      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2c      	ldr	r2, [pc, #176]	@ (8002130 <TIM_Base_SetConfig+0x148>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00b      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2b      	ldr	r2, [pc, #172]	@ (8002134 <TIM_Base_SetConfig+0x14c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <TIM_Base_SetConfig+0x150>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d003      	beq.n	800209a <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <TIM_Base_SetConfig+0x154>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d108      	bne.n	80020ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <TIM_Base_SetConfig+0x12c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0xf8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <TIM_Base_SetConfig+0x13c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d103      	bne.n	80020e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d105      	bne.n	8002106 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f023 0201 	bic.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	40001800 	.word	0x40001800
 8002138:	40001c00 	.word	0x40001c00
 800213c:	40002000 	.word	0x40002000

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f103 0208 	add.w	r2, r3, #8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 0208 	add.w	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0208 	add.w	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 800219c:	f240 1019 	movw	r0, #281	@ 0x119
 80021a0:	f003 fc40 	bl	8005a24 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021ba:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021be:	f003 fc31 	bl	8005a24 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6892      	ldr	r2, [r2, #8]
 80021e0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6852      	ldr	r2, [r2, #4]
 80021ea:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d103      	bne.n	80021fe <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	f240 101d 	movw	r0, #285	@ 0x11d
 8002218:	f003 fc40 	bl	8005a9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af04      	add	r7, sp, #16
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f001 f898 	bl	8003370 <pvPortMalloc>
 8002240:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002248:	2058      	movs	r0, #88	@ 0x58
 800224a:	f001 f891 	bl	8003370 <pvPortMalloc>
 800224e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002256:	2258      	movs	r2, #88	@ 0x58
 8002258:	2100      	movs	r1, #0
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f003 ff20 	bl	80060a0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
 8002266:	e005      	b.n	8002274 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002268:	6938      	ldr	r0, [r7, #16]
 800226a:	f001 f9b3 	bl	80035d4 <vPortFree>
 800226e:	e001      	b.n	8002274 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800227a:	2300      	movs	r3, #0
 800227c:	9303      	str	r3, [sp, #12]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f82d 	bl	80022f0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002296:	697b      	ldr	r3, [r7, #20]
    }
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ffb3 	bl	8002228 <prvCreateTask>
 80022c2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80022ca:	6938      	ldr	r0, [r7, #16]
 80022cc:	f000 f8a0 	bl	8002410 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022d0:	2301      	movs	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e002      	b.n	80022dc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4619      	mov	r1, r3
 80022e0:	20c2      	movs	r0, #194	@ 0xc2
 80022e2:	f003 fbdb 	bl	8005a9c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80022e6:	697b      	ldr	r3, [r7, #20]
    }
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002300:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	461a      	mov	r2, r3
 8002308:	21a5      	movs	r1, #165	@ 0xa5
 800230a:	f003 fec9 	bl	80060a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002318:	3b01      	subs	r3, #1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	617b      	str	r3, [r7, #20]
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	e7fd      	b.n	8002346 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01e      	beq.n	800238e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	e012      	b.n	800237c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4413      	add	r3, r2
 800235c:	7819      	ldrb	r1, [r3, #0]
 800235e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	3334      	adds	r3, #52	@ 0x34
 8002366:	460a      	mov	r2, r1
 8002368:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3301      	adds	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b09      	cmp	r3, #9
 8002380:	d9e9      	bls.n	8002356 <prvInitialiseNewTask+0x66>
 8002382:	e000      	b.n	8002386 <prvInitialiseNewTask+0x96>
            {
                break;
 8002384:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	2b04      	cmp	r3, #4
 8002392:	d90b      	bls.n	80023ac <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	613b      	str	r3, [r7, #16]
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d901      	bls.n	80023b6 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023b2:	2304      	movs	r3, #4
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c0:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	3304      	adds	r3, #4
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fef0 	bl	80021ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ce:	3318      	adds	r3, #24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff feeb 	bl	80021ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023da:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	f1c3 0205 	rsb	r2, r3, #5
 80023e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	69b8      	ldr	r0, [r7, #24]
 80023f2:	f000 fc8d 	bl	8002d10 <pxPortInitialiseStack>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002406:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002408:	bf00      	nop
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002410:	b5b0      	push	{r4, r5, r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
 8002416:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002418:	f000 fe7c 	bl	8003114 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <prvAddNewTaskToReadyList+0x130>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	4a47      	ldr	r2, [pc, #284]	@ (8002540 <prvAddNewTaskToReadyList+0x130>)
 8002424:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002426:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <prvAddNewTaskToReadyList+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800242e:	4a45      	ldr	r2, [pc, #276]	@ (8002544 <prvAddNewTaskToReadyList+0x134>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002434:	4b42      	ldr	r3, [pc, #264]	@ (8002540 <prvAddNewTaskToReadyList+0x130>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d110      	bne.n	800245e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800243c:	f000 fbce 	bl	8002bdc <prvInitialiseTaskLists>
 8002440:	e00d      	b.n	800245e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <prvAddNewTaskToReadyList+0x138>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800244a:	4b3e      	ldr	r3, [pc, #248]	@ (8002544 <prvAddNewTaskToReadyList+0x134>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	429a      	cmp	r2, r3
 8002456:	d802      	bhi.n	800245e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002458:	4a3a      	ldr	r2, [pc, #232]	@ (8002544 <prvAddNewTaskToReadyList+0x134>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <prvAddNewTaskToReadyList+0x13c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	4a39      	ldr	r2, [pc, #228]	@ (800254c <prvAddNewTaskToReadyList+0x13c>)
 8002466:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002468:	4b38      	ldr	r3, [pc, #224]	@ (800254c <prvAddNewTaskToReadyList+0x13c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <prvAddNewTaskToReadyList+0x94>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fb83 	bl	8005b84 <SEGGER_SYSVIEW_OnTaskCreate>
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	461d      	mov	r5, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461c      	mov	r4, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	1ae3      	subs	r3, r4, r3
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	462b      	mov	r3, r5
 80024a0:	f001 fa96 	bl	80039d0 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fbf0 	bl	8005c8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	2201      	movs	r2, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <prvAddNewTaskToReadyList+0x140>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	4a25      	ldr	r2, [pc, #148]	@ (8002550 <prvAddNewTaskToReadyList+0x140>)
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c2:	4924      	ldr	r1, [pc, #144]	@ (8002554 <prvAddNewTaskToReadyList+0x144>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	3204      	adds	r2, #4
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1d1a      	adds	r2, r3, #4
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <prvAddNewTaskToReadyList+0x144>)
 8002502:	441a      	add	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800250c:	4911      	ldr	r1, [pc, #68]	@ (8002554 <prvAddNewTaskToReadyList+0x144>)
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	480c      	ldr	r0, [pc, #48]	@ (8002554 <prvAddNewTaskToReadyList+0x144>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800252e:	f000 fe23 	bl	8003178 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <prvAddNewTaskToReadyList+0x138>)
 8002534:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bdb0      	pop	{r4, r5, r7, pc}
 800253e:	bf00      	nop
 8002540:	200001ac 	.word	0x200001ac
 8002544:	200000d4 	.word	0x200000d4
 8002548:	200001b8 	.word	0x200001b8
 800254c:	200001c8 	.word	0x200001c8
 8002550:	200001b4 	.word	0x200001b4
 8002554:	200000d8 	.word	0x200000d8

08002558 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e011      	b.n	8002590 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800256c:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <prvCreateIdleTasks+0x88>)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4413      	add	r3, r2
 8002572:	7819      	ldrb	r1, [r3, #0]
 8002574:	1d3a      	adds	r2, r7, #4
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4413      	add	r3, r2
 800257a:	460a      	mov	r2, r1
 800257c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800257e:	1d3a      	adds	r2, r7, #4
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b09      	cmp	r3, #9
 8002594:	ddea      	ble.n	800256c <prvCreateIdleTasks+0x14>
 8002596:	e000      	b.n	800259a <prvCreateIdleTasks+0x42>
        {
            break;
 8002598:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e015      	b.n	80025cc <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80025a0:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <prvCreateIdleTasks+0x8c>)
 80025a2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <prvCreateIdleTasks+0x90>)
 80025aa:	4413      	add	r3, r2
 80025ac:	1d39      	adds	r1, r7, #4
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	2282      	movs	r2, #130	@ 0x82
 80025b8:	6938      	ldr	r0, [r7, #16]
 80025ba:	f7ff fe71 	bl	80022a0 <xTaskCreate>
 80025be:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	dde6      	ble.n	80025a0 <prvCreateIdleTasks+0x48>
 80025d2:	e000      	b.n	80025d6 <prvCreateIdleTasks+0x7e>
        {
            break;
 80025d4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80025d6:	69fb      	ldr	r3, [r7, #28]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	08006a0c 	.word	0x08006a0c
 80025e4:	08002bb9 	.word	0x08002bb9
 80025e8:	200001d0 	.word	0x200001d0

080025ec <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80025f2:	f7ff ffb1 	bl	8002558 <prvCreateIdleTasks>
 80025f6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d124      	bne.n	8002648 <vTaskStartScheduler+0x5c>
    __asm volatile
 80025fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	60bb      	str	r3, [r7, #8]
}
 8002610:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002612:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <vTaskStartScheduler+0x90>)
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <vTaskStartScheduler+0x94>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002620:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <vTaskStartScheduler+0x98>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002626:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <vTaskStartScheduler+0x9c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b18      	ldr	r3, [pc, #96]	@ (800268c <vTaskStartScheduler+0xa0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d102      	bne.n	8002638 <vTaskStartScheduler+0x4c>
 8002632:	f003 fa8b 	bl	8005b4c <SEGGER_SYSVIEW_OnIdle>
 8002636:	e004      	b.n	8002642 <vTaskStartScheduler+0x56>
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <vTaskStartScheduler+0xa0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fae3 	bl	8005c08 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002642:	f000 fbf7 	bl	8002e34 <xPortStartScheduler>
 8002646:	e00f      	b.n	8002668 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d10b      	bne.n	8002668 <vTaskStartScheduler+0x7c>
    __asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	607b      	str	r3, [r7, #4]
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <vTaskStartScheduler+0xa4>)
 800266a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800266c:	20cd      	movs	r0, #205	@ 0xcd
 800266e:	f003 f9d9 	bl	8005a24 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001cc 	.word	0x200001cc
 8002680:	200001b8 	.word	0x200001b8
 8002684:	200001b0 	.word	0x200001b0
 8002688:	200001d0 	.word	0x200001d0
 800268c:	200000d4 	.word	0x200000d4
 8002690:	2000000c 	.word	0x2000000c

08002694 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <vTaskSuspendAll+0x18>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	4a03      	ldr	r2, [pc, #12]	@ (80026ac <vTaskSuspendAll+0x18>)
 80026a0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80026a2:	20cf      	movs	r0, #207	@ 0xcf
 80026a4:	f003 f9be 	bl	8005a24 <SEGGER_SYSVIEW_RecordEndCall>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200001d4 	.word	0x200001d4

080026b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80026be:	f000 fd29 	bl	8003114 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80026c6:	4b73      	ldr	r3, [pc, #460]	@ (8002894 <xTaskResumeAll+0x1e4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <xTaskResumeAll+0x36>
    __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	603b      	str	r3, [r7, #0]
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	e7fd      	b.n	80026e2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80026e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <xTaskResumeAll+0x1e4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	4a69      	ldr	r2, [pc, #420]	@ (8002894 <xTaskResumeAll+0x1e4>)
 80026ee:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80026f0:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <xTaskResumeAll+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 80c0 	bne.w	800287a <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026fa:	4b67      	ldr	r3, [pc, #412]	@ (8002898 <xTaskResumeAll+0x1e8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80bb 	beq.w	800287a <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002704:	e092      	b.n	800282c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002706:	4b65      	ldr	r3, [pc, #404]	@ (800289c <xTaskResumeAll+0x1ec>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	6a12      	ldr	r2, [r2, #32]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	69d2      	ldr	r2, [r2, #28]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3318      	adds	r3, #24
 8002730:	429a      	cmp	r2, r3
 8002732:	d103      	bne.n	800273c <xTaskResumeAll+0x8c>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	429a      	cmp	r2, r3
 8002770:	d103      	bne.n	800277a <xTaskResumeAll+0xca>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fa7d 	bl	8005c8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	2201      	movs	r2, #1
 8002798:	409a      	lsls	r2, r3
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <xTaskResumeAll+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	4a3f      	ldr	r2, [pc, #252]	@ (80028a0 <xTaskResumeAll+0x1f0>)
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a8:	493e      	ldr	r1, [pc, #248]	@ (80028a4 <xTaskResumeAll+0x1f4>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3304      	adds	r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	3204      	adds	r2, #4
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	1d1a      	adds	r2, r3, #4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4a2f      	ldr	r2, [pc, #188]	@ (80028a4 <xTaskResumeAll+0x1f4>)
 80027e8:	441a      	add	r2, r3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	615a      	str	r2, [r3, #20]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f2:	492c      	ldr	r1, [pc, #176]	@ (80028a4 <xTaskResumeAll+0x1f4>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002804:	1c59      	adds	r1, r3, #1
 8002806:	4827      	ldr	r0, [pc, #156]	@ (80028a4 <xTaskResumeAll+0x1f4>)
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4403      	add	r3, r0
 8002812:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002818:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <xTaskResumeAll+0x1f8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	429a      	cmp	r2, r3
 8002820:	d904      	bls.n	800282c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002822:	4a22      	ldr	r2, [pc, #136]	@ (80028ac <xTaskResumeAll+0x1fc>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2101      	movs	r1, #1
 8002828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <xTaskResumeAll+0x1ec>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f af68 	bne.w	8002706 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800283c:	f000 fa4c 	bl	8002cd8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002840:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <xTaskResumeAll+0x200>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800284c:	f000 f848 	bl	80028e0 <xTaskIncrementTick>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002856:	4a15      	ldr	r2, [pc, #84]	@ (80028ac <xTaskResumeAll+0x1fc>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2101      	movs	r1, #1
 800285c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	3b01      	subs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ef      	bne.n	800284c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <xTaskResumeAll+0x200>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002872:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <xTaskResumeAll+0x1fc>)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800287a:	f000 fc7d 	bl	8003178 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	4619      	mov	r1, r3
 8002882:	20d0      	movs	r0, #208	@ 0xd0
 8002884:	f003 f90a 	bl	8005a9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002888:	697b      	ldr	r3, [r7, #20]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200001d4 	.word	0x200001d4
 8002898:	200001ac 	.word	0x200001ac
 800289c:	2000016c 	.word	0x2000016c
 80028a0:	200001b4 	.word	0x200001b4
 80028a4:	200000d8 	.word	0x200000d8
 80028a8:	200000d4 	.word	0x200000d4
 80028ac:	200001c0 	.word	0x200001c0
 80028b0:	200001bc 	.word	0x200001bc

080028b4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028ba:	f000 fd17 	bl	80032ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <xTaskGetTickCountFromISR+0x28>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	20d2      	movs	r0, #210	@ 0xd2
 80028cc:	f003 f8e6 	bl	8005a9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80028d0:	683b      	ldr	r3, [r7, #0]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200001b0 	.word	0x200001b0

080028e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80028ea:	4b74      	ldr	r3, [pc, #464]	@ (8002abc <xTaskIncrementTick+0x1dc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 80d4 	bne.w	8002a9c <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028f4:	4b72      	ldr	r3, [pc, #456]	@ (8002ac0 <xTaskIncrementTick+0x1e0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028fc:	4a70      	ldr	r2, [pc, #448]	@ (8002ac0 <xTaskIncrementTick+0x1e0>)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d121      	bne.n	800294c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002908:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac4 <xTaskIncrementTick+0x1e4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <xTaskIncrementTick+0x4a>
    __asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	607b      	str	r3, [r7, #4]
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	e7fd      	b.n	8002926 <xTaskIncrementTick+0x46>
 800292a:	4b66      	ldr	r3, [pc, #408]	@ (8002ac4 <xTaskIncrementTick+0x1e4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	4b65      	ldr	r3, [pc, #404]	@ (8002ac8 <xTaskIncrementTick+0x1e8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a63      	ldr	r2, [pc, #396]	@ (8002ac4 <xTaskIncrementTick+0x1e4>)
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4a63      	ldr	r2, [pc, #396]	@ (8002ac8 <xTaskIncrementTick+0x1e8>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b63      	ldr	r3, [pc, #396]	@ (8002acc <xTaskIncrementTick+0x1ec>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	4a61      	ldr	r2, [pc, #388]	@ (8002acc <xTaskIncrementTick+0x1ec>)
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	f000 f9c6 	bl	8002cd8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800294c:	4b60      	ldr	r3, [pc, #384]	@ (8002ad0 <xTaskIncrementTick+0x1f0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	429a      	cmp	r2, r3
 8002954:	f0c0 80a7 	bcc.w	8002aa6 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002958:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac4 <xTaskIncrementTick+0x1e4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002962:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad0 <xTaskIncrementTick+0x1f0>)
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	601a      	str	r2, [r3, #0]
                    break;
 800296a:	e09c      	b.n	8002aa6 <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800296c:	4b55      	ldr	r3, [pc, #340]	@ (8002ac4 <xTaskIncrementTick+0x1e4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d203      	bcs.n	800298c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002984:	4a52      	ldr	r2, [pc, #328]	@ (8002ad0 <xTaskIncrementTick+0x1f0>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	6013      	str	r3, [r2, #0]
                        break;
 800298a:	e08c      	b.n	8002aa6 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	68d2      	ldr	r2, [r2, #12]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	6892      	ldr	r2, [r2, #8]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	3304      	adds	r3, #4
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d103      	bne.n	80029ba <xTaskIncrementTick+0xda>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2200      	movs	r2, #0
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01e      	beq.n	8002a10 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	6a12      	ldr	r2, [r2, #32]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	69d2      	ldr	r2, [r2, #28]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	3318      	adds	r3, #24
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d103      	bne.n	8002a00 <xTaskIncrementTick+0x120>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6a1a      	ldr	r2, [r3, #32]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1e5a      	subs	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 f93a 	bl	8005c8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad4 <xTaskIncrementTick+0x1f4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad4 <xTaskIncrementTick+0x1f4>)
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a2e:	492a      	ldr	r1, [pc, #168]	@ (8002ad8 <xTaskIncrementTick+0x1f8>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	3204      	adds	r2, #4
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1d1a      	adds	r2, r3, #4
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <xTaskIncrementTick+0x1f8>)
 8002a6e:	441a      	add	r2, r3
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	615a      	str	r2, [r3, #20]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a78:	4917      	ldr	r1, [pc, #92]	@ (8002ad8 <xTaskIncrementTick+0x1f8>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	4812      	ldr	r0, [pc, #72]	@ (8002ad8 <xTaskIncrementTick+0x1f8>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4403      	add	r3, r0
 8002a98:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a9a:	e75d      	b.n	8002958 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <xTaskIncrementTick+0x1fc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8002adc <xTaskIncrementTick+0x1fc>)
 8002aa4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	20db      	movs	r0, #219	@ 0xdb
 8002aac:	f002 fff6 	bl	8005a9c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3728      	adds	r7, #40	@ 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200001d4 	.word	0x200001d4
 8002ac0:	200001b0 	.word	0x200001b0
 8002ac4:	20000164 	.word	0x20000164
 8002ac8:	20000168 	.word	0x20000168
 8002acc:	200001c4 	.word	0x200001c4
 8002ad0:	200001cc 	.word	0x200001cc
 8002ad4:	200001b4 	.word	0x200001b4
 8002ad8:	200000d8 	.word	0x200000d8
 8002adc:	200001bc 	.word	0x200001bc

08002ae0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <vTaskSwitchContext+0xc0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002aee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba4 <vTaskSwitchContext+0xc4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002af4:	e04f      	b.n	8002b96 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002af6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <vTaskSwitchContext+0xc4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <vTaskSwitchContext+0xc8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
 8002b0c:	f1c3 031f 	rsb	r3, r3, #31
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	4926      	ldr	r1, [pc, #152]	@ (8002bac <vTaskSwitchContext+0xcc>)
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <vTaskSwitchContext+0x5e>
    __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	607b      	str	r3, [r7, #4]
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <vTaskSwitchContext+0x5a>
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <vTaskSwitchContext+0xcc>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d103      	bne.n	8002b6c <vTaskSwitchContext+0x8c>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb0 <vTaskSwitchContext+0xd0>)
 8002b74:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <vTaskSwitchContext+0xd4>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <vTaskSwitchContext+0xd0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d102      	bne.n	8002b88 <vTaskSwitchContext+0xa8>
 8002b82:	f002 ffe3 	bl	8005b4c <SEGGER_SYSVIEW_OnIdle>
 8002b86:	e004      	b.n	8002b92 <vTaskSwitchContext+0xb2>
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <vTaskSwitchContext+0xd0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 f83b 	bl	8005c08 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <vTaskSwitchContext+0xd0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
    }
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001d4 	.word	0x200001d4
 8002ba4:	200001c0 	.word	0x200001c0
 8002ba8:	200001b4 	.word	0x200001b4
 8002bac:	200000d8 	.word	0x200000d8
 8002bb0:	200000d4 	.word	0x200000d4
 8002bb4:	200001d0 	.word	0x200001d0

08002bb8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002bc0:	f000 f84c 	bl	8002c5c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <prvIdleTask+0x20>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002bd4:	bf00      	nop
 8002bd6:	e7f3      	b.n	8002bc0 <prvIdleTask+0x8>
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	e00c      	b.n	8002c02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <prvInitialiseTaskLists+0x60>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fab6 	bl	8002168 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d9ef      	bls.n	8002be8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c08:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <prvInitialiseTaskLists+0x64>)
 8002c0a:	f7ff faad 	bl	8002168 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <prvInitialiseTaskLists+0x68>)
 8002c10:	f7ff faaa 	bl	8002168 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c14:	480c      	ldr	r0, [pc, #48]	@ (8002c48 <prvInitialiseTaskLists+0x6c>)
 8002c16:	f7ff faa7 	bl	8002168 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002c1a:	480c      	ldr	r0, [pc, #48]	@ (8002c4c <prvInitialiseTaskLists+0x70>)
 8002c1c:	f7ff faa4 	bl	8002168 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002c20:	480b      	ldr	r0, [pc, #44]	@ (8002c50 <prvInitialiseTaskLists+0x74>)
 8002c22:	f7ff faa1 	bl	8002168 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <prvInitialiseTaskLists+0x78>)
 8002c28:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <prvInitialiseTaskLists+0x64>)
 8002c2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <prvInitialiseTaskLists+0x7c>)
 8002c2e:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <prvInitialiseTaskLists+0x68>)
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200000d8 	.word	0x200000d8
 8002c40:	2000013c 	.word	0x2000013c
 8002c44:	20000150 	.word	0x20000150
 8002c48:	2000016c 	.word	0x2000016c
 8002c4c:	20000180 	.word	0x20000180
 8002c50:	20000198 	.word	0x20000198
 8002c54:	20000164 	.word	0x20000164
 8002c58:	20000168 	.word	0x20000168

08002c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c62:	e019      	b.n	8002c98 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002c64:	f000 fa56 	bl	8003114 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c68:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <prvCheckTasksWaitingTermination+0x50>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff faa8 	bl	80021ca <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <prvCheckTasksWaitingTermination+0x54>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <prvCheckTasksWaitingTermination+0x54>)
 8002c82:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <prvCheckTasksWaitingTermination+0x58>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <prvCheckTasksWaitingTermination+0x58>)
 8002c8c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002c8e:	f000 fa73 	bl	8003178 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f810 	bl	8002cb8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <prvCheckTasksWaitingTermination+0x58>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e1      	bne.n	8002c64 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000180 	.word	0x20000180
 8002cb0:	200001ac 	.word	0x200001ac
 8002cb4:	20000194 	.word	0x20000194

08002cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fc85 	bl	80035d4 <vPortFree>
            vPortFree( pxTCB );
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fc82 	bl	80035d4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <prvResetNextTaskUnblockTime+0x30>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <prvResetNextTaskUnblockTime+0x34>)
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cee:	e005      	b.n	8002cfc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cf0:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <prvResetNextTaskUnblockTime+0x30>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <prvResetNextTaskUnblockTime+0x34>)
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000164 	.word	0x20000164
 8002d0c:	200001cc 	.word	0x200001cc

08002d10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b04      	subs	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b04      	subs	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b04      	subs	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d40:	4a0c      	ldr	r2, [pc, #48]	@ (8002d74 <pxPortInitialiseStack+0x64>)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b14      	subs	r3, #20
 8002d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3b04      	subs	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f06f 0202 	mvn.w	r2, #2
 8002d5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b20      	subs	r3, #32
 8002d64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	08002d79 	.word	0x08002d79

08002d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <prvTaskExitError+0x58>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d00b      	beq.n	8002da4 <prvTaskExitError+0x2c>
    __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60fb      	str	r3, [r7, #12]
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <prvTaskExitError+0x28>
    __asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	60bb      	str	r3, [r7, #8]
}
 8002db6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002db8:	bf00      	nop
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0fc      	beq.n	8002dba <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000010 	.word	0x20000010
	...

08002de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002de0:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <pxCurrentTCBConst2>)
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dea:	f380 8809 	msr	PSP, r0
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f380 8811 	msr	BASEPRI, r0
 8002dfa:	4770      	bx	lr
 8002dfc:	f3af 8000 	nop.w

08002e00 <pxCurrentTCBConst2>:
 8002e00:	200000d4 	.word	0x200000d4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop

08002e08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e08:	4808      	ldr	r0, [pc, #32]	@ (8002e2c <prvPortStartFirstTask+0x24>)
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	6800      	ldr	r0, [r0, #0]
 8002e0e:	f380 8808 	msr	MSP, r0
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f380 8814 	msr	CONTROL, r0
 8002e1a:	b662      	cpsie	i
 8002e1c:	b661      	cpsie	f
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	df00      	svc	0
 8002e28:	bf00      	nop
 8002e2a:	0000      	.short	0x0000
 8002e2c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop

08002e34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	@ 0x30
 8002e38:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e3a:	4b69      	ldr	r3, [pc, #420]	@ (8002fe0 <xPortStartScheduler+0x1ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a69      	ldr	r2, [pc, #420]	@ (8002fe4 <xPortStartScheduler+0x1b0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10b      	bne.n	8002e5c <xPortStartScheduler+0x28>
    __asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e5c:	4b60      	ldr	r3, [pc, #384]	@ (8002fe0 <xPortStartScheduler+0x1ac>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a61      	ldr	r2, [pc, #388]	@ (8002fe8 <xPortStartScheduler+0x1b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10b      	bne.n	8002e7e <xPortStartScheduler+0x4a>
    __asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	623b      	str	r3, [r7, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	e7fd      	b.n	8002e7a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fec <xPortStartScheduler+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e86:	332c      	adds	r3, #44	@ 0x2c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a59      	ldr	r2, [pc, #356]	@ (8002ff0 <xPortStartScheduler+0x1bc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <xPortStartScheduler+0x74>
    __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61fb      	str	r3, [r7, #28]
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eaa:	3338      	adds	r3, #56	@ 0x38
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a51      	ldr	r2, [pc, #324]	@ (8002ff4 <xPortStartScheduler+0x1c0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <xPortStartScheduler+0x98>
    __asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	61bb      	str	r3, [r7, #24]
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ed0:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <xPortStartScheduler+0x1c4>)
 8002ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	22ff      	movs	r2, #255	@ 0xff
 8002ee0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <xPortStartScheduler+0x1c8>)
 8002ef6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002ef8:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <xPortStartScheduler+0x1c8>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <xPortStartScheduler+0xe4>
    __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	617b      	str	r3, [r7, #20]
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d013      	beq.n	8002f4e <xPortStartScheduler+0x11a>
    __asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	613b      	str	r3, [r7, #16]
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	e7fd      	b.n	8002f3a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b80      	cmp	r3, #128	@ 0x80
 8002f58:	d0f1      	beq.n	8002f3e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d103      	bne.n	8002f68 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002f60:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <xPortStartScheduler+0x1cc>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e004      	b.n	8002f72 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f1c3 0307 	rsb	r3, r3, #7
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <xPortStartScheduler+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <xPortStartScheduler+0x1cc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	4a21      	ldr	r2, [pc, #132]	@ (8003000 <xPortStartScheduler+0x1cc>)
 8002f7a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f7c:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <xPortStartScheduler+0x1cc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f84:	4a1e      	ldr	r2, [pc, #120]	@ (8003000 <xPortStartScheduler+0x1cc>)
 8002f86:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f90:	4b1c      	ldr	r3, [pc, #112]	@ (8003004 <xPortStartScheduler+0x1d0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <xPortStartScheduler+0x1d0>)
 8002f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <xPortStartScheduler+0x1d0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <xPortStartScheduler+0x1d0>)
 8002fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fa6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <xPortStartScheduler+0x1d4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002fae:	f000 f96d 	bl	800328c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	@ (800300c <xPortStartScheduler+0x1d8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002fb8:	f000 f98c 	bl	80032d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <xPortStartScheduler+0x1dc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <xPortStartScheduler+0x1dc>)
 8002fc2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002fc8:	f7ff ff1e 	bl	8002e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002fcc:	f7ff fd88 	bl	8002ae0 <vTaskSwitchContext>
    prvTaskExitError();
 8002fd0:	f7ff fed2 	bl	8002d78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3730      	adds	r7, #48	@ 0x30
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00
 8002fe4:	410fc271 	.word	0x410fc271
 8002fe8:	410fc270 	.word	0x410fc270
 8002fec:	e000ed08 	.word	0xe000ed08
 8002ff0:	08002de1 	.word	0x08002de1
 8002ff4:	080031d1 	.word	0x080031d1
 8002ff8:	e000e400 	.word	0xe000e400
 8002ffc:	200001d8 	.word	0x200001d8
 8003000:	200001dc 	.word	0x200001dc
 8003004:	e000ed20 	.word	0xe000ed20
 8003008:	e000ed1c 	.word	0xe000ed1c
 800300c:	20000010 	.word	0x20000010
 8003010:	e000ef34 	.word	0xe000ef34

08003014 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800301a:	4b38      	ldr	r3, [pc, #224]	@ (80030fc <vInitPrioGroupValue+0xe8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a38      	ldr	r2, [pc, #224]	@ (8003100 <vInitPrioGroupValue+0xec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10b      	bne.n	800303c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800303c:	4b2f      	ldr	r3, [pc, #188]	@ (80030fc <vInitPrioGroupValue+0xe8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a30      	ldr	r2, [pc, #192]	@ (8003104 <vInitPrioGroupValue+0xf0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10b      	bne.n	800305e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	60fb      	str	r3, [r7, #12]
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800305e:	4b2a      	ldr	r3, [pc, #168]	@ (8003108 <vInitPrioGroupValue+0xf4>)
 8003060:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	22ff      	movs	r2, #255	@ 0xff
 800306e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b22      	ldr	r3, [pc, #136]	@ (800310c <vInitPrioGroupValue+0xf8>)
 8003084:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003086:	4b22      	ldr	r3, [pc, #136]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 8003088:	2207      	movs	r2, #7
 800308a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800308c:	e009      	b.n	80030a2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800308e:	4b20      	ldr	r3, [pc, #128]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3b01      	subs	r3, #1
 8003094:	4a1e      	ldr	r2, [pc, #120]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 8003096:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b80      	cmp	r3, #128	@ 0x80
 80030ac:	d0ef      	beq.n	800308e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030ae:	4b18      	ldr	r3, [pc, #96]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d00b      	beq.n	80030d2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 80030da:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <vInitPrioGroupValue+0xfc>)
 80030e6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00
 8003100:	410fc271 	.word	0x410fc271
 8003104:	410fc270 	.word	0x410fc270
 8003108:	e000e400 	.word	0xe000e400
 800310c:	200001d8 	.word	0x200001d8
 8003110:	200001dc 	.word	0x200001dc

08003114 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
    __asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
}
 800312c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800312e:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <vPortEnterCritical+0x5c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <vPortEnterCritical+0x5c>)
 8003136:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <vPortEnterCritical+0x5c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d110      	bne.n	8003162 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <vPortEnterCritical+0x60>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <vPortEnterCritical+0x4e>
    __asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	603b      	str	r3, [r7, #0]
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	e7fd      	b.n	800315e <vPortEnterCritical+0x4a>
    }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000010 	.word	0x20000010
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800317e:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <vPortExitCritical+0x50>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <vPortExitCritical+0x26>
    __asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	607b      	str	r3, [r7, #4]
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	e7fd      	b.n	800319a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <vPortExitCritical+0x50>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	4a08      	ldr	r2, [pc, #32]	@ (80031c8 <vPortExitCritical+0x50>)
 80031a6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80031a8:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <vPortExitCritical+0x50>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <vPortExitCritical+0x44>
 80031b0:	2300      	movs	r3, #0
 80031b2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80031ba:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	20000010 	.word	0x20000010
 80031cc:	00000000 	.word	0x00000000

080031d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80031d0:	f3ef 8009 	mrs	r0, PSP
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <pxCurrentTCBConst>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f01e 0f10 	tst.w	lr, #16
 80031e0:	bf08      	it	eq
 80031e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ea:	6010      	str	r0, [r2, #0]
 80031ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80031f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80031f4:	f380 8811 	msr	BASEPRI, r0
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f7ff fc6e 	bl	8002ae0 <vTaskSwitchContext>
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f380 8811 	msr	BASEPRI, r0
 800320c:	bc09      	pop	{r0, r3}
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	6808      	ldr	r0, [r1, #0]
 8003212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003216:	f01e 0f10 	tst.w	lr, #16
 800321a:	bf08      	it	eq
 800321c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003220:	f380 8809 	msr	PSP, r0
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	f3af 8000 	nop.w

08003230 <pxCurrentTCBConst>:
 8003230:	200000d4 	.word	0x200000d4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop

08003238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
    __asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003252:	f002 fb6d 	bl	8005930 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003256:	f7ff fb43 	bl	80028e0 <xTaskIncrementTick>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003260:	f002 fbc4 	bl	80059ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <SysTick_Handler+0x50>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e001      	b.n	8003272 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800326e:	f002 fba1 	bl	80059b4 <SEGGER_SYSVIEW_RecordExitISR>
 8003272:	2300      	movs	r3, #0
 8003274:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f383 8811 	msr	BASEPRI, r3
}
 800327c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000ed04 	.word	0xe000ed04

0800328c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <vPortSetupTimerInterrupt+0x34>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <vPortSetupTimerInterrupt+0x38>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800329c:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <vPortSetupTimerInterrupt+0x3c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <vPortSetupTimerInterrupt+0x40>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <vPortSetupTimerInterrupt+0x44>)
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032ae:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <vPortSetupTimerInterrupt+0x34>)
 80032b0:	2207      	movs	r2, #7
 80032b2:	601a      	str	r2, [r3, #0]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000e010 	.word	0xe000e010
 80032c4:	e000e018 	.word	0xe000e018
 80032c8:	20000000 	.word	0x20000000
 80032cc:	10624dd3 	.word	0x10624dd3
 80032d0:	e000e014 	.word	0xe000e014

080032d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80032d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80032e4 <vPortEnableVFP+0x10>
 80032d8:	6801      	ldr	r1, [r0, #0]
 80032da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80032de:	6001      	str	r1, [r0, #0]
 80032e0:	4770      	bx	lr
 80032e2:	0000      	.short	0x0000
 80032e4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop

080032ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80032f2:	f3ef 8305 	mrs	r3, IPSR
 80032f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d915      	bls.n	800332a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80032fe:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <vPortValidateInterruptPriority+0x74>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003308:	4b16      	ldr	r3, [pc, #88]	@ (8003364 <vPortValidateInterruptPriority+0x78>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	7afa      	ldrb	r2, [r7, #11]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20b      	bcs.n	800332a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	607b      	str	r3, [r7, #4]
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	e7fd      	b.n	8003326 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <vPortValidateInterruptPriority+0x7c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <vPortValidateInterruptPriority+0x80>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d90b      	bls.n	8003352 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	603b      	str	r3, [r7, #0]
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <vPortValidateInterruptPriority+0x62>
    }
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e3f0 	.word	0xe000e3f0
 8003364:	200001d8 	.word	0x200001d8
 8003368:	e000ed0c 	.word	0xe000ed0c
 800336c:	200001dc 	.word	0x200001dc

08003370 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08e      	sub	sp, #56	@ 0x38
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003382:	2308      	movs	r3, #8
 8003384:	43db      	mvns	r3, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d81b      	bhi.n	80033c4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800338c:	2208      	movs	r2, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b00      	cmp	r3, #0
 800339c:	d014      	beq.n	80033c8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	f1c3 0308 	rsb	r3, r3, #8
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80033aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ac:	43db      	mvns	r3, r3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d804      	bhi.n	80033be <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	4413      	add	r3, r2
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	e004      	b.n	80033c8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	e001      	b.n	80033c8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80033c8:	f7ff f964 	bl	8002694 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033cc:	4b7a      	ldr	r3, [pc, #488]	@ (80035b8 <pvPortMalloc+0x248>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80033d4:	f000 f978 	bl	80036c8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f2c0 80d3 	blt.w	8003586 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80cf 	beq.w	8003586 <pvPortMalloc+0x216>
 80033e8:	4b74      	ldr	r3, [pc, #464]	@ (80035bc <pvPortMalloc+0x24c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	f200 80c9 	bhi.w	8003586 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033f4:	4b72      	ldr	r3, [pc, #456]	@ (80035c0 <pvPortMalloc+0x250>)
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80033f8:	4b71      	ldr	r3, [pc, #452]	@ (80035c0 <pvPortMalloc+0x250>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80033fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003400:	4a70      	ldr	r2, [pc, #448]	@ (80035c4 <pvPortMalloc+0x254>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d305      	bcc.n	8003412 <pvPortMalloc+0xa2>
 8003406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003408:	4a6f      	ldr	r2, [pc, #444]	@ (80035c8 <pvPortMalloc+0x258>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d801      	bhi.n	8003412 <pvPortMalloc+0xa2>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <pvPortMalloc+0xa4>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d129      	bne.n	800346c <pvPortMalloc+0xfc>
    __asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	623b      	str	r3, [r7, #32]
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800343a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343c:	4a61      	ldr	r2, [pc, #388]	@ (80035c4 <pvPortMalloc+0x254>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d305      	bcc.n	800344e <pvPortMalloc+0xde>
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	4a60      	ldr	r2, [pc, #384]	@ (80035c8 <pvPortMalloc+0x258>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d801      	bhi.n	800344e <pvPortMalloc+0xde>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <pvPortMalloc+0xe0>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <pvPortMalloc+0xfc>
    __asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	61fb      	str	r3, [r7, #28]
}
 8003466:	bf00      	nop
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800346c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d903      	bls.n	800347e <pvPortMalloc+0x10e>
 8003476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1d8      	bne.n	8003430 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800347e:	4b4e      	ldr	r3, [pc, #312]	@ (80035b8 <pvPortMalloc+0x248>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003484:	429a      	cmp	r2, r3
 8003486:	d07e      	beq.n	8003586 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	4413      	add	r3, r2
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003494:	4a4b      	ldr	r2, [pc, #300]	@ (80035c4 <pvPortMalloc+0x254>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d305      	bcc.n	80034a6 <pvPortMalloc+0x136>
 800349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349c:	4a4a      	ldr	r2, [pc, #296]	@ (80035c8 <pvPortMalloc+0x258>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d801      	bhi.n	80034a6 <pvPortMalloc+0x136>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <pvPortMalloc+0x138>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <pvPortMalloc+0x154>
    __asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	61bb      	str	r3, [r7, #24]
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80034cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d90b      	bls.n	80034ee <pvPortMalloc+0x17e>
    __asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	617b      	str	r3, [r7, #20]
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	e7fd      	b.n	80034ea <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	2308      	movs	r3, #8
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d924      	bls.n	8003548 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <pvPortMalloc+0x1b8>
    __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad2      	subs	r2, r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003546:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003548:	4b1c      	ldr	r3, [pc, #112]	@ (80035bc <pvPortMalloc+0x24c>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	4a1a      	ldr	r2, [pc, #104]	@ (80035bc <pvPortMalloc+0x24c>)
 8003554:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003556:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <pvPortMalloc+0x24c>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b1c      	ldr	r3, [pc, #112]	@ (80035cc <pvPortMalloc+0x25c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d203      	bcs.n	800356a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003562:	4b16      	ldr	r3, [pc, #88]	@ (80035bc <pvPortMalloc+0x24c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <pvPortMalloc+0x25c>)
 8003568:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003574:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800357c:	4b14      	ldr	r3, [pc, #80]	@ (80035d0 <pvPortMalloc+0x260>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a13      	ldr	r2, [pc, #76]	@ (80035d0 <pvPortMalloc+0x260>)
 8003584:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003586:	f7ff f893 	bl	80026b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <pvPortMalloc+0x23c>
    __asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60fb      	str	r3, [r7, #12]
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <pvPortMalloc+0x238>
    return pvReturn;
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3738      	adds	r7, #56	@ 0x38
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200191e8 	.word	0x200191e8
 80035bc:	200191ec 	.word	0x200191ec
 80035c0:	200191e0 	.word	0x200191e0
 80035c4:	200001e0 	.word	0x200001e0
 80035c8:	200191df 	.word	0x200191df
 80035cc:	200191f0 	.word	0x200191f0
 80035d0:	200191f4 	.word	0x200191f4

080035d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d064      	beq.n	80036b0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80035e6:	2308      	movs	r3, #8
 80035e8:	425b      	negs	r3, r3
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	4a30      	ldr	r2, [pc, #192]	@ (80036b8 <vPortFree+0xe4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d305      	bcc.n	8003608 <vPortFree+0x34>
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	@ (80036bc <vPortFree+0xe8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d801      	bhi.n	8003608 <vPortFree+0x34>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <vPortFree+0x36>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <vPortFree+0x52>
    __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	617b      	str	r3, [r7, #20]
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db0b      	blt.n	8003646 <vPortFree+0x72>
    __asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	613b      	str	r3, [r7, #16]
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <vPortFree+0x92>
    __asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	60fb      	str	r3, [r7, #12]
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	e7fd      	b.n	8003662 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0fdb      	lsrs	r3, r3, #31
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01c      	beq.n	80036b0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d118      	bne.n	80036b0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800368a:	f7ff f803 	bl	8002694 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <vPortFree+0xec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <vPortFree+0xec>)
 800369a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800369c:	69b8      	ldr	r0, [r7, #24]
 800369e:	f000 f86d 	bl	800377c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036a2:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <vPortFree+0xf0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a06      	ldr	r2, [pc, #24]	@ (80036c4 <vPortFree+0xf0>)
 80036aa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036ac:	f7ff f800 	bl	80026b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036b0:	bf00      	nop
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200001e0 	.word	0x200001e0
 80036bc:	200191df 	.word	0x200191df
 80036c0:	200191ec 	.word	0x200191ec
 80036c4:	200191f8 	.word	0x200191f8

080036c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036ce:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036d4:	4b24      	ldr	r3, [pc, #144]	@ (8003768 <prvHeapInit+0xa0>)
 80036d6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00c      	beq.n	80036fc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0307 	bic.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003768 <prvHeapInit+0xa0>)
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	@ (800376c <prvHeapInit+0xa4>)
 8003700:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003702:	4b1a      	ldr	r3, [pc, #104]	@ (800376c <prvHeapInit+0xa4>)
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4413      	add	r3, r2
 800370e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003710:	2208      	movs	r2, #8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a13      	ldr	r2, [pc, #76]	@ (8003770 <prvHeapInit+0xa8>)
 8003724:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <prvHeapInit+0xa8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <prvHeapInit+0xa8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003744:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <prvHeapInit+0xa8>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <prvHeapInit+0xac>)
 8003752:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <prvHeapInit+0xb0>)
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	200001e0 	.word	0x200001e0
 800376c:	200191e0 	.word	0x200191e0
 8003770:	200191e8 	.word	0x200191e8
 8003774:	200191f0 	.word	0x200191f0
 8003778:	200191ec 	.word	0x200191ec

0800377c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003784:	4b36      	ldr	r3, [pc, #216]	@ (8003860 <prvInsertBlockIntoFreeList+0xe4>)
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e002      	b.n	8003790 <prvInsertBlockIntoFreeList+0x14>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d8f7      	bhi.n	800378a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4a30      	ldr	r2, [pc, #192]	@ (8003860 <prvInsertBlockIntoFreeList+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003864 <prvInsertBlockIntoFreeList+0xe8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d305      	bcc.n	80037b6 <prvInsertBlockIntoFreeList+0x3a>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003868 <prvInsertBlockIntoFreeList+0xec>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d801      	bhi.n	80037b6 <prvInsertBlockIntoFreeList+0x3a>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <prvInsertBlockIntoFreeList+0x3c>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	60fb      	str	r3, [r7, #12]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d108      	bne.n	80037f8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	441a      	add	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	441a      	add	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d118      	bne.n	800383e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b16      	ldr	r3, [pc, #88]	@ (800386c <prvInsertBlockIntoFreeList+0xf0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d00d      	beq.n	8003834 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	441a      	add	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e008      	b.n	8003846 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003834:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <prvInsertBlockIntoFreeList+0xf0>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e003      	b.n	8003846 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d002      	beq.n	8003854 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	200191e0 	.word	0x200191e0
 8003864:	200001e0 	.word	0x200001e0
 8003868:	200191df 	.word	0x200191df
 800386c:	200191e8 	.word	0x200191e8

08003870 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003874:	4803      	ldr	r0, [pc, #12]	@ (8003884 <_cbSendSystemDesc+0x14>)
 8003876:	f002 f805 	bl	8005884 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800387a:	4803      	ldr	r0, [pc, #12]	@ (8003888 <_cbSendSystemDesc+0x18>)
 800387c:	f002 f802 	bl	8005884 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}
 8003884:	08006a14 	.word	0x08006a14
 8003888:	08006a48 	.word	0x08006a48

0800388c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <SEGGER_SYSVIEW_Conf+0x20>)
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <SEGGER_SYSVIEW_Conf+0x20>)
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <SEGGER_SYSVIEW_Conf+0x24>)
 800389a:	4a06      	ldr	r2, [pc, #24]	@ (80038b4 <SEGGER_SYSVIEW_Conf+0x28>)
 800389c:	f001 fc76 	bl	800518c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80038a0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80038a4:	f001 fcb6 	bl	8005214 <SEGGER_SYSVIEW_SetRAMBase>
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000000 	.word	0x20000000
 80038b0:	08003871 	.word	0x08003871
 80038b4:	08006ae4 	.word	0x08006ae4

080038b8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	e033      	b.n	800392c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038c4:	491e      	ldr	r1, [pc, #120]	@ (8003940 <_cbSendTaskList+0x88>)
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	491a      	ldr	r1, [pc, #104]	@ (8003940 <_cbSendTaskList+0x88>)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3304      	adds	r3, #4
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	4c16      	ldr	r4, [pc, #88]	@ (8003940 <_cbSendTaskList+0x88>)
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4423      	add	r3, r4
 80038f4:	3308      	adds	r3, #8
 80038f6:	681c      	ldr	r4, [r3, #0]
 80038f8:	4d11      	ldr	r5, [pc, #68]	@ (8003940 <_cbSendTaskList+0x88>)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	442b      	add	r3, r5
 8003906:	330c      	adds	r3, #12
 8003908:	681d      	ldr	r5, [r3, #0]
 800390a:	4e0d      	ldr	r6, [pc, #52]	@ (8003940 <_cbSendTaskList+0x88>)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4433      	add	r3, r6
 8003918:	3310      	adds	r3, #16
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	462b      	mov	r3, r5
 8003920:	4622      	mov	r2, r4
 8003922:	f000 f8bd 	bl	8003aa0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3301      	adds	r3, #1
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <_cbSendTaskList+0x8c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3c6      	bcc.n	80038c4 <_cbSendTaskList+0xc>
  }
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003940:	200191fc 	.word	0x200191fc
 8003944:	2001929c 	.word	0x2001929c

08003948 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003950:	f7fe ffb0 	bl	80028b4 <xTaskGetTickCountFromISR>
 8003954:	4603      	mov	r3, r0
 8003956:	2200      	movs	r2, #0
 8003958:	469a      	mov	sl, r3
 800395a:	4693      	mov	fp, r2
 800395c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	f04f 0a00 	mov.w	sl, #0
 800396c:	f04f 0b00 	mov.w	fp, #0
 8003970:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003974:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003978:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800397c:	4652      	mov	r2, sl
 800397e:	465b      	mov	r3, fp
 8003980:	1a14      	subs	r4, r2, r0
 8003982:	eb63 0501 	sbc.w	r5, r3, r1
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	00ab      	lsls	r3, r5, #2
 8003990:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003994:	00a2      	lsls	r2, r4, #2
 8003996:	4614      	mov	r4, r2
 8003998:	461d      	mov	r5, r3
 800399a:	eb14 0800 	adds.w	r8, r4, r0
 800399e:	eb45 0901 	adc.w	r9, r5, r1
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b6:	4690      	mov	r8, r2
 80039b8:	4699      	mov	r9, r3
 80039ba:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80039be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080039d0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80039de:	2205      	movs	r2, #5
 80039e0:	492b      	ldr	r1, [pc, #172]	@ (8003a90 <SYSVIEW_AddTask+0xc0>)
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f002 fb4c 	bl	8006080 <memcmp>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04b      	beq.n	8003a86 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80039ee:	4b29      	ldr	r3, [pc, #164]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b07      	cmp	r3, #7
 80039f4:	d903      	bls.n	80039fe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80039f6:	4828      	ldr	r0, [pc, #160]	@ (8003a98 <SYSVIEW_AddTask+0xc8>)
 80039f8:	f002 fa84 	bl	8005f04 <SEGGER_SYSVIEW_Warn>
    return;
 80039fc:	e044      	b.n	8003a88 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80039fe:	4b25      	ldr	r3, [pc, #148]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4926      	ldr	r1, [pc, #152]	@ (8003a9c <SYSVIEW_AddTask+0xcc>)
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003a12:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4921      	ldr	r1, [pc, #132]	@ (8003a9c <SYSVIEW_AddTask+0xcc>)
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3304      	adds	r3, #4
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	491b      	ldr	r1, [pc, #108]	@ (8003a9c <SYSVIEW_AddTask+0xcc>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3308      	adds	r3, #8
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a3e:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4916      	ldr	r1, [pc, #88]	@ (8003a9c <SYSVIEW_AddTask+0xcc>)
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	330c      	adds	r3, #12
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4910      	ldr	r1, [pc, #64]	@ (8003a9c <SYSVIEW_AddTask+0xcc>)
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3310      	adds	r3, #16
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <SYSVIEW_AddTask+0xc4>)
 8003a72:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f80e 	bl	8003aa0 <SYSVIEW_SendTaskInfo>
 8003a84:	e000      	b.n	8003a88 <SYSVIEW_AddTask+0xb8>
    return;
 8003a86:	bf00      	nop

}
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	08006a58 	.word	0x08006a58
 8003a94:	2001929c 	.word	0x2001929c
 8003a98:	08006a60 	.word	0x08006a60
 8003a9c:	200191fc 	.word	0x200191fc

08003aa0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	@ 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	2218      	movs	r2, #24
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f002 faf2 	bl	80060a0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 fddd 	bl	8005694 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ada:	bf00      	nop
 8003adc:	3728      	adds	r7, #40	@ 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <__NVIC_EnableIRQ>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	db0b      	blt.n	8003b0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4907      	ldr	r1, [pc, #28]	@ (8003b1c <__NVIC_EnableIRQ+0x38>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2001      	movs	r0, #1
 8003b06:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPriority>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db0a      	blt.n	8003b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	490c      	ldr	r1, [pc, #48]	@ (8003b6c <__NVIC_SetPriority+0x4c>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b48:	e00a      	b.n	8003b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4908      	ldr	r1, [pc, #32]	@ (8003b70 <__NVIC_SetPriority+0x50>)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	3b04      	subs	r3, #4
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	761a      	strb	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e100 	.word	0xe000e100
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003b7a:	f002 fa1f 	bl	8005fbc <SEGGER_SYSVIEW_IsStarted>
 8003b7e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003b86:	f001 fc09 	bl	800539c <SEGGER_SYSVIEW_Start>
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <_cbOnUARTRx+0x3c>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d806      	bhi.n	8003bb4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <_cbOnUARTRx+0x3c>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b08      	ldr	r3, [pc, #32]	@ (8003bd0 <_cbOnUARTRx+0x3c>)
 8003bb0:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003bb2:	e009      	b.n	8003bc8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003bb4:	f7ff ffde 	bl	8003b74 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <_cbOnUARTRx+0x3c>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f000 fb9c 	bl	8004300 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003bc8:	bf00      	nop
}
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000014 	.word	0x20000014

08003bd4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003bdc:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <_cbOnUARTTx+0x5c>)
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d80f      	bhi.n	8003c04 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003be4:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <_cbOnUARTTx+0x5c>)
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b12      	ldr	r3, [pc, #72]	@ (8003c34 <_cbOnUARTTx+0x60>)
 8003bec:	5c9a      	ldrb	r2, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <_cbOnUARTTx+0x5c>)
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <_cbOnUARTTx+0x5c>)
 8003bfc:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003c02:	e00f      	b.n	8003c24 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <_cbOnUARTTx+0x5c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fa1b 	bl	8004048 <SEGGER_RTT_ReadUpBufferNoLock>
 8003c12:	4603      	mov	r3, r0
 8003c14:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	da02      	bge.n	8003c22 <_cbOnUARTTx+0x4e>
    r = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e000      	b.n	8003c24 <_cbOnUARTTx+0x50>
  }
Done:
 8003c22:	bf00      	nop
  return r;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000014 	.word	0x20000014
 8003c34:	08006aec 	.word	0x08006aec

08003c38 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003c40:	4a04      	ldr	r2, [pc, #16]	@ (8003c54 <SEGGER_UART_init+0x1c>)
 8003c42:	4905      	ldr	r1, [pc, #20]	@ (8003c58 <SEGGER_UART_init+0x20>)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f863 	bl	8003d10 <HIF_UART_Init>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08003b95 	.word	0x08003b95
 8003c58:	08003bd5 	.word	0x08003bd5

08003c5c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003c62:	4b1e      	ldr	r3, [pc, #120]	@ (8003cdc <USART2_IRQHandler+0x80>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d011      	beq.n	8003c96 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003c72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <USART2_IRQHandler+0x84>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 030b 	and.w	r3, r3, #11
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d108      	bne.n	8003c96 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003c84:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <USART2_IRQHandler+0x88>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003c8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <USART2_IRQHandler+0x88>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	79fa      	ldrb	r2, [r7, #7]
 8003c92:	4610      	mov	r0, r2
 8003c94:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01a      	beq.n	8003cd6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003ca0:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <USART2_IRQHandler+0x8c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce8 <USART2_IRQHandler+0x8c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	1dfa      	adds	r2, r7, #7
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4798      	blx	r3
 8003cb2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003cba:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <USART2_IRQHandler+0x90>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <USART2_IRQHandler+0x90>)
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e006      	b.n	8003cd6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <USART2_IRQHandler+0x80>)
 8003cca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ccc:	79fa      	ldrb	r2, [r7, #7]
 8003cce:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <USART2_IRQHandler+0x84>)
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e000      	b.n	8003cd6 <USART2_IRQHandler+0x7a>
      return;
 8003cd4:	bf00      	nop
    }
  }
}
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	40004404 	.word	0x40004404
 8003ce4:	200192a0 	.word	0x200192a0
 8003ce8:	200192a4 	.word	0x200192a4
 8003cec:	4000440c 	.word	0x4000440c

08003cf0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	4000440c 	.word	0x4000440c

08003d10 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd8 <HIF_UART_Init+0xc8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd8 <HIF_UART_Init+0xc8>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d26:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003d28:	4b2c      	ldr	r3, [pc, #176]	@ (8003ddc <HIF_UART_Init+0xcc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ddc <HIF_UART_Init+0xcc>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003d34:	4b2a      	ldr	r3, [pc, #168]	@ (8003de0 <HIF_UART_Init+0xd0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d40:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8003d48:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003d4a:	4a25      	ldr	r2, [pc, #148]	@ (8003de0 <HIF_UART_Init+0xd0>)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003d50:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HIF_UART_Init+0xd4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d5c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8003d64:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003d66:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <HIF_UART_Init+0xd4>)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <HIF_UART_Init+0xd8>)
 8003d6e:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8003d72:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <HIF_UART_Init+0xdc>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <HIF_UART_Init+0xe0>)
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003d86:	4a1b      	ldr	r2, [pc, #108]	@ (8003df4 <HIF_UART_Init+0xe4>)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9e:	d302      	bcc.n	8003da6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003da0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003da4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4a11      	ldr	r2, [pc, #68]	@ (8003df8 <HIF_UART_Init+0xe8>)
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003db6:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <HIF_UART_Init+0xec>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003dbc:	4a10      	ldr	r2, [pc, #64]	@ (8003e00 <HIF_UART_Init+0xf0>)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003dc2:	2106      	movs	r1, #6
 8003dc4:	2026      	movs	r0, #38	@ 0x26
 8003dc6:	f7ff feab 	bl	8003b20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003dca:	2026      	movs	r0, #38	@ 0x26
 8003dcc:	f7ff fe8a 	bl	8003ae4 <__NVIC_EnableIRQ>
}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023840 	.word	0x40023840
 8003ddc:	40023830 	.word	0x40023830
 8003de0:	40020020 	.word	0x40020020
 8003de4:	40020000 	.word	0x40020000
 8003de8:	4000440c 	.word	0x4000440c
 8003dec:	40004410 	.word	0x40004410
 8003df0:	40004414 	.word	0x40004414
 8003df4:	0501bd00 	.word	0x0501bd00
 8003df8:	40004408 	.word	0x40004408
 8003dfc:	200192a0 	.word	0x200192a0
 8003e00:	200192a4 	.word	0x200192a4

08003e04 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <_DoInit+0xa0>)
 8003e0c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e0e:	22a8      	movs	r2, #168	@ 0xa8
 8003e10:	2100      	movs	r1, #0
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f002 f944 	bl	80060a0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2203      	movs	r2, #3
 8003e22:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <_DoInit+0xa4>)
 8003e28:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003eac <_DoInit+0xa8>)
 8003e2e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e36:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2200      	movs	r2, #0
 8003e42:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ea8 <_DoInit+0xa4>)
 8003e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <_DoInit+0xac>)
 8003e54:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2210      	movs	r2, #16
 8003e5a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e6e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e72:	2300      	movs	r3, #0
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	e00c      	b.n	8003e92 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1c3 030f 	rsb	r3, r3, #15
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <_DoInit+0xb0>)
 8003e80:	5cd1      	ldrb	r1, [r2, r3]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	460a      	mov	r2, r1
 8003e8a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d9ef      	bls.n	8003e78 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e98:	f3bf 8f5f 	dmb	sy
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200192a8 	.word	0x200192a8
 8003ea8:	08006ab0 	.word	0x08006ab0
 8003eac:	20019350 	.word	0x20019350
 8003eb0:	20019750 	.word	0x20019750
 8003eb4:	08006af0 	.word	0x08006af0

08003eb8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d905      	bls.n	8003ee8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee6:	e007      	b.n	8003ef8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	1acb      	subs	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bf28      	it	cs
 8003f06:	4613      	movcs	r3, r2
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bf28      	it	cs
 8003f12:	4613      	movcs	r3, r2
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6978      	ldr	r0, [r7, #20]
 8003f26:	f002 f8e9 	bl	80060fc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003f2a:	6a3a      	ldr	r2, [r7, #32]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	4413      	add	r3, r2
 8003f30:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	4413      	add	r3, r2
 8003f38:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	4413      	add	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d101      	bne.n	8003f58 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f58:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1b2      	bne.n	8003ece <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003f68:	6a3b      	ldr	r3, [r7, #32]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3728      	adds	r7, #40	@ 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b088      	sub	sp, #32
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d911      	bls.n	8003fba <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	6938      	ldr	r0, [r7, #16]
 8003fa6:	f002 f8a9 	bl	80060fc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003faa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003fb8:	e01f      	b.n	8003ffa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	6938      	ldr	r0, [r7, #16]
 8003fce:	f002 f895 	bl	80060fc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6938      	ldr	r0, [r7, #16]
 8003fec:	f002 f886 	bl	80060fc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ff0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	60da      	str	r2, [r3, #12]
}
 8003ffa:	bf00      	nop
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004002:	b480      	push	{r7}
 8004004:	b087      	sub	sp, #28
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	429a      	cmp	r2, r3
 800401c:	d808      	bhi.n	8004030 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad2      	subs	r2, r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	3b01      	subs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e004      	b.n	800403a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  }
  return r;
 800403a:	697b      	ldr	r3, [r7, #20]
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	@ 0x30
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004054:	4b3e      	ldr	r3, [pc, #248]	@ (8004150 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b53      	cmp	r3, #83	@ 0x53
 8004060:	d001      	beq.n	8004066 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004062:	f7ff fecf 	bl	8003e04 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4a37      	ldr	r2, [pc, #220]	@ (8004150 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004074:	4413      	add	r3, r2
 8004076:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800408c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	429a      	cmp	r2, r3
 8004092:	d92b      	bls.n	80040ec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4293      	cmp	r3, r2
 80040a4:	bf28      	it	cs
 80040a6:	4613      	movcs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	4413      	add	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	6939      	ldr	r1, [r7, #16]
 80040b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040ba:	f002 f81f 	bl	80060fc <memcpy>
    NumBytesRead += NumBytesRem;
 80040be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	4413      	add	r3, r2
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80040c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4413      	add	r3, r2
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d101      	bne.n	80040ec <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bf28      	it	cs
 80040fc:	4613      	movcs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d019      	beq.n	800413a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	4413      	add	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	6939      	ldr	r1, [r7, #16]
 8004114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004116:	f001 fff1 	bl	80060fc <memcpy>
    NumBytesRead += NumBytesRem;
 800411a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004144:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	@ 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200192a8 	.word	0x200192a8

08004154 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b08c      	sub	sp, #48	@ 0x30
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004160:	4b3e      	ldr	r3, [pc, #248]	@ (800425c <SEGGER_RTT_ReadNoLock+0x108>)
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b53      	cmp	r3, #83	@ 0x53
 800416c:	d001      	beq.n	8004172 <SEGGER_RTT_ReadNoLock+0x1e>
 800416e:	f7ff fe49 	bl	8003e04 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	3360      	adds	r3, #96	@ 0x60
 800417e:	4a37      	ldr	r2, [pc, #220]	@ (800425c <SEGGER_RTT_ReadNoLock+0x108>)
 8004180:	4413      	add	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	429a      	cmp	r2, r3
 800419e:	d92b      	bls.n	80041f8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bf28      	it	cs
 80041b2:	4613      	movcs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	4413      	add	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	6939      	ldr	r1, [r7, #16]
 80041c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041c6:	f001 ff99 	bl	80060fc <memcpy>
    NumBytesRead += NumBytesRem;
 80041ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80041d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4413      	add	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4413      	add	r3, r2
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d101      	bne.n	80041f8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80041f4:	2300      	movs	r3, #0
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4293      	cmp	r3, r2
 8004206:	bf28      	it	cs
 8004208:	4613      	movcs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d019      	beq.n	8004246 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	4413      	add	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	6939      	ldr	r1, [r7, #16]
 8004220:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004222:	f001 ff6b 	bl	80060fc <memcpy>
    NumBytesRead += NumBytesRem;
 8004226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4413      	add	r3, r2
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800422e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4413      	add	r3, r2
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800423e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004250:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004254:	4618      	mov	r0, r3
 8004256:	3730      	adds	r7, #48	@ 0x30
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200192a8 	.word	0x200192a8

08004260 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	3360      	adds	r3, #96	@ 0x60
 800427c:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d029      	beq.n	80042de <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800428a:	2b02      	cmp	r3, #2
 800428c:	d82e      	bhi.n	80042ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004292:	2b01      	cmp	r3, #1
 8004294:	d013      	beq.n	80042be <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004296:	e029      	b.n	80042ec <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004298:	6978      	ldr	r0, [r7, #20]
 800429a:	f7ff feb2 	bl	8004002 <_GetAvailWriteSpace>
 800429e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d202      	bcs.n	80042ae <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80042ac:	e021      	b.n	80042f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	69b9      	ldr	r1, [r7, #24]
 80042b6:	6978      	ldr	r0, [r7, #20]
 80042b8:	f7ff fe5b 	bl	8003f72 <_WriteNoCheck>
    break;
 80042bc:	e019      	b.n	80042f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7ff fe9f 	bl	8004002 <_GetAvailWriteSpace>
 80042c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	bf28      	it	cs
 80042ce:	4613      	movcs	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	69b9      	ldr	r1, [r7, #24]
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff fe4b 	bl	8003f72 <_WriteNoCheck>
    break;
 80042dc:	e009      	b.n	80042f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f7ff fde8 	bl	8003eb8 <_WriteBlocking>
 80042e8:	61f8      	str	r0, [r7, #28]
    break;
 80042ea:	e002      	b.n	80042f2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
    break;
 80042f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80042f2:	69fb      	ldr	r3, [r7, #28]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	200192a8 	.word	0x200192a8

08004300 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800430c:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b53      	cmp	r3, #83	@ 0x53
 8004318:	d001      	beq.n	800431e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800431a:	f7ff fd73 	bl	8003e04 <_DoInit>
  SEGGER_RTT_LOCK();
 800431e:	f3ef 8311 	mrs	r3, BASEPRI
 8004322:	f04f 0120 	mov.w	r1, #32
 8004326:	f381 8811 	msr	BASEPRI, r1
 800432a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff ff95 	bl	8004260 <SEGGER_RTT_WriteDownBufferNoLock>
 8004336:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800433e:	697b      	ldr	r3, [r7, #20]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200192a8 	.word	0x200192a8

0800434c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800435a:	4b3d      	ldr	r3, [pc, #244]	@ (8004450 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b53      	cmp	r3, #83	@ 0x53
 8004366:	d001      	beq.n	800436c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004368:	f7ff fd4c 	bl	8003e04 <_DoInit>
  SEGGER_RTT_LOCK();
 800436c:	f3ef 8311 	mrs	r3, BASEPRI
 8004370:	f04f 0120 	mov.w	r1, #32
 8004374:	f381 8811 	msr	BASEPRI, r1
 8004378:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800437a:	4b35      	ldr	r3, [pc, #212]	@ (8004450 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800437c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004382:	6939      	ldr	r1, [r7, #16]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	3304      	adds	r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	dbeb      	blt.n	8004382 <SEGGER_RTT_AllocUpBuffer+0x36>
 80043aa:	e000      	b.n	80043ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80043ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	da3f      	bge.n	8004438 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80043cc:	6939      	ldr	r1, [r7, #16]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	3304      	adds	r3, #4
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80043e2:	6939      	ldr	r1, [r7, #16]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	3320      	adds	r3, #32
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	440b      	add	r3, r1
 8004404:	3328      	adds	r3, #40	@ 0x28
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	3324      	adds	r3, #36	@ 0x24
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	4613      	mov	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	440b      	add	r3, r1
 800442c:	332c      	adds	r3, #44	@ 0x2c
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004432:	f3bf 8f5f 	dmb	sy
 8004436:	e002      	b.n	800443e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004444:	69fb      	ldr	r3, [r7, #28]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200192a8 	.word	0x200192a8

08004454 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	@ 0x28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004462:	4b21      	ldr	r3, [pc, #132]	@ (80044e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b53      	cmp	r3, #83	@ 0x53
 800446e:	d001      	beq.n	8004474 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004470:	f7ff fcc8 	bl	8003e04 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004474:	4b1c      	ldr	r3, [pc, #112]	@ (80044e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004476:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d82c      	bhi.n	80044d8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800447e:	f3ef 8311 	mrs	r3, BASEPRI
 8004482:	f04f 0120 	mov.w	r1, #32
 8004486:	f381 8811 	msr	BASEPRI, r1
 800448a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4613      	mov	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	3360      	adds	r3, #96	@ 0x60
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2200      	movs	r2, #0
 80044ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2200      	movs	r2, #0
 80044c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d6:	e002      	b.n	80044de <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3728      	adds	r7, #40	@ 0x28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	200192a8 	.word	0x200192a8

080044ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	60fa      	str	r2, [r7, #12]
 8004502:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b80      	cmp	r3, #128	@ 0x80
 8004508:	d90a      	bls.n	8004520 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800450a:	2380      	movs	r3, #128	@ 0x80
 800450c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800450e:	e007      	b.n	8004520 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	1c53      	adds	r3, r2, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	60f9      	str	r1, [r7, #12]
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1e5a      	subs	r2, r3, #1
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <_EncodeStr+0x46>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ee      	bne.n	8004510 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	b2da      	uxtb	r2, r3
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3307      	adds	r3, #7
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800456a:	4b34      	ldr	r3, [pc, #208]	@ (800463c <_HandleIncomingPacket+0xd8>)
 800456c:	7e1b      	ldrb	r3, [r3, #24]
 800456e:	4618      	mov	r0, r3
 8004570:	1cfb      	adds	r3, r7, #3
 8004572:	2201      	movs	r2, #1
 8004574:	4619      	mov	r1, r3
 8004576:	f7ff fded 	bl	8004154 <SEGGER_RTT_ReadNoLock>
 800457a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d057      	beq.n	8004632 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	2b80      	cmp	r3, #128	@ 0x80
 8004586:	d031      	beq.n	80045ec <_HandleIncomingPacket+0x88>
 8004588:	2b80      	cmp	r3, #128	@ 0x80
 800458a:	dc40      	bgt.n	800460e <_HandleIncomingPacket+0xaa>
 800458c:	2b07      	cmp	r3, #7
 800458e:	dc15      	bgt.n	80045bc <_HandleIncomingPacket+0x58>
 8004590:	2b00      	cmp	r3, #0
 8004592:	dd3c      	ble.n	800460e <_HandleIncomingPacket+0xaa>
 8004594:	3b01      	subs	r3, #1
 8004596:	2b06      	cmp	r3, #6
 8004598:	d839      	bhi.n	800460e <_HandleIncomingPacket+0xaa>
 800459a:	a201      	add	r2, pc, #4	@ (adr r2, 80045a0 <_HandleIncomingPacket+0x3c>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045c3 	.word	0x080045c3
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045cf 	.word	0x080045cf
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045db 	.word	0x080045db
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80045be:	d033      	beq.n	8004628 <_HandleIncomingPacket+0xc4>
 80045c0:	e025      	b.n	800460e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80045c2:	f000 feeb 	bl	800539c <SEGGER_SYSVIEW_Start>
      break;
 80045c6:	e034      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80045c8:	f000 ffa4 	bl	8005514 <SEGGER_SYSVIEW_Stop>
      break;
 80045cc:	e031      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80045ce:	f001 f97d 	bl	80058cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 80045d2:	e02e      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80045d4:	f001 f942 	bl	800585c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80045d8:	e02b      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80045da:	f000 ffc1 	bl	8005560 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80045de:	e028      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80045e0:	f001 fc3e 	bl	8005e60 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80045e4:	e025      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80045e6:	f001 fc1d 	bl	8005e24 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80045ea:	e022      	b.n	8004632 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <_HandleIncomingPacket+0xd8>)
 80045ee:	7e1b      	ldrb	r3, [r3, #24]
 80045f0:	4618      	mov	r0, r3
 80045f2:	1cfb      	adds	r3, r7, #3
 80045f4:	2201      	movs	r2, #1
 80045f6:	4619      	mov	r1, r3
 80045f8:	f7ff fdac 	bl	8004154 <SEGGER_RTT_ReadNoLock>
 80045fc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d013      	beq.n	800462c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fb82 	bl	8005d10 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800460c:	e00e      	b.n	800462c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	b25b      	sxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	da0c      	bge.n	8004630 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004616:	4b09      	ldr	r3, [pc, #36]	@ (800463c <_HandleIncomingPacket+0xd8>)
 8004618:	7e1b      	ldrb	r3, [r3, #24]
 800461a:	4618      	mov	r0, r3
 800461c:	1cfb      	adds	r3, r7, #3
 800461e:	2201      	movs	r2, #1
 8004620:	4619      	mov	r1, r3
 8004622:	f7ff fd97 	bl	8004154 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004626:	e003      	b.n	8004630 <_HandleIncomingPacket+0xcc>
      break;
 8004628:	bf00      	nop
 800462a:	e002      	b.n	8004632 <_HandleIncomingPacket+0xce>
      break;
 800462c:	bf00      	nop
 800462e:	e000      	b.n	8004632 <_HandleIncomingPacket+0xce>
      break;
 8004630:	bf00      	nop
    }
  }
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2001a768 	.word	0x2001a768

08004640 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004646:	2301      	movs	r3, #1
 8004648:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	3301      	adds	r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	4b32      	ldr	r3, [pc, #200]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465a:	e00b      	b.n	8004674 <_TrySendOverflowPacket+0x34>
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004666:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	09db      	lsrs	r3, r3, #7
 8004672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2b7f      	cmp	r3, #127	@ 0x7f
 8004678:	d8f0      	bhi.n	800465c <_TrySendOverflowPacket+0x1c>
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004688:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800468a:	4b26      	ldr	r3, [pc, #152]	@ (8004724 <_TrySendOverflowPacket+0xe4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004690:	4b23      	ldr	r3, [pc, #140]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	e00b      	b.n	80046bc <_TrySendOverflowPacket+0x7c>
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80046ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	09db      	lsrs	r3, r3, #7
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b7f      	cmp	r3, #127	@ 0x7f
 80046c0:	d8f0      	bhi.n	80046a4 <_TrySendOverflowPacket+0x64>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80046d2:	4b13      	ldr	r3, [pc, #76]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	4618      	mov	r0, r3
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	f7fb fd74 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80046e8:	4603      	mov	r3, r0
 80046ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80046ec:	f7ff fb00 	bl	8003cf0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80046f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80046fc:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	3b01      	subs	r3, #1
 8004702:	b2da      	uxtb	r2, r3
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e004      	b.n	8004714 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800470a:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	3301      	adds	r3, #1
 8004710:	4a03      	ldr	r2, [pc, #12]	@ (8004720 <_TrySendOverflowPacket+0xe0>)
 8004712:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004714:	693b      	ldr	r3, [r7, #16]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3730      	adds	r7, #48	@ 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	2001a768 	.word	0x2001a768
 8004724:	e0001004 	.word	0xe0001004

08004728 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	@ 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004734:	4b96      	ldr	r3, [pc, #600]	@ (8004990 <_SendPacket+0x268>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d010      	beq.n	800475e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800473c:	4b94      	ldr	r3, [pc, #592]	@ (8004990 <_SendPacket+0x268>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8130 	beq.w	80049a6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004746:	4b92      	ldr	r3, [pc, #584]	@ (8004990 <_SendPacket+0x268>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d109      	bne.n	8004762 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800474e:	f7ff ff77 	bl	8004640 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004752:	4b8f      	ldr	r3, [pc, #572]	@ (8004990 <_SendPacket+0x268>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	f040 8127 	bne.w	80049aa <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800475c:	e001      	b.n	8004762 <_SendPacket+0x3a>
    goto Send;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <_SendPacket+0x3c>
Send:
 8004762:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b1f      	cmp	r3, #31
 8004768:	d809      	bhi.n	800477e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800476a:	4b89      	ldr	r3, [pc, #548]	@ (8004990 <_SendPacket+0x268>)
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 8118 	bne.w	80049ae <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b17      	cmp	r3, #23
 8004782:	d807      	bhi.n	8004794 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3b01      	subs	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e0c4      	b.n	800491e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	2b7f      	cmp	r3, #127	@ 0x7f
 80047a0:	d912      	bls.n	80047c8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	09da      	lsrs	r2, r3, #7
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	3a01      	subs	r2, #1
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e006      	b.n	80047d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80047da:	d807      	bhi.n	80047ec <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	e098      	b.n	800491e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047f2:	d212      	bcs.n	800481a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	09da      	lsrs	r2, r3, #7
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	3a01      	subs	r2, #1
 800480c:	60fa      	str	r2, [r7, #12]
 800480e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004812:	b2da      	uxtb	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e081      	b.n	800491e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004820:	d21d      	bcs.n	800485e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0b9a      	lsrs	r2, r3, #14
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3b01      	subs	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	09db      	lsrs	r3, r3, #7
 8004836:	b2db      	uxtb	r3, r3
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	3a01      	subs	r2, #1
 800483c:	60fa      	str	r2, [r7, #12]
 800483e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004842:	b2da      	uxtb	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	3a01      	subs	r2, #1
 8004850:	60fa      	str	r2, [r7, #12]
 8004852:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e05f      	b.n	800491e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004864:	d228      	bcs.n	80048b8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0d5a      	lsrs	r2, r3, #21
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3b01      	subs	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0b9b      	lsrs	r3, r3, #14
 800487a:	b2db      	uxtb	r3, r3
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	3a01      	subs	r2, #1
 8004880:	60fa      	str	r2, [r7, #12]
 8004882:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	b2db      	uxtb	r3, r3
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	3a01      	subs	r2, #1
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	3a01      	subs	r2, #1
 80048aa:	60fa      	str	r2, [r7, #12]
 80048ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e032      	b.n	800491e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0f1a      	lsrs	r2, r3, #28
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3b01      	subs	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0d5b      	lsrs	r3, r3, #21
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	3a01      	subs	r2, #1
 80048d2:	60fa      	str	r2, [r7, #12]
 80048d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0b9b      	lsrs	r3, r3, #14
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	3a01      	subs	r2, #1
 80048e8:	60fa      	str	r2, [r7, #12]
 80048ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	09db      	lsrs	r3, r3, #7
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	3a01      	subs	r2, #1
 80048fe:	60fa      	str	r2, [r7, #12]
 8004900:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	3a01      	subs	r2, #1
 8004912:	60fa      	str	r2, [r7, #12]
 8004914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800491e:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <_SendPacket+0x26c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004924:	4b1a      	ldr	r3, [pc, #104]	@ (8004990 <_SendPacket+0x268>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e00b      	b.n	8004950 <_SendPacket+0x228>
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	1c59      	adds	r1, r3, #1
 8004940:	6279      	str	r1, [r7, #36]	@ 0x24
 8004942:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	09db      	lsrs	r3, r3, #7
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b7f      	cmp	r3, #127	@ 0x7f
 8004954:	d8f0      	bhi.n	8004938 <_SendPacket+0x210>
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	627a      	str	r2, [r7, #36]	@ 0x24
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004966:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <_SendPacket+0x268>)
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	4618      	mov	r0, r3
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	461a      	mov	r2, r3
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	f7fb fc2b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800497a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800497c:	f7ff f9b8 	bl	8003cf0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004986:	4a02      	ldr	r2, [pc, #8]	@ (8004990 <_SendPacket+0x268>)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	60d3      	str	r3, [r2, #12]
 800498c:	e010      	b.n	80049b0 <_SendPacket+0x288>
 800498e:	bf00      	nop
 8004990:	2001a768 	.word	0x2001a768
 8004994:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004998:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <_SendPacket+0x2d8>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4b17      	ldr	r3, [pc, #92]	@ (8004a00 <_SendPacket+0x2d8>)
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e004      	b.n	80049b0 <_SendPacket+0x288>
    goto SendDone;
 80049a6:	bf00      	nop
 80049a8:	e002      	b.n	80049b0 <_SendPacket+0x288>
      goto SendDone;
 80049aa:	bf00      	nop
 80049ac:	e000      	b.n	80049b0 <_SendPacket+0x288>
      goto SendDone;
 80049ae:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80049b0:	4b13      	ldr	r3, [pc, #76]	@ (8004a00 <_SendPacket+0x2d8>)
 80049b2:	7e1b      	ldrb	r3, [r3, #24]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4a13      	ldr	r2, [pc, #76]	@ (8004a04 <_SendPacket+0x2dc>)
 80049b8:	460b      	mov	r3, r1
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	440b      	add	r3, r1
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	336c      	adds	r3, #108	@ 0x6c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a00 <_SendPacket+0x2d8>)
 80049c8:	7e1b      	ldrb	r3, [r3, #24]
 80049ca:	4618      	mov	r0, r3
 80049cc:	490d      	ldr	r1, [pc, #52]	@ (8004a04 <_SendPacket+0x2dc>)
 80049ce:	4603      	mov	r3, r0
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4403      	add	r3, r0
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	3370      	adds	r3, #112	@ 0x70
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d00b      	beq.n	80049f8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80049e0:	4b07      	ldr	r3, [pc, #28]	@ (8004a00 <_SendPacket+0x2d8>)
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d107      	bne.n	80049f8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <_SendPacket+0x2d8>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80049ee:	f7ff fdb9 	bl	8004564 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80049f2:	4b03      	ldr	r3, [pc, #12]	@ (8004a00 <_SendPacket+0x2d8>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80049f8:	bf00      	nop
 80049fa:	3728      	adds	r7, #40	@ 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2001a768 	.word	0x2001a768
 8004a04:	200192a8 	.word	0x200192a8

08004a08 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	@ 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d80a      	bhi.n	8004a38 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6051      	str	r1, [r2, #4]
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b80      	cmp	r3, #128	@ 0x80
 8004a3e:	d15a      	bne.n	8004af6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	623b      	str	r3, [r7, #32]
 8004a60:	e00b      	b.n	8004a7a <_StoreChar+0x72>
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	09db      	lsrs	r3, r3, #7
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a7e:	d8f0      	bhi.n	8004a62 <_StoreChar+0x5a>
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e00b      	b.n	8004ab2 <_StoreChar+0xaa>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	1c59      	adds	r1, r3, #1
 8004aa2:	61f9      	str	r1, [r7, #28]
 8004aa4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	09db      	lsrs	r3, r3, #7
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ab6:	d8f0      	bhi.n	8004a9a <_StoreChar+0x92>
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	61fa      	str	r2, [r7, #28]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	221a      	movs	r2, #26
 8004ace:	6939      	ldr	r1, [r7, #16]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fe29 	bl	8004728 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd36 	bl	800454c <_PreparePacket>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	611a      	str	r2, [r3, #16]
  }
}
 8004af6:	bf00      	nop
 8004af8:	3728      	adds	r7, #40	@ 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	@ 0x28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004b12:	2301      	movs	r3, #1
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004b16:	2301      	movs	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004b1a:	e007      	b.n	8004b2c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004b1c:	6a3a      	ldr	r2, [r7, #32]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	623b      	str	r3, [r7, #32]
    Width++;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d2f3      	bcs.n	8004b1c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d901      	bls.n	8004b40 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d000      	beq.n	8004b4c <_PrintUnsigned+0x4c>
 8004b4a:	e01f      	b.n	8004b8c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01c      	beq.n	8004b8c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <_PrintUnsigned+0x68>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <_PrintUnsigned+0x68>
        c = '0';
 8004b62:	2330      	movs	r3, #48	@ 0x30
 8004b64:	76fb      	strb	r3, [r7, #27]
 8004b66:	e001      	b.n	8004b6c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004b68:	2320      	movs	r3, #32
 8004b6a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b6c:	e007      	b.n	8004b7e <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	3b01      	subs	r3, #1
 8004b72:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004b74:	7efb      	ldrb	r3, [r7, #27]
 8004b76:	4619      	mov	r1, r3
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff ff45 	bl	8004a08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <_PrintUnsigned+0x8c>
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d3f0      	bcc.n	8004b6e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d903      	bls.n	8004b9a <_PrintUnsigned+0x9a>
      NumDigits--;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	e009      	b.n	8004bae <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d200      	bcs.n	8004bae <_PrintUnsigned+0xae>
        break;
 8004bac:	e005      	b.n	8004bba <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004bb8:	e7e8      	b.n	8004b8c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc8:	fb02 f303 	mul.w	r3, r2, r3
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004bd2:	4a15      	ldr	r2, [pc, #84]	@ (8004c28 <_PrintUnsigned+0x128>)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff ff13 	bl	8004a08 <_StoreChar>
    Digit /= Base;
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e3      	bne.n	8004bba <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d011      	beq.n	8004c20 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c02:	e006      	b.n	8004c12 <_PrintUnsigned+0x112>
        FieldWidth--;
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	3b01      	subs	r3, #1
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8004c0a:	2120      	movs	r1, #32
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff fefb 	bl	8004a08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <_PrintUnsigned+0x120>
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d3f1      	bcc.n	8004c04 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004c20:	bf00      	nop
 8004c22:	3728      	adds	r7, #40	@ 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08006b10 	.word	0x08006b10

08004c2c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bfb8      	it	lt
 8004c40:	425b      	neglt	r3, r3
 8004c42:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004c44:	2301      	movs	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004c48:	e007      	b.n	8004c5a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c52:	613b      	str	r3, [r7, #16]
    Width++;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	3301      	adds	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	daf3      	bge.n	8004c4a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d901      	bls.n	8004c6e <_PrintInt+0x42>
    Width = NumDigits;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <_PrintInt+0x5e>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	db04      	blt.n	8004c84 <_PrintInt+0x58>
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <_PrintInt+0x5e>
    FieldWidth--;
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <_PrintInt+0x6e>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <_PrintInt+0x9c>
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d111      	bne.n	8004cc8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00e      	beq.n	8004cc8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004caa:	e006      	b.n	8004cba <_PrintInt+0x8e>
        FieldWidth--;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004cb2:	2120      	movs	r1, #32
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff fea7 	bl	8004a08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <_PrintInt+0x9c>
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d3f1      	bcc.n	8004cac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da07      	bge.n	8004cde <_PrintInt+0xb2>
    v = -v;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	425b      	negs	r3, r3
 8004cd2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004cd4:	212d      	movs	r1, #45	@ 0x2d
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fe96 	bl	8004a08 <_StoreChar>
 8004cdc:	e008      	b.n	8004cf0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004ce8:	212b      	movs	r1, #43	@ 0x2b
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fe8c 	bl	8004a08 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d019      	beq.n	8004d2e <_PrintInt+0x102>
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d114      	bne.n	8004d2e <_PrintInt+0x102>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d111      	bne.n	8004d2e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00e      	beq.n	8004d2e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d10:	e006      	b.n	8004d20 <_PrintInt+0xf4>
        FieldWidth--;
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004d18:	2130      	movs	r1, #48	@ 0x30
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff fe74 	bl	8004a08 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <_PrintInt+0x102>
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d3f1      	bcc.n	8004d12 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fedf 	bl	8004b00 <_PrintUnsigned>
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b098      	sub	sp, #96	@ 0x60
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d58:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5c:	f04f 0120 	mov.w	r1, #32
 8004d60:	f381 8811 	msr	BASEPRI, r1
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d66:	48b7      	ldr	r0, [pc, #732]	@ (8005044 <_VPrintTarget+0x2f8>)
 8004d68:	f7ff fbf0 	bl	800454c <_PreparePacket>
 8004d6c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004d6e:	4bb5      	ldr	r3, [pc, #724]	@ (8005044 <_VPrintTarget+0x2f8>)
 8004d70:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004d92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 81a8 	beq.w	80050ec <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004da0:	2b25      	cmp	r3, #37	@ 0x25
 8004da2:	f040 8195 	bne.w	80050d0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004da6:	2300      	movs	r3, #0
 8004da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8004db6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dba:	3b23      	subs	r3, #35	@ 0x23
 8004dbc:	2b0d      	cmp	r3, #13
 8004dbe:	d83f      	bhi.n	8004e40 <_VPrintTarget+0xf4>
 8004dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc8 <_VPrintTarget+0x7c>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e41 	.word	0x08004e41
 8004dd0:	08004e41 	.word	0x08004e41
 8004dd4:	08004e41 	.word	0x08004e41
 8004dd8:	08004e41 	.word	0x08004e41
 8004ddc:	08004e41 	.word	0x08004e41
 8004de0:	08004e41 	.word	0x08004e41
 8004de4:	08004e41 	.word	0x08004e41
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e41 	.word	0x08004e41
 8004df8:	08004e41 	.word	0x08004e41
 8004dfc:	08004e11 	.word	0x08004e11
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e01a      	b.n	8004e46 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e12:	f043 0302 	orr.w	r3, r3, #2
 8004e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e012      	b.n	8004e46 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e00a      	b.n	8004e46 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e002      	b.n	8004e46 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004e40:	2300      	movs	r3, #0
 8004e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e44:	bf00      	nop
        }
      } while (v);
 8004e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1b0      	bne.n	8004dae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004e58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004e5e:	d912      	bls.n	8004e86 <_VPrintTarget+0x13a>
 8004e60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e64:	2b39      	cmp	r3, #57	@ 0x39
 8004e66:	d80e      	bhi.n	8004e86 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e7e:	4413      	add	r3, r2
 8004e80:	3b30      	subs	r3, #48	@ 0x30
 8004e82:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004e84:	e7e4      	b.n	8004e50 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004e86:	2300      	movs	r3, #0
 8004e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004e92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e98:	d11d      	bne.n	8004ed6 <_VPrintTarget+0x18a>
        sFormat++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004eac:	2b2f      	cmp	r3, #47	@ 0x2f
 8004eae:	d912      	bls.n	8004ed6 <_VPrintTarget+0x18a>
 8004eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004eb4:	2b39      	cmp	r3, #57	@ 0x39
 8004eb6:	d80e      	bhi.n	8004ed6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004ebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ece:	4413      	add	r3, r2
 8004ed0:	3b30      	subs	r3, #48	@ 0x30
 8004ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8004ed4:	e7e4      	b.n	8004ea0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004ede:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ee2:	2b6c      	cmp	r3, #108	@ 0x6c
 8004ee4:	d003      	beq.n	8004eee <_VPrintTarget+0x1a2>
 8004ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004eea:	2b68      	cmp	r3, #104	@ 0x68
 8004eec:	d107      	bne.n	8004efe <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004efc:	e7ef      	b.n	8004ede <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004efe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f02:	2b25      	cmp	r3, #37	@ 0x25
 8004f04:	f000 80d8 	beq.w	80050b8 <_VPrintTarget+0x36c>
 8004f08:	2b25      	cmp	r3, #37	@ 0x25
 8004f0a:	f2c0 80dc 	blt.w	80050c6 <_VPrintTarget+0x37a>
 8004f0e:	2b78      	cmp	r3, #120	@ 0x78
 8004f10:	f300 80d9 	bgt.w	80050c6 <_VPrintTarget+0x37a>
 8004f14:	2b58      	cmp	r3, #88	@ 0x58
 8004f16:	f2c0 80d6 	blt.w	80050c6 <_VPrintTarget+0x37a>
 8004f1a:	3b58      	subs	r3, #88	@ 0x58
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	f200 80d2 	bhi.w	80050c6 <_VPrintTarget+0x37a>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <_VPrintTarget+0x1dc>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	0800501f 	.word	0x0800501f
 8004f2c:	080050c7 	.word	0x080050c7
 8004f30:	080050c7 	.word	0x080050c7
 8004f34:	080050c7 	.word	0x080050c7
 8004f38:	080050c7 	.word	0x080050c7
 8004f3c:	080050c7 	.word	0x080050c7
 8004f40:	080050c7 	.word	0x080050c7
 8004f44:	080050c7 	.word	0x080050c7
 8004f48:	080050c7 	.word	0x080050c7
 8004f4c:	080050c7 	.word	0x080050c7
 8004f50:	080050c7 	.word	0x080050c7
 8004f54:	08004fad 	.word	0x08004fad
 8004f58:	08004fd3 	.word	0x08004fd3
 8004f5c:	080050c7 	.word	0x080050c7
 8004f60:	080050c7 	.word	0x080050c7
 8004f64:	080050c7 	.word	0x080050c7
 8004f68:	080050c7 	.word	0x080050c7
 8004f6c:	080050c7 	.word	0x080050c7
 8004f70:	080050c7 	.word	0x080050c7
 8004f74:	080050c7 	.word	0x080050c7
 8004f78:	080050c7 	.word	0x080050c7
 8004f7c:	080050c7 	.word	0x080050c7
 8004f80:	080050c7 	.word	0x080050c7
 8004f84:	080050c7 	.word	0x080050c7
 8004f88:	08005093 	.word	0x08005093
 8004f8c:	080050c7 	.word	0x080050c7
 8004f90:	080050c7 	.word	0x080050c7
 8004f94:	08005049 	.word	0x08005049
 8004f98:	080050c7 	.word	0x080050c7
 8004f9c:	08004ff9 	.word	0x08004ff9
 8004fa0:	080050c7 	.word	0x080050c7
 8004fa4:	080050c7 	.word	0x080050c7
 8004fa8:	0800501f 	.word	0x0800501f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	1d19      	adds	r1, r3, #4
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004fc0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004fc4:	f107 0310 	add.w	r3, r7, #16
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fd1c 	bl	8004a08 <_StoreChar>
        break;
 8004fd0:	e07a      	b.n	80050c8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1d19      	adds	r1, r3, #4
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6011      	str	r1, [r2, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004fe0:	f107 0010 	add.w	r0, r7, #16
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fee:	220a      	movs	r2, #10
 8004ff0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ff2:	f7ff fe1b 	bl	8004c2c <_PrintInt>
        break;
 8004ff6:	e067      	b.n	80050c8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005008:	f107 0010 	add.w	r0, r7, #16
 800500c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005016:	220a      	movs	r2, #10
 8005018:	f7ff fd72 	bl	8004b00 <_PrintUnsigned>
        break;
 800501c:	e054      	b.n	80050c8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	1d19      	adds	r1, r3, #4
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6011      	str	r1, [r2, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800502c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800502e:	f107 0010 	add.w	r0, r7, #16
 8005032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503c:	2210      	movs	r2, #16
 800503e:	f7ff fd5f 	bl	8004b00 <_PrintUnsigned>
        break;
 8005042:	e041      	b.n	80050c8 <_VPrintTarget+0x37c>
 8005044:	2001a798 	.word	0x2001a798
      case 's':
        s = va_arg(*pParamList, const char*);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	1d19      	adds	r1, r3, #4
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6011      	str	r1, [r2, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <_VPrintTarget+0x314>
          s = "(null)";
 800505c:	4b4a      	ldr	r3, [pc, #296]	@ (8005188 <_VPrintTarget+0x43c>)
 800505e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506a:	3301      	adds	r3, #1
 800506c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800506e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005076:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fcc1 	bl	8004a08 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2b7f      	cmp	r3, #127	@ 0x7f
 800508a:	d9e9      	bls.n	8005060 <_VPrintTarget+0x314>
        break;
 800508c:	e01c      	b.n	80050c8 <_VPrintTarget+0x37c>
            break;
 800508e:	bf00      	nop
        break;
 8005090:	e01a      	b.n	80050c8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	1d19      	adds	r1, r3, #4
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6011      	str	r1, [r2, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80050a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80050a2:	f107 0010 	add.w	r0, r7, #16
 80050a6:	2300      	movs	r3, #0
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	2308      	movs	r3, #8
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2308      	movs	r3, #8
 80050b0:	2210      	movs	r2, #16
 80050b2:	f7ff fd25 	bl	8004b00 <_PrintUnsigned>
        break;
 80050b6:	e007      	b.n	80050c8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	2125      	movs	r1, #37	@ 0x25
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fca2 	bl	8004a08 <_StoreChar>
        break;
 80050c4:	e000      	b.n	80050c8 <_VPrintTarget+0x37c>
      default:
        break;
 80050c6:	bf00      	nop
      }
      sFormat++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e007      	b.n	80050e0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80050d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80050d4:	f107 0310 	add.w	r3, r7, #16
 80050d8:	4611      	mov	r1, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fc94 	bl	8004a08 <_StoreChar>
    }
  } while (*sFormat);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f47f ae4d 	bne.w	8004d84 <_VPrintTarget+0x38>
 80050ea:	e000      	b.n	80050ee <_VPrintTarget+0x3a2>
      break;
 80050ec:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d041      	beq.n	8005178 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80050f4:	6a3a      	ldr	r2, [r7, #32]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005104:	e00b      	b.n	800511e <_VPrintTarget+0x3d2>
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	b2da      	uxtb	r2, r3
 800510a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005110:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511a:	09db      	lsrs	r3, r3, #7
 800511c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	2b7f      	cmp	r3, #127	@ 0x7f
 8005122:	d8f0      	bhi.n	8005106 <_VPrintTarget+0x3ba>
 8005124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800512a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005132:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	637b      	str	r3, [r7, #52]	@ 0x34
 8005138:	2300      	movs	r3, #0
 800513a:	633b      	str	r3, [r7, #48]	@ 0x30
 800513c:	e00b      	b.n	8005156 <_VPrintTarget+0x40a>
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	6379      	str	r1, [r7, #52]	@ 0x34
 8005148:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	633b      	str	r3, [r7, #48]	@ 0x30
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	2b7f      	cmp	r3, #127	@ 0x7f
 800515a:	d8f0      	bhi.n	800513e <_VPrintTarget+0x3f2>
 800515c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	637a      	str	r2, [r7, #52]	@ 0x34
 8005162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	221a      	movs	r2, #26
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fad8 	bl	8004728 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800517e:	bf00      	nop
 8005180:	3758      	adds	r7, #88	@ 0x58
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	08006abc 	.word	0x08006abc

0800518c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800519a:	2300      	movs	r3, #0
 800519c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051a0:	4917      	ldr	r1, [pc, #92]	@ (8005200 <SEGGER_SYSVIEW_Init+0x74>)
 80051a2:	4818      	ldr	r0, [pc, #96]	@ (8005204 <SEGGER_SYSVIEW_Init+0x78>)
 80051a4:	f7ff f8d2 	bl	800434c <SEGGER_RTT_AllocUpBuffer>
 80051a8:	4603      	mov	r3, r0
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80051b0:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051b2:	785a      	ldrb	r2, [r3, #1]
 80051b4:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051b6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80051b8:	4b13      	ldr	r3, [pc, #76]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ba:	7e1b      	ldrb	r3, [r3, #24]
 80051bc:	4618      	mov	r0, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2308      	movs	r3, #8
 80051c4:	4a11      	ldr	r2, [pc, #68]	@ (800520c <SEGGER_SYSVIEW_Init+0x80>)
 80051c6:	490f      	ldr	r1, [pc, #60]	@ (8005204 <SEGGER_SYSVIEW_Init+0x78>)
 80051c8:	f7ff f944 	bl	8004454 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <SEGGER_SYSVIEW_Init+0x84>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051d8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80051da:	4a0b      	ldr	r2, [pc, #44]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80051e0:	4a09      	ldr	r2, [pc, #36]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80051e6:	4a08      	ldr	r2, [pc, #32]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80051ec:	4a06      	ldr	r2, [pc, #24]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <SEGGER_SYSVIEW_Init+0x7c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20019760 	.word	0x20019760
 8005204:	08006ac4 	.word	0x08006ac4
 8005208:	2001a768 	.word	0x2001a768
 800520c:	2001a760 	.word	0x2001a760
 8005210:	e0001004 	.word	0xe0001004

08005214 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800521c:	4a04      	ldr	r2, [pc, #16]	@ (8005230 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6113      	str	r3, [r2, #16]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	2001a768 	.word	0x2001a768

08005234 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800523c:	f3ef 8311 	mrs	r3, BASEPRI
 8005240:	f04f 0120 	mov.w	r1, #32
 8005244:	f381 8811 	msr	BASEPRI, r1
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	4808      	ldr	r0, [pc, #32]	@ (800526c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800524c:	f7ff f97e 	bl	800454c <_PreparePacket>
 8005250:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f7ff fa66 	bl	8004728 <_SendPacket>
  RECORD_END();
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f383 8811 	msr	BASEPRI, r3
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	2001a798 	.word	0x2001a798

08005270 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800527a:	f3ef 8311 	mrs	r3, BASEPRI
 800527e:	f04f 0120 	mov.w	r1, #32
 8005282:	f381 8811 	msr	BASEPRI, r1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	4816      	ldr	r0, [pc, #88]	@ (80052e4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800528a:	f7ff f95f 	bl	800454c <_PreparePacket>
 800528e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e00b      	b.n	80052b6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1c59      	adds	r1, r3, #1
 80052a6:	61f9      	str	r1, [r7, #28]
 80052a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	09db      	lsrs	r3, r3, #7
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ba:	d8f0      	bhi.n	800529e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	61fa      	str	r2, [r7, #28]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	6938      	ldr	r0, [r7, #16]
 80052d2:	f7ff fa29 	bl	8004728 <_SendPacket>
  RECORD_END();
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f383 8811 	msr	BASEPRI, r3
}
 80052dc:	bf00      	nop
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	2001a798 	.word	0x2001a798

080052e8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	@ 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052f4:	f3ef 8311 	mrs	r3, BASEPRI
 80052f8:	f04f 0120 	mov.w	r1, #32
 80052fc:	f381 8811 	msr	BASEPRI, r1
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	4825      	ldr	r0, [pc, #148]	@ (8005398 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005304:	f7ff f922 	bl	800454c <_PreparePacket>
 8005308:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005316:	e00b      	b.n	8005330 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	b2da      	uxtb	r2, r3
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	1c59      	adds	r1, r3, #1
 8005320:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005322:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	09db      	lsrs	r3, r3, #7
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	2b7f      	cmp	r3, #127	@ 0x7f
 8005334:	d8f0      	bhi.n	8005318 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800533c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	e00b      	b.n	8005368 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	6279      	str	r1, [r7, #36]	@ 0x24
 800535a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	09db      	lsrs	r3, r3, #7
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b7f      	cmp	r3, #127	@ 0x7f
 800536c:	d8f0      	bhi.n	8005350 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	627a      	str	r2, [r7, #36]	@ 0x24
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	69b8      	ldr	r0, [r7, #24]
 8005384:	f7ff f9d0 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f383 8811 	msr	BASEPRI, r3
}
 800538e:	bf00      	nop
 8005390:	3730      	adds	r7, #48	@ 0x30
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	2001a798 	.word	0x2001a798

0800539c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b08c      	sub	sp, #48	@ 0x30
 80053a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80053a2:	4b59      	ldr	r3, [pc, #356]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80053a8:	f3ef 8311 	mrs	r3, BASEPRI
 80053ac:	f04f 0120 	mov.w	r1, #32
 80053b0:	f381 8811 	msr	BASEPRI, r1
 80053b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80053b6:	4b54      	ldr	r3, [pc, #336]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	220a      	movs	r2, #10
 80053bc:	4953      	ldr	r1, [pc, #332]	@ (800550c <SEGGER_SYSVIEW_Start+0x170>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fa ff06 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80053ca:	f7fe fc91 	bl	8003cf0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80053ce:	200a      	movs	r0, #10
 80053d0:	f7ff ff30 	bl	8005234 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053d4:	f3ef 8311 	mrs	r3, BASEPRI
 80053d8:	f04f 0120 	mov.w	r1, #32
 80053dc:	f381 8811 	msr	BASEPRI, r1
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	484b      	ldr	r0, [pc, #300]	@ (8005510 <SEGGER_SYSVIEW_Start+0x174>)
 80053e4:	f7ff f8b2 	bl	800454c <_PreparePacket>
 80053e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f2:	4b45      	ldr	r3, [pc, #276]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f8:	e00b      	b.n	8005412 <SEGGER_SYSVIEW_Start+0x76>
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	1c59      	adds	r1, r3, #1
 8005402:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005404:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	09db      	lsrs	r3, r3, #7
 8005410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	2b7f      	cmp	r3, #127	@ 0x7f
 8005416:	d8f0      	bhi.n	80053fa <SEGGER_SYSVIEW_Start+0x5e>
 8005418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800541e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	4b36      	ldr	r3, [pc, #216]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	e00b      	b.n	800544c <SEGGER_SYSVIEW_Start+0xb0>
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	1c59      	adds	r1, r3, #1
 800543c:	6279      	str	r1, [r7, #36]	@ 0x24
 800543e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	09db      	lsrs	r3, r3, #7
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005450:	d8f0      	bhi.n	8005434 <SEGGER_SYSVIEW_Start+0x98>
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	627a      	str	r2, [r7, #36]	@ 0x24
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e00b      	b.n	8005486 <SEGGER_SYSVIEW_Start+0xea>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	1c59      	adds	r1, r3, #1
 8005476:	61f9      	str	r1, [r7, #28]
 8005478:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	09db      	lsrs	r3, r3, #7
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b7f      	cmp	r3, #127	@ 0x7f
 800548a:	d8f0      	bhi.n	800546e <SEGGER_SYSVIEW_Start+0xd2>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	61fa      	str	r2, [r7, #28]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e00b      	b.n	80054be <SEGGER_SYSVIEW_Start+0x122>
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	6179      	str	r1, [r7, #20]
 80054b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	09db      	lsrs	r3, r3, #7
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c2:	d8f0      	bhi.n	80054a6 <SEGGER_SYSVIEW_Start+0x10a>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	617a      	str	r2, [r7, #20]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054d4:	2218      	movs	r2, #24
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff f925 	bl	8004728 <_SendPacket>
      RECORD_END();
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80054e4:	4b08      	ldr	r3, [pc, #32]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80054ec:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <SEGGER_SYSVIEW_Start+0x16c>)
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80054f2:	f000 f9eb 	bl	80058cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80054f6:	f000 f9b1 	bl	800585c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80054fa:	f000 fcb1 	bl	8005e60 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80054fe:	bf00      	nop
 8005500:	3730      	adds	r7, #48	@ 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2001a768 	.word	0x2001a768
 800550c:	08006b04 	.word	0x08006b04
 8005510:	2001a798 	.word	0x2001a798

08005514 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800551a:	f3ef 8311 	mrs	r3, BASEPRI
 800551e:	f04f 0120 	mov.w	r1, #32
 8005522:	f381 8811 	msr	BASEPRI, r1
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	480b      	ldr	r0, [pc, #44]	@ (8005558 <SEGGER_SYSVIEW_Stop+0x44>)
 800552a:	f7ff f80f 	bl	800454c <_PreparePacket>
 800552e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005530:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <SEGGER_SYSVIEW_Stop+0x48>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005538:	220b      	movs	r2, #11
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6838      	ldr	r0, [r7, #0]
 800553e:	f7ff f8f3 	bl	8004728 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005542:	4b06      	ldr	r3, [pc, #24]	@ (800555c <SEGGER_SYSVIEW_Stop+0x48>)
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f383 8811 	msr	BASEPRI, r3
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2001a798 	.word	0x2001a798
 800555c:	2001a768 	.word	0x2001a768

08005560 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	@ 0x30
 8005564:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005566:	f3ef 8311 	mrs	r3, BASEPRI
 800556a:	f04f 0120 	mov.w	r1, #32
 800556e:	f381 8811 	msr	BASEPRI, r1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	4845      	ldr	r0, [pc, #276]	@ (800568c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005576:	f7fe ffe9 	bl	800454c <_PreparePacket>
 800557a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005584:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800558a:	e00b      	b.n	80055a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	b2da      	uxtb	r2, r3
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005596:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	09db      	lsrs	r3, r3, #7
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055a8:	d8f0      	bhi.n	800558c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80055aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055be:	4b34      	ldr	r3, [pc, #208]	@ (8005690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	623b      	str	r3, [r7, #32]
 80055c4:	e00b      	b.n	80055de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	6279      	str	r1, [r7, #36]	@ 0x24
 80055d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	09db      	lsrs	r3, r3, #7
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e2:	d8f0      	bhi.n	80055c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	e00b      	b.n	8005618 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	1c59      	adds	r1, r3, #1
 8005608:	61f9      	str	r1, [r7, #28]
 800560a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	09db      	lsrs	r3, r3, #7
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b7f      	cmp	r3, #127	@ 0x7f
 800561c:	d8f0      	bhi.n	8005600 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	61fa      	str	r2, [r7, #28]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e00b      	b.n	8005650 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	6179      	str	r1, [r7, #20]
 8005642:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	09db      	lsrs	r3, r3, #7
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b7f      	cmp	r3, #127	@ 0x7f
 8005654:	d8f0      	bhi.n	8005638 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	617a      	str	r2, [r7, #20]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005666:	2218      	movs	r2, #24
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	68b8      	ldr	r0, [r7, #8]
 800566c:	f7ff f85c 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800567e:	4b04      	ldr	r3, [pc, #16]	@ (8005690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	4798      	blx	r3
  }
}
 8005684:	bf00      	nop
 8005686:	3730      	adds	r7, #48	@ 0x30
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	2001a798 	.word	0x2001a798
 8005690:	2001a768 	.word	0x2001a768

08005694 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b092      	sub	sp, #72	@ 0x48
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800569c:	f3ef 8311 	mrs	r3, BASEPRI
 80056a0:	f04f 0120 	mov.w	r1, #32
 80056a4:	f381 8811 	msr	BASEPRI, r1
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	486a      	ldr	r0, [pc, #424]	@ (8005854 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80056ac:	f7fe ff4e 	bl	800454c <_PreparePacket>
 80056b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b66      	ldr	r3, [pc, #408]	@ (8005858 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056c6:	e00b      	b.n	80056e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80056c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	6479      	str	r1, [r7, #68]	@ 0x44
 80056d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056dc:	09db      	lsrs	r3, r3, #7
 80056de:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e4:	d8f0      	bhi.n	80056c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80056e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80056ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005700:	e00b      	b.n	800571a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	b2da      	uxtb	r2, r3
 8005706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800570c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	2b7f      	cmp	r3, #127	@ 0x7f
 800571e:	d8f0      	bhi.n	8005702 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	4619      	mov	r1, r3
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7fe fed7 	bl	80044ec <_EncodeStr>
 800573e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005740:	2209      	movs	r2, #9
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f7fe ffef 	bl	8004728 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b40      	ldr	r3, [pc, #256]	@ (8005858 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	633b      	str	r3, [r7, #48]	@ 0x30
 800575e:	e00b      	b.n	8005778 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	6379      	str	r1, [r7, #52]	@ 0x34
 800576a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	09db      	lsrs	r3, r3, #7
 8005776:	633b      	str	r3, [r7, #48]	@ 0x30
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	2b7f      	cmp	r3, #127	@ 0x7f
 800577c:	d8f0      	bhi.n	8005760 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	637a      	str	r2, [r7, #52]	@ 0x34
 8005784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005798:	e00b      	b.n	80057b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b6:	d8f0      	bhi.n	800579a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	e00b      	b.n	80057ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80057de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	09db      	lsrs	r3, r3, #7
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80057f0:	d8f0      	bhi.n	80057d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	e00b      	b.n	8005826 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	1c59      	adds	r1, r3, #1
 8005816:	61f9      	str	r1, [r7, #28]
 8005818:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	09db      	lsrs	r3, r3, #7
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b7f      	cmp	r3, #127	@ 0x7f
 800582a:	d8f0      	bhi.n	800580e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	61fa      	str	r2, [r7, #28]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800583c:	2215      	movs	r2, #21
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f7fe ff71 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f383 8811 	msr	BASEPRI, r3
}
 800584c:	bf00      	nop
 800584e:	3748      	adds	r7, #72	@ 0x48
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2001a798 	.word	0x2001a798
 8005858:	2001a768 	.word	0x2001a768

0800585c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005860:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005872:	4b03      	ldr	r3, [pc, #12]	@ (8005880 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4798      	blx	r3
  }
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	2001a768 	.word	0x2001a768

08005884 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800588c:	f3ef 8311 	mrs	r3, BASEPRI
 8005890:	f04f 0120 	mov.w	r1, #32
 8005894:	f381 8811 	msr	BASEPRI, r1
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	480b      	ldr	r0, [pc, #44]	@ (80058c8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800589c:	f7fe fe56 	bl	800454c <_PreparePacket>
 80058a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058a2:	2280      	movs	r2, #128	@ 0x80
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	6938      	ldr	r0, [r7, #16]
 80058a8:	f7fe fe20 	bl	80044ec <_EncodeStr>
 80058ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80058ae:	220e      	movs	r2, #14
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	6938      	ldr	r0, [r7, #16]
 80058b4:	f7fe ff38 	bl	8004728 <_SendPacket>
  RECORD_END();
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f383 8811 	msr	BASEPRI, r3
}
 80058be:	bf00      	nop
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2001a798 	.word	0x2001a798

080058cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80058cc:	b590      	push	{r4, r7, lr}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80058d2:	4b15      	ldr	r3, [pc, #84]	@ (8005928 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01a      	beq.n	8005910 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80058da:	4b13      	ldr	r3, [pc, #76]	@ (8005928 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80058e4:	4b10      	ldr	r3, [pc, #64]	@ (8005928 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4798      	blx	r3
 80058ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80058f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80058f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	000a      	movs	r2, r1
 8005900:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005902:	4613      	mov	r3, r2
 8005904:	461a      	mov	r2, r3
 8005906:	4621      	mov	r1, r4
 8005908:	200d      	movs	r0, #13
 800590a:	f7ff fced 	bl	80052e8 <SEGGER_SYSVIEW_RecordU32x2>
 800590e:	e006      	b.n	800591e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005910:	4b06      	ldr	r3, [pc, #24]	@ (800592c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4619      	mov	r1, r3
 8005916:	200c      	movs	r0, #12
 8005918:	f7ff fcaa 	bl	8005270 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bd90      	pop	{r4, r7, pc}
 8005926:	bf00      	nop
 8005928:	2001a768 	.word	0x2001a768
 800592c:	e0001004 	.word	0xe0001004

08005930 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	f04f 0120 	mov.w	r1, #32
 800593e:	f381 8811 	msr	BASEPRI, r1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	4819      	ldr	r0, [pc, #100]	@ (80059ac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005946:	f7fe fe01 	bl	800454c <_PreparePacket>
 800594a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005950:	4b17      	ldr	r3, [pc, #92]	@ (80059b0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005958:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e00b      	b.n	800597c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	6179      	str	r1, [r7, #20]
 800596e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	09db      	lsrs	r3, r3, #7
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005980:	d8f0      	bhi.n	8005964 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	617a      	str	r2, [r7, #20]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005992:	2202      	movs	r2, #2
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	68b8      	ldr	r0, [r7, #8]
 8005998:	f7fe fec6 	bl	8004728 <_SendPacket>
  RECORD_END();
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f383 8811 	msr	BASEPRI, r3
}
 80059a2:	bf00      	nop
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	2001a798 	.word	0x2001a798
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059ba:	f3ef 8311 	mrs	r3, BASEPRI
 80059be:	f04f 0120 	mov.w	r1, #32
 80059c2:	f381 8811 	msr	BASEPRI, r1
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	4807      	ldr	r0, [pc, #28]	@ (80059e8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80059ca:	f7fe fdbf 	bl	800454c <_PreparePacket>
 80059ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80059d0:	2203      	movs	r2, #3
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f7fe fea7 	bl	8004728 <_SendPacket>
  RECORD_END();
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f383 8811 	msr	BASEPRI, r3
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2001a798 	.word	0x2001a798

080059ec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059f2:	f3ef 8311 	mrs	r3, BASEPRI
 80059f6:	f04f 0120 	mov.w	r1, #32
 80059fa:	f381 8811 	msr	BASEPRI, r1
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	4807      	ldr	r0, [pc, #28]	@ (8005a20 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005a02:	f7fe fda3 	bl	800454c <_PreparePacket>
 8005a06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005a08:	2212      	movs	r2, #18
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6838      	ldr	r0, [r7, #0]
 8005a0e:	f7fe fe8b 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f383 8811 	msr	BASEPRI, r3
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	2001a798 	.word	0x2001a798

08005a24 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a30:	f04f 0120 	mov.w	r1, #32
 8005a34:	f381 8811 	msr	BASEPRI, r1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	4817      	ldr	r0, [pc, #92]	@ (8005a98 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005a3c:	f7fe fd86 	bl	800454c <_PreparePacket>
 8005a40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e00b      	b.n	8005a68 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	1c59      	adds	r1, r3, #1
 8005a58:	61f9      	str	r1, [r7, #28]
 8005a5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	09db      	lsrs	r3, r3, #7
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a6c:	d8f0      	bhi.n	8005a50 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	61fa      	str	r2, [r7, #28]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005a7e:	221c      	movs	r2, #28
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	6938      	ldr	r0, [r7, #16]
 8005a84:	f7fe fe50 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
}
 8005a8e:	bf00      	nop
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2001a798 	.word	0x2001a798

08005a9c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aaa:	f04f 0120 	mov.w	r1, #32
 8005aae:	f381 8811 	msr	BASEPRI, r1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	4824      	ldr	r0, [pc, #144]	@ (8005b48 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005ab6:	f7fe fd49 	bl	800454c <_PreparePacket>
 8005aba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	e00b      	b.n	8005ae2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	1c59      	adds	r1, r3, #1
 8005ad2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ad4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	09db      	lsrs	r3, r3, #7
 8005ae0:	623b      	str	r3, [r7, #32]
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ae6:	d8f0      	bhi.n	8005aca <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	627a      	str	r2, [r7, #36]	@ 0x24
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e00b      	b.n	8005b1a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	1c59      	adds	r1, r3, #1
 8005b0a:	61f9      	str	r1, [r7, #28]
 8005b0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	09db      	lsrs	r3, r3, #7
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b1e:	d8f0      	bhi.n	8005b02 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	61fa      	str	r2, [r7, #28]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005b30:	221c      	movs	r2, #28
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	6938      	ldr	r0, [r7, #16]
 8005b36:	f7fe fdf7 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f383 8811 	msr	BASEPRI, r3
}
 8005b40:	bf00      	nop
 8005b42:	3728      	adds	r7, #40	@ 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	2001a798 	.word	0x2001a798

08005b4c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b52:	f3ef 8311 	mrs	r3, BASEPRI
 8005b56:	f04f 0120 	mov.w	r1, #32
 8005b5a:	f381 8811 	msr	BASEPRI, r1
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	4807      	ldr	r0, [pc, #28]	@ (8005b80 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005b62:	f7fe fcf3 	bl	800454c <_PreparePacket>
 8005b66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005b68:	2211      	movs	r2, #17
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	f7fe fddb 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f383 8811 	msr	BASEPRI, r3
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	2001a798 	.word	0x2001a798

08005b84 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b90:	f04f 0120 	mov.w	r1, #32
 8005b94:	f381 8811 	msr	BASEPRI, r1
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	4819      	ldr	r0, [pc, #100]	@ (8005c00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005b9c:	f7fe fcd6 	bl	800454c <_PreparePacket>
 8005ba0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ba6:	4b17      	ldr	r3, [pc, #92]	@ (8005c04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e00b      	b.n	8005bd2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	61f9      	str	r1, [r7, #28]
 8005bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	61fa      	str	r2, [r7, #28]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005be8:	2208      	movs	r2, #8
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	6938      	ldr	r0, [r7, #16]
 8005bee:	f7fe fd9b 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f383 8811 	msr	BASEPRI, r3
}
 8005bf8:	bf00      	nop
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	2001a798 	.word	0x2001a798
 8005c04:	2001a768 	.word	0x2001a768

08005c08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c10:	f3ef 8311 	mrs	r3, BASEPRI
 8005c14:	f04f 0120 	mov.w	r1, #32
 8005c18:	f381 8811 	msr	BASEPRI, r1
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	4819      	ldr	r0, [pc, #100]	@ (8005c84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005c20:	f7fe fc94 	bl	800454c <_PreparePacket>
 8005c24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c2a:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	e00b      	b.n	8005c56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	1c59      	adds	r1, r3, #1
 8005c46:	61f9      	str	r1, [r7, #28]
 8005c48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c5a:	d8f0      	bhi.n	8005c3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	61fa      	str	r2, [r7, #28]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	6938      	ldr	r0, [r7, #16]
 8005c72:	f7fe fd59 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f383 8811 	msr	BASEPRI, r3
}
 8005c7c:	bf00      	nop
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	2001a798 	.word	0x2001a798
 8005c88:	2001a768 	.word	0x2001a768

08005c8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c94:	f3ef 8311 	mrs	r3, BASEPRI
 8005c98:	f04f 0120 	mov.w	r1, #32
 8005c9c:	f381 8811 	msr	BASEPRI, r1
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	4819      	ldr	r0, [pc, #100]	@ (8005d08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ca4:	f7fe fc52 	bl	800454c <_PreparePacket>
 8005ca8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005cae:	4b17      	ldr	r3, [pc, #92]	@ (8005d0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e00b      	b.n	8005cda <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	61f9      	str	r1, [r7, #28]
 8005ccc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	09db      	lsrs	r3, r3, #7
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cde:	d8f0      	bhi.n	8005cc2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	61fa      	str	r2, [r7, #28]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005cf0:	2206      	movs	r2, #6
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	6938      	ldr	r0, [r7, #16]
 8005cf6:	f7fe fd17 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f383 8811 	msr	BASEPRI, r3
}
 8005d00:	bf00      	nop
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	2001a798 	.word	0x2001a798
 8005d0c:	2001a768 	.word	0x2001a768

08005d10 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08c      	sub	sp, #48	@ 0x30
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005d1a:	4b40      	ldr	r3, [pc, #256]	@ (8005e1c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d077      	beq.n	8005e12 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005d22:	4b3e      	ldr	r3, [pc, #248]	@ (8005e1c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005d28:	2300      	movs	r3, #0
 8005d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d2c:	e008      	b.n	8005d40 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d3f2      	bcc.n	8005d2e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005d48:	e000      	b.n	8005d4c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005d4a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d055      	beq.n	8005dfe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d52:	f3ef 8311 	mrs	r3, BASEPRI
 8005d56:	f04f 0120 	mov.w	r1, #32
 8005d5a:	f381 8811 	msr	BASEPRI, r1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	482f      	ldr	r0, [pc, #188]	@ (8005e20 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005d62:	f7fe fbf3 	bl	800454c <_PreparePacket>
 8005d66:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	623b      	str	r3, [r7, #32]
 8005d74:	e00b      	b.n	8005d8e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	1c59      	adds	r1, r3, #1
 8005d7e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	09db      	lsrs	r3, r3, #7
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d92:	d8f0      	bhi.n	8005d76 <SEGGER_SYSVIEW_SendModule+0x66>
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e00b      	b.n	8005dc8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	1c59      	adds	r1, r3, #1
 8005db8:	61f9      	str	r1, [r7, #28]
 8005dba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	09db      	lsrs	r3, r3, #7
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dcc:	d8f0      	bhi.n	8005db0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	61fa      	str	r2, [r7, #28]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2280      	movs	r2, #128	@ 0x80
 8005de4:	4619      	mov	r1, r3
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7fe fb80 	bl	80044ec <_EncodeStr>
 8005dec:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005dee:	2216      	movs	r2, #22
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	6938      	ldr	r0, [r7, #16]
 8005df4:	f7fe fc98 	bl	8004728 <_SendPacket>
      RECORD_END();
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <SEGGER_SYSVIEW_SendModule+0x102>
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4798      	blx	r3
    }
  }
}
 8005e12:	bf00      	nop
 8005e14:	3730      	adds	r7, #48	@ 0x30
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	2001a790 	.word	0x2001a790
 8005e20:	2001a798 	.word	0x2001a798

08005e24 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005e32:	4b0a      	ldr	r3, [pc, #40]	@ (8005e5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f2      	bne.n	8005e38 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2001a790 	.word	0x2001a790

08005e60 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005e66:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6a:	f04f 0120 	mov.w	r1, #32
 8005e6e:	f381 8811 	msr	BASEPRI, r1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	4817      	ldr	r0, [pc, #92]	@ (8005ed4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005e76:	f7fe fb69 	bl	800454c <_PreparePacket>
 8005e7a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	4b14      	ldr	r3, [pc, #80]	@ (8005ed8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	e00b      	b.n	8005ea4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	6179      	str	r1, [r7, #20]
 8005e96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	09db      	lsrs	r3, r3, #7
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ea8:	d8f0      	bhi.n	8005e8c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	617a      	str	r2, [r7, #20]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005eba:	221b      	movs	r2, #27
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f7fe fc32 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f383 8811 	msr	BASEPRI, r3
}
 8005eca:	bf00      	nop
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2001a798 	.word	0x2001a798
 8005ed8:	2001a794 	.word	0x2001a794

08005edc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005edc:	b40f      	push	{r0, r1, r2, r3}
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	461a      	mov	r2, r3
 8005eee:	2100      	movs	r1, #0
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f7fe ff2b 	bl	8004d4c <_VPrintTarget>
  va_end(ParamList);
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f00:	b004      	add	sp, #16
 8005f02:	4770      	bx	lr

08005f04 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	@ 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f10:	f04f 0120 	mov.w	r1, #32
 8005f14:	f381 8811 	msr	BASEPRI, r1
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	4827      	ldr	r0, [pc, #156]	@ (8005fb8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005f1c:	f7fe fb16 	bl	800454c <_PreparePacket>
 8005f20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f22:	2280      	movs	r2, #128	@ 0x80
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	6938      	ldr	r0, [r7, #16]
 8005f28:	f7fe fae0 	bl	80044ec <_EncodeStr>
 8005f2c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f32:	2301      	movs	r3, #1
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	e00b      	b.n	8005f50 <SEGGER_SYSVIEW_Warn+0x4c>
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	09db      	lsrs	r3, r3, #7
 8005f4e:	623b      	str	r3, [r7, #32]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f54:	d8f0      	bhi.n	8005f38 <SEGGER_SYSVIEW_Warn+0x34>
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e00b      	b.n	8005f88 <SEGGER_SYSVIEW_Warn+0x84>
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	1c59      	adds	r1, r3, #1
 8005f78:	61f9      	str	r1, [r7, #28]
 8005f7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	09db      	lsrs	r3, r3, #7
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f8c:	d8f0      	bhi.n	8005f70 <SEGGER_SYSVIEW_Warn+0x6c>
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	61fa      	str	r2, [r7, #28]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f9e:	221a      	movs	r2, #26
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	6938      	ldr	r0, [r7, #16]
 8005fa4:	f7fe fbc0 	bl	8004728 <_SendPacket>
  RECORD_END();
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f383 8811 	msr	BASEPRI, r3
}
 8005fae:	bf00      	nop
 8005fb0:	3728      	adds	r7, #40	@ 0x28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	2001a798 	.word	0x2001a798

08005fbc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fc0:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fc2:	7e1b      	ldrb	r3, [r3, #24]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4a13      	ldr	r2, [pc, #76]	@ (8006014 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005fc8:	460b      	mov	r3, r1
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	440b      	add	r3, r1
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	336c      	adds	r3, #108	@ 0x6c
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8006010 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005fd8:	7e1b      	ldrb	r3, [r3, #24]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	490d      	ldr	r1, [pc, #52]	@ (8006014 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005fde:	4603      	mov	r3, r0
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4403      	add	r3, r0
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3370      	adds	r3, #112	@ 0x70
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d00b      	beq.n	8006008 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ff8:	4b05      	ldr	r3, [pc, #20]	@ (8006010 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ffe:	f7fe fab1 	bl	8004564 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006002:	4b03      	ldr	r3, [pc, #12]	@ (8006010 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006004:	2200      	movs	r2, #0
 8006006:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006008:	4b01      	ldr	r3, [pc, #4]	@ (8006010 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800600a:	781b      	ldrb	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	2001a768 	.word	0x2001a768
 8006014:	200192a8 	.word	0x200192a8

08006018 <sniprintf>:
 8006018:	b40c      	push	{r2, r3}
 800601a:	b530      	push	{r4, r5, lr}
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <sniprintf+0x64>)
 800601e:	1e0c      	subs	r4, r1, #0
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	b09d      	sub	sp, #116	@ 0x74
 8006024:	da08      	bge.n	8006038 <sniprintf+0x20>
 8006026:	238b      	movs	r3, #139	@ 0x8b
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	f04f 30ff 	mov.w	r0, #4294967295
 800602e:	b01d      	add	sp, #116	@ 0x74
 8006030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006034:	b002      	add	sp, #8
 8006036:	4770      	bx	lr
 8006038:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800603c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006040:	bf14      	ite	ne
 8006042:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006046:	4623      	moveq	r3, r4
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	9307      	str	r3, [sp, #28]
 800604c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006050:	9002      	str	r0, [sp, #8]
 8006052:	9006      	str	r0, [sp, #24]
 8006054:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006058:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800605a:	ab21      	add	r3, sp, #132	@ 0x84
 800605c:	a902      	add	r1, sp, #8
 800605e:	4628      	mov	r0, r5
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	f000 f9ad 	bl	80063c0 <_svfiprintf_r>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	bfbc      	itt	lt
 800606a:	238b      	movlt	r3, #139	@ 0x8b
 800606c:	602b      	strlt	r3, [r5, #0]
 800606e:	2c00      	cmp	r4, #0
 8006070:	d0dd      	beq.n	800602e <sniprintf+0x16>
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	e7d9      	b.n	800602e <sniprintf+0x16>
 800607a:	bf00      	nop
 800607c:	2000001c 	.word	0x2000001c

08006080 <memcmp>:
 8006080:	b510      	push	{r4, lr}
 8006082:	3901      	subs	r1, #1
 8006084:	4402      	add	r2, r0
 8006086:	4290      	cmp	r0, r2
 8006088:	d101      	bne.n	800608e <memcmp+0xe>
 800608a:	2000      	movs	r0, #0
 800608c:	e005      	b.n	800609a <memcmp+0x1a>
 800608e:	7803      	ldrb	r3, [r0, #0]
 8006090:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006094:	42a3      	cmp	r3, r4
 8006096:	d001      	beq.n	800609c <memcmp+0x1c>
 8006098:	1b18      	subs	r0, r3, r4
 800609a:	bd10      	pop	{r4, pc}
 800609c:	3001      	adds	r0, #1
 800609e:	e7f2      	b.n	8006086 <memcmp+0x6>

080060a0 <memset>:
 80060a0:	4402      	add	r2, r0
 80060a2:	4603      	mov	r3, r0
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d100      	bne.n	80060aa <memset+0xa>
 80060a8:	4770      	bx	lr
 80060aa:	f803 1b01 	strb.w	r1, [r3], #1
 80060ae:	e7f9      	b.n	80060a4 <memset+0x4>

080060b0 <__libc_init_array>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4d0d      	ldr	r5, [pc, #52]	@ (80060e8 <__libc_init_array+0x38>)
 80060b4:	4c0d      	ldr	r4, [pc, #52]	@ (80060ec <__libc_init_array+0x3c>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	2600      	movs	r6, #0
 80060bc:	42a6      	cmp	r6, r4
 80060be:	d109      	bne.n	80060d4 <__libc_init_array+0x24>
 80060c0:	4d0b      	ldr	r5, [pc, #44]	@ (80060f0 <__libc_init_array+0x40>)
 80060c2:	4c0c      	ldr	r4, [pc, #48]	@ (80060f4 <__libc_init_array+0x44>)
 80060c4:	f000 fc74 	bl	80069b0 <_init>
 80060c8:	1b64      	subs	r4, r4, r5
 80060ca:	10a4      	asrs	r4, r4, #2
 80060cc:	2600      	movs	r6, #0
 80060ce:	42a6      	cmp	r6, r4
 80060d0:	d105      	bne.n	80060de <__libc_init_array+0x2e>
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d8:	4798      	blx	r3
 80060da:	3601      	adds	r6, #1
 80060dc:	e7ee      	b.n	80060bc <__libc_init_array+0xc>
 80060de:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e2:	4798      	blx	r3
 80060e4:	3601      	adds	r6, #1
 80060e6:	e7f2      	b.n	80060ce <__libc_init_array+0x1e>
 80060e8:	08006b5c 	.word	0x08006b5c
 80060ec:	08006b5c 	.word	0x08006b5c
 80060f0:	08006b5c 	.word	0x08006b5c
 80060f4:	08006b60 	.word	0x08006b60

080060f8 <__retarget_lock_acquire_recursive>:
 80060f8:	4770      	bx	lr

080060fa <__retarget_lock_release_recursive>:
 80060fa:	4770      	bx	lr

080060fc <memcpy>:
 80060fc:	440a      	add	r2, r1
 80060fe:	4291      	cmp	r1, r2
 8006100:	f100 33ff 	add.w	r3, r0, #4294967295
 8006104:	d100      	bne.n	8006108 <memcpy+0xc>
 8006106:	4770      	bx	lr
 8006108:	b510      	push	{r4, lr}
 800610a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800610e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006112:	4291      	cmp	r1, r2
 8006114:	d1f9      	bne.n	800610a <memcpy+0xe>
 8006116:	bd10      	pop	{r4, pc}

08006118 <_free_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	2900      	cmp	r1, #0
 800611e:	d041      	beq.n	80061a4 <_free_r+0x8c>
 8006120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006124:	1f0c      	subs	r4, r1, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfb8      	it	lt
 800612a:	18e4      	addlt	r4, r4, r3
 800612c:	f000 f8e0 	bl	80062f0 <__malloc_lock>
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <_free_r+0x90>)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	b933      	cbnz	r3, 8006144 <_free_r+0x2c>
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	6014      	str	r4, [r2, #0]
 800613a:	4628      	mov	r0, r5
 800613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006140:	f000 b8dc 	b.w	80062fc <__malloc_unlock>
 8006144:	42a3      	cmp	r3, r4
 8006146:	d908      	bls.n	800615a <_free_r+0x42>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	1821      	adds	r1, r4, r0
 800614c:	428b      	cmp	r3, r1
 800614e:	bf01      	itttt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	1809      	addeq	r1, r1, r0
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	e7ed      	b.n	8006136 <_free_r+0x1e>
 800615a:	461a      	mov	r2, r3
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b10b      	cbz	r3, 8006164 <_free_r+0x4c>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x42>
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	1850      	adds	r0, r2, r1
 8006168:	42a0      	cmp	r0, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x6c>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	4401      	add	r1, r0
 8006170:	1850      	adds	r0, r2, r1
 8006172:	4283      	cmp	r3, r0
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	d1e0      	bne.n	800613a <_free_r+0x22>
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	4408      	add	r0, r1
 8006180:	6010      	str	r0, [r2, #0]
 8006182:	e7da      	b.n	800613a <_free_r+0x22>
 8006184:	d902      	bls.n	800618c <_free_r+0x74>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d6      	b.n	800613a <_free_r+0x22>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428b      	cmp	r3, r1
 8006192:	bf04      	itt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	bf04      	itt	eq
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	6054      	str	r4, [r2, #4]
 80061a2:	e7ca      	b.n	800613a <_free_r+0x22>
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	2001a9c0 	.word	0x2001a9c0

080061ac <sbrk_aligned>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	4e0f      	ldr	r6, [pc, #60]	@ (80061ec <sbrk_aligned+0x40>)
 80061b0:	460c      	mov	r4, r1
 80061b2:	6831      	ldr	r1, [r6, #0]
 80061b4:	4605      	mov	r5, r0
 80061b6:	b911      	cbnz	r1, 80061be <sbrk_aligned+0x12>
 80061b8:	f000 fba6 	bl	8006908 <_sbrk_r>
 80061bc:	6030      	str	r0, [r6, #0]
 80061be:	4621      	mov	r1, r4
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fba1 	bl	8006908 <_sbrk_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d103      	bne.n	80061d2 <sbrk_aligned+0x26>
 80061ca:	f04f 34ff 	mov.w	r4, #4294967295
 80061ce:	4620      	mov	r0, r4
 80061d0:	bd70      	pop	{r4, r5, r6, pc}
 80061d2:	1cc4      	adds	r4, r0, #3
 80061d4:	f024 0403 	bic.w	r4, r4, #3
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d0f8      	beq.n	80061ce <sbrk_aligned+0x22>
 80061dc:	1a21      	subs	r1, r4, r0
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fb92 	bl	8006908 <_sbrk_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d1f2      	bne.n	80061ce <sbrk_aligned+0x22>
 80061e8:	e7ef      	b.n	80061ca <sbrk_aligned+0x1e>
 80061ea:	bf00      	nop
 80061ec:	2001a9bc 	.word	0x2001a9bc

080061f0 <_malloc_r>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	1ccd      	adds	r5, r1, #3
 80061f6:	f025 0503 	bic.w	r5, r5, #3
 80061fa:	3508      	adds	r5, #8
 80061fc:	2d0c      	cmp	r5, #12
 80061fe:	bf38      	it	cc
 8006200:	250c      	movcc	r5, #12
 8006202:	2d00      	cmp	r5, #0
 8006204:	4606      	mov	r6, r0
 8006206:	db01      	blt.n	800620c <_malloc_r+0x1c>
 8006208:	42a9      	cmp	r1, r5
 800620a:	d904      	bls.n	8006216 <_malloc_r+0x26>
 800620c:	230c      	movs	r3, #12
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	2000      	movs	r0, #0
 8006212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062ec <_malloc_r+0xfc>
 800621a:	f000 f869 	bl	80062f0 <__malloc_lock>
 800621e:	f8d8 3000 	ldr.w	r3, [r8]
 8006222:	461c      	mov	r4, r3
 8006224:	bb44      	cbnz	r4, 8006278 <_malloc_r+0x88>
 8006226:	4629      	mov	r1, r5
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff ffbf 	bl	80061ac <sbrk_aligned>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	4604      	mov	r4, r0
 8006232:	d158      	bne.n	80062e6 <_malloc_r+0xf6>
 8006234:	f8d8 4000 	ldr.w	r4, [r8]
 8006238:	4627      	mov	r7, r4
 800623a:	2f00      	cmp	r7, #0
 800623c:	d143      	bne.n	80062c6 <_malloc_r+0xd6>
 800623e:	2c00      	cmp	r4, #0
 8006240:	d04b      	beq.n	80062da <_malloc_r+0xea>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	4639      	mov	r1, r7
 8006246:	4630      	mov	r0, r6
 8006248:	eb04 0903 	add.w	r9, r4, r3
 800624c:	f000 fb5c 	bl	8006908 <_sbrk_r>
 8006250:	4581      	cmp	r9, r0
 8006252:	d142      	bne.n	80062da <_malloc_r+0xea>
 8006254:	6821      	ldr	r1, [r4, #0]
 8006256:	1a6d      	subs	r5, r5, r1
 8006258:	4629      	mov	r1, r5
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ffa6 	bl	80061ac <sbrk_aligned>
 8006260:	3001      	adds	r0, #1
 8006262:	d03a      	beq.n	80062da <_malloc_r+0xea>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	442b      	add	r3, r5
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	f8d8 3000 	ldr.w	r3, [r8]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	bb62      	cbnz	r2, 80062cc <_malloc_r+0xdc>
 8006272:	f8c8 7000 	str.w	r7, [r8]
 8006276:	e00f      	b.n	8006298 <_malloc_r+0xa8>
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	1b52      	subs	r2, r2, r5
 800627c:	d420      	bmi.n	80062c0 <_malloc_r+0xd0>
 800627e:	2a0b      	cmp	r2, #11
 8006280:	d917      	bls.n	80062b2 <_malloc_r+0xc2>
 8006282:	1961      	adds	r1, r4, r5
 8006284:	42a3      	cmp	r3, r4
 8006286:	6025      	str	r5, [r4, #0]
 8006288:	bf18      	it	ne
 800628a:	6059      	strne	r1, [r3, #4]
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	bf08      	it	eq
 8006290:	f8c8 1000 	streq.w	r1, [r8]
 8006294:	5162      	str	r2, [r4, r5]
 8006296:	604b      	str	r3, [r1, #4]
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f82f 	bl	80062fc <__malloc_unlock>
 800629e:	f104 000b 	add.w	r0, r4, #11
 80062a2:	1d23      	adds	r3, r4, #4
 80062a4:	f020 0007 	bic.w	r0, r0, #7
 80062a8:	1ac2      	subs	r2, r0, r3
 80062aa:	bf1c      	itt	ne
 80062ac:	1a1b      	subne	r3, r3, r0
 80062ae:	50a3      	strne	r3, [r4, r2]
 80062b0:	e7af      	b.n	8006212 <_malloc_r+0x22>
 80062b2:	6862      	ldr	r2, [r4, #4]
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	bf0c      	ite	eq
 80062b8:	f8c8 2000 	streq.w	r2, [r8]
 80062bc:	605a      	strne	r2, [r3, #4]
 80062be:	e7eb      	b.n	8006298 <_malloc_r+0xa8>
 80062c0:	4623      	mov	r3, r4
 80062c2:	6864      	ldr	r4, [r4, #4]
 80062c4:	e7ae      	b.n	8006224 <_malloc_r+0x34>
 80062c6:	463c      	mov	r4, r7
 80062c8:	687f      	ldr	r7, [r7, #4]
 80062ca:	e7b6      	b.n	800623a <_malloc_r+0x4a>
 80062cc:	461a      	mov	r2, r3
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d1fb      	bne.n	80062cc <_malloc_r+0xdc>
 80062d4:	2300      	movs	r3, #0
 80062d6:	6053      	str	r3, [r2, #4]
 80062d8:	e7de      	b.n	8006298 <_malloc_r+0xa8>
 80062da:	230c      	movs	r3, #12
 80062dc:	6033      	str	r3, [r6, #0]
 80062de:	4630      	mov	r0, r6
 80062e0:	f000 f80c 	bl	80062fc <__malloc_unlock>
 80062e4:	e794      	b.n	8006210 <_malloc_r+0x20>
 80062e6:	6005      	str	r5, [r0, #0]
 80062e8:	e7d6      	b.n	8006298 <_malloc_r+0xa8>
 80062ea:	bf00      	nop
 80062ec:	2001a9c0 	.word	0x2001a9c0

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	@ (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7ff bf01 	b.w	80060f8 <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	2001a9b8 	.word	0x2001a9b8

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	@ (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7ff befc 	b.w	80060fa <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	2001a9b8 	.word	0x2001a9b8

08006308 <__ssputs_r>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	688e      	ldr	r6, [r1, #8]
 800630e:	461f      	mov	r7, r3
 8006310:	42be      	cmp	r6, r7
 8006312:	680b      	ldr	r3, [r1, #0]
 8006314:	4682      	mov	sl, r0
 8006316:	460c      	mov	r4, r1
 8006318:	4690      	mov	r8, r2
 800631a:	d82d      	bhi.n	8006378 <__ssputs_r+0x70>
 800631c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006320:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006324:	d026      	beq.n	8006374 <__ssputs_r+0x6c>
 8006326:	6965      	ldr	r5, [r4, #20]
 8006328:	6909      	ldr	r1, [r1, #16]
 800632a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800632e:	eba3 0901 	sub.w	r9, r3, r1
 8006332:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006336:	1c7b      	adds	r3, r7, #1
 8006338:	444b      	add	r3, r9
 800633a:	106d      	asrs	r5, r5, #1
 800633c:	429d      	cmp	r5, r3
 800633e:	bf38      	it	cc
 8006340:	461d      	movcc	r5, r3
 8006342:	0553      	lsls	r3, r2, #21
 8006344:	d527      	bpl.n	8006396 <__ssputs_r+0x8e>
 8006346:	4629      	mov	r1, r5
 8006348:	f7ff ff52 	bl	80061f0 <_malloc_r>
 800634c:	4606      	mov	r6, r0
 800634e:	b360      	cbz	r0, 80063aa <__ssputs_r+0xa2>
 8006350:	6921      	ldr	r1, [r4, #16]
 8006352:	464a      	mov	r2, r9
 8006354:	f7ff fed2 	bl	80060fc <memcpy>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800635e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	6126      	str	r6, [r4, #16]
 8006366:	6165      	str	r5, [r4, #20]
 8006368:	444e      	add	r6, r9
 800636a:	eba5 0509 	sub.w	r5, r5, r9
 800636e:	6026      	str	r6, [r4, #0]
 8006370:	60a5      	str	r5, [r4, #8]
 8006372:	463e      	mov	r6, r7
 8006374:	42be      	cmp	r6, r7
 8006376:	d900      	bls.n	800637a <__ssputs_r+0x72>
 8006378:	463e      	mov	r6, r7
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	4632      	mov	r2, r6
 800637e:	4641      	mov	r1, r8
 8006380:	f000 faa8 	bl	80068d4 <memmove>
 8006384:	68a3      	ldr	r3, [r4, #8]
 8006386:	1b9b      	subs	r3, r3, r6
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4433      	add	r3, r6
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	2000      	movs	r0, #0
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	462a      	mov	r2, r5
 8006398:	f000 fac6 	bl	8006928 <_realloc_r>
 800639c:	4606      	mov	r6, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1e0      	bne.n	8006364 <__ssputs_r+0x5c>
 80063a2:	6921      	ldr	r1, [r4, #16]
 80063a4:	4650      	mov	r0, sl
 80063a6:	f7ff feb7 	bl	8006118 <_free_r>
 80063aa:	230c      	movs	r3, #12
 80063ac:	f8ca 3000 	str.w	r3, [sl]
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	e7e9      	b.n	8006392 <__ssputs_r+0x8a>
	...

080063c0 <_svfiprintf_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	4698      	mov	r8, r3
 80063c6:	898b      	ldrh	r3, [r1, #12]
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	b09d      	sub	sp, #116	@ 0x74
 80063cc:	4607      	mov	r7, r0
 80063ce:	460d      	mov	r5, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	d510      	bpl.n	80063f6 <_svfiprintf_r+0x36>
 80063d4:	690b      	ldr	r3, [r1, #16]
 80063d6:	b973      	cbnz	r3, 80063f6 <_svfiprintf_r+0x36>
 80063d8:	2140      	movs	r1, #64	@ 0x40
 80063da:	f7ff ff09 	bl	80061f0 <_malloc_r>
 80063de:	6028      	str	r0, [r5, #0]
 80063e0:	6128      	str	r0, [r5, #16]
 80063e2:	b930      	cbnz	r0, 80063f2 <_svfiprintf_r+0x32>
 80063e4:	230c      	movs	r3, #12
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b01d      	add	sp, #116	@ 0x74
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	2340      	movs	r3, #64	@ 0x40
 80063f4:	616b      	str	r3, [r5, #20]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fa:	2320      	movs	r3, #32
 80063fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006400:	f8cd 800c 	str.w	r8, [sp, #12]
 8006404:	2330      	movs	r3, #48	@ 0x30
 8006406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80065a4 <_svfiprintf_r+0x1e4>
 800640a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800640e:	f04f 0901 	mov.w	r9, #1
 8006412:	4623      	mov	r3, r4
 8006414:	469a      	mov	sl, r3
 8006416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800641a:	b10a      	cbz	r2, 8006420 <_svfiprintf_r+0x60>
 800641c:	2a25      	cmp	r2, #37	@ 0x25
 800641e:	d1f9      	bne.n	8006414 <_svfiprintf_r+0x54>
 8006420:	ebba 0b04 	subs.w	fp, sl, r4
 8006424:	d00b      	beq.n	800643e <_svfiprintf_r+0x7e>
 8006426:	465b      	mov	r3, fp
 8006428:	4622      	mov	r2, r4
 800642a:	4629      	mov	r1, r5
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff ff6b 	bl	8006308 <__ssputs_r>
 8006432:	3001      	adds	r0, #1
 8006434:	f000 80a7 	beq.w	8006586 <_svfiprintf_r+0x1c6>
 8006438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800643a:	445a      	add	r2, fp
 800643c:	9209      	str	r2, [sp, #36]	@ 0x24
 800643e:	f89a 3000 	ldrb.w	r3, [sl]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 809f 	beq.w	8006586 <_svfiprintf_r+0x1c6>
 8006448:	2300      	movs	r3, #0
 800644a:	f04f 32ff 	mov.w	r2, #4294967295
 800644e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006452:	f10a 0a01 	add.w	sl, sl, #1
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	9307      	str	r3, [sp, #28]
 800645a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800645e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006460:	4654      	mov	r4, sl
 8006462:	2205      	movs	r2, #5
 8006464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006468:	484e      	ldr	r0, [pc, #312]	@ (80065a4 <_svfiprintf_r+0x1e4>)
 800646a:	f7f9 ff01 	bl	8000270 <memchr>
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	b9d8      	cbnz	r0, 80064aa <_svfiprintf_r+0xea>
 8006472:	06d0      	lsls	r0, r2, #27
 8006474:	bf44      	itt	mi
 8006476:	2320      	movmi	r3, #32
 8006478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800647c:	0711      	lsls	r1, r2, #28
 800647e:	bf44      	itt	mi
 8006480:	232b      	movmi	r3, #43	@ 0x2b
 8006482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006486:	f89a 3000 	ldrb.w	r3, [sl]
 800648a:	2b2a      	cmp	r3, #42	@ 0x2a
 800648c:	d015      	beq.n	80064ba <_svfiprintf_r+0xfa>
 800648e:	9a07      	ldr	r2, [sp, #28]
 8006490:	4654      	mov	r4, sl
 8006492:	2000      	movs	r0, #0
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4621      	mov	r1, r4
 800649a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649e:	3b30      	subs	r3, #48	@ 0x30
 80064a0:	2b09      	cmp	r3, #9
 80064a2:	d94b      	bls.n	800653c <_svfiprintf_r+0x17c>
 80064a4:	b1b0      	cbz	r0, 80064d4 <_svfiprintf_r+0x114>
 80064a6:	9207      	str	r2, [sp, #28]
 80064a8:	e014      	b.n	80064d4 <_svfiprintf_r+0x114>
 80064aa:	eba0 0308 	sub.w	r3, r0, r8
 80064ae:	fa09 f303 	lsl.w	r3, r9, r3
 80064b2:	4313      	orrs	r3, r2
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	46a2      	mov	sl, r4
 80064b8:	e7d2      	b.n	8006460 <_svfiprintf_r+0xa0>
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	1d19      	adds	r1, r3, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	9103      	str	r1, [sp, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfbb      	ittet	lt
 80064c6:	425b      	neglt	r3, r3
 80064c8:	f042 0202 	orrlt.w	r2, r2, #2
 80064cc:	9307      	strge	r3, [sp, #28]
 80064ce:	9307      	strlt	r3, [sp, #28]
 80064d0:	bfb8      	it	lt
 80064d2:	9204      	strlt	r2, [sp, #16]
 80064d4:	7823      	ldrb	r3, [r4, #0]
 80064d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d8:	d10a      	bne.n	80064f0 <_svfiprintf_r+0x130>
 80064da:	7863      	ldrb	r3, [r4, #1]
 80064dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80064de:	d132      	bne.n	8006546 <_svfiprintf_r+0x186>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	9203      	str	r2, [sp, #12]
 80064e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064ec:	3402      	adds	r4, #2
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80065b4 <_svfiprintf_r+0x1f4>
 80064f4:	7821      	ldrb	r1, [r4, #0]
 80064f6:	2203      	movs	r2, #3
 80064f8:	4650      	mov	r0, sl
 80064fa:	f7f9 feb9 	bl	8000270 <memchr>
 80064fe:	b138      	cbz	r0, 8006510 <_svfiprintf_r+0x150>
 8006500:	9b04      	ldr	r3, [sp, #16]
 8006502:	eba0 000a 	sub.w	r0, r0, sl
 8006506:	2240      	movs	r2, #64	@ 0x40
 8006508:	4082      	lsls	r2, r0
 800650a:	4313      	orrs	r3, r2
 800650c:	3401      	adds	r4, #1
 800650e:	9304      	str	r3, [sp, #16]
 8006510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006514:	4824      	ldr	r0, [pc, #144]	@ (80065a8 <_svfiprintf_r+0x1e8>)
 8006516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800651a:	2206      	movs	r2, #6
 800651c:	f7f9 fea8 	bl	8000270 <memchr>
 8006520:	2800      	cmp	r0, #0
 8006522:	d036      	beq.n	8006592 <_svfiprintf_r+0x1d2>
 8006524:	4b21      	ldr	r3, [pc, #132]	@ (80065ac <_svfiprintf_r+0x1ec>)
 8006526:	bb1b      	cbnz	r3, 8006570 <_svfiprintf_r+0x1b0>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	3307      	adds	r3, #7
 800652c:	f023 0307 	bic.w	r3, r3, #7
 8006530:	3308      	adds	r3, #8
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006536:	4433      	add	r3, r6
 8006538:	9309      	str	r3, [sp, #36]	@ 0x24
 800653a:	e76a      	b.n	8006412 <_svfiprintf_r+0x52>
 800653c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006540:	460c      	mov	r4, r1
 8006542:	2001      	movs	r0, #1
 8006544:	e7a8      	b.n	8006498 <_svfiprintf_r+0xd8>
 8006546:	2300      	movs	r3, #0
 8006548:	3401      	adds	r4, #1
 800654a:	9305      	str	r3, [sp, #20]
 800654c:	4619      	mov	r1, r3
 800654e:	f04f 0c0a 	mov.w	ip, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006558:	3a30      	subs	r2, #48	@ 0x30
 800655a:	2a09      	cmp	r2, #9
 800655c:	d903      	bls.n	8006566 <_svfiprintf_r+0x1a6>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0c6      	beq.n	80064f0 <_svfiprintf_r+0x130>
 8006562:	9105      	str	r1, [sp, #20]
 8006564:	e7c4      	b.n	80064f0 <_svfiprintf_r+0x130>
 8006566:	fb0c 2101 	mla	r1, ip, r1, r2
 800656a:	4604      	mov	r4, r0
 800656c:	2301      	movs	r3, #1
 800656e:	e7f0      	b.n	8006552 <_svfiprintf_r+0x192>
 8006570:	ab03      	add	r3, sp, #12
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	462a      	mov	r2, r5
 8006576:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <_svfiprintf_r+0x1f0>)
 8006578:	a904      	add	r1, sp, #16
 800657a:	4638      	mov	r0, r7
 800657c:	f3af 8000 	nop.w
 8006580:	1c42      	adds	r2, r0, #1
 8006582:	4606      	mov	r6, r0
 8006584:	d1d6      	bne.n	8006534 <_svfiprintf_r+0x174>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	065b      	lsls	r3, r3, #25
 800658a:	f53f af2d 	bmi.w	80063e8 <_svfiprintf_r+0x28>
 800658e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006590:	e72c      	b.n	80063ec <_svfiprintf_r+0x2c>
 8006592:	ab03      	add	r3, sp, #12
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	462a      	mov	r2, r5
 8006598:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <_svfiprintf_r+0x1f0>)
 800659a:	a904      	add	r1, sp, #16
 800659c:	4638      	mov	r0, r7
 800659e:	f000 f879 	bl	8006694 <_printf_i>
 80065a2:	e7ed      	b.n	8006580 <_svfiprintf_r+0x1c0>
 80065a4:	08006b20 	.word	0x08006b20
 80065a8:	08006b2a 	.word	0x08006b2a
 80065ac:	00000000 	.word	0x00000000
 80065b0:	08006309 	.word	0x08006309
 80065b4:	08006b26 	.word	0x08006b26

080065b8 <_printf_common>:
 80065b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	4616      	mov	r6, r2
 80065be:	4698      	mov	r8, r3
 80065c0:	688a      	ldr	r2, [r1, #8]
 80065c2:	690b      	ldr	r3, [r1, #16]
 80065c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	bfb8      	it	lt
 80065cc:	4613      	movlt	r3, r2
 80065ce:	6033      	str	r3, [r6, #0]
 80065d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065d4:	4607      	mov	r7, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	b10a      	cbz	r2, 80065de <_printf_common+0x26>
 80065da:	3301      	adds	r3, #1
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	0699      	lsls	r1, r3, #26
 80065e2:	bf42      	ittt	mi
 80065e4:	6833      	ldrmi	r3, [r6, #0]
 80065e6:	3302      	addmi	r3, #2
 80065e8:	6033      	strmi	r3, [r6, #0]
 80065ea:	6825      	ldr	r5, [r4, #0]
 80065ec:	f015 0506 	ands.w	r5, r5, #6
 80065f0:	d106      	bne.n	8006600 <_printf_common+0x48>
 80065f2:	f104 0a19 	add.w	sl, r4, #25
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	6832      	ldr	r2, [r6, #0]
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dc26      	bgt.n	800664e <_printf_common+0x96>
 8006600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	3b00      	subs	r3, #0
 8006608:	bf18      	it	ne
 800660a:	2301      	movne	r3, #1
 800660c:	0692      	lsls	r2, r2, #26
 800660e:	d42b      	bmi.n	8006668 <_printf_common+0xb0>
 8006610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006614:	4641      	mov	r1, r8
 8006616:	4638      	mov	r0, r7
 8006618:	47c8      	blx	r9
 800661a:	3001      	adds	r0, #1
 800661c:	d01e      	beq.n	800665c <_printf_common+0xa4>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	6922      	ldr	r2, [r4, #16]
 8006622:	f003 0306 	and.w	r3, r3, #6
 8006626:	2b04      	cmp	r3, #4
 8006628:	bf02      	ittt	eq
 800662a:	68e5      	ldreq	r5, [r4, #12]
 800662c:	6833      	ldreq	r3, [r6, #0]
 800662e:	1aed      	subeq	r5, r5, r3
 8006630:	68a3      	ldr	r3, [r4, #8]
 8006632:	bf0c      	ite	eq
 8006634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006638:	2500      	movne	r5, #0
 800663a:	4293      	cmp	r3, r2
 800663c:	bfc4      	itt	gt
 800663e:	1a9b      	subgt	r3, r3, r2
 8006640:	18ed      	addgt	r5, r5, r3
 8006642:	2600      	movs	r6, #0
 8006644:	341a      	adds	r4, #26
 8006646:	42b5      	cmp	r5, r6
 8006648:	d11a      	bne.n	8006680 <_printf_common+0xc8>
 800664a:	2000      	movs	r0, #0
 800664c:	e008      	b.n	8006660 <_printf_common+0xa8>
 800664e:	2301      	movs	r3, #1
 8006650:	4652      	mov	r2, sl
 8006652:	4641      	mov	r1, r8
 8006654:	4638      	mov	r0, r7
 8006656:	47c8      	blx	r9
 8006658:	3001      	adds	r0, #1
 800665a:	d103      	bne.n	8006664 <_printf_common+0xac>
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	3501      	adds	r5, #1
 8006666:	e7c6      	b.n	80065f6 <_printf_common+0x3e>
 8006668:	18e1      	adds	r1, r4, r3
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	2030      	movs	r0, #48	@ 0x30
 800666e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006672:	4422      	add	r2, r4
 8006674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800667c:	3302      	adds	r3, #2
 800667e:	e7c7      	b.n	8006610 <_printf_common+0x58>
 8006680:	2301      	movs	r3, #1
 8006682:	4622      	mov	r2, r4
 8006684:	4641      	mov	r1, r8
 8006686:	4638      	mov	r0, r7
 8006688:	47c8      	blx	r9
 800668a:	3001      	adds	r0, #1
 800668c:	d0e6      	beq.n	800665c <_printf_common+0xa4>
 800668e:	3601      	adds	r6, #1
 8006690:	e7d9      	b.n	8006646 <_printf_common+0x8e>
	...

08006694 <_printf_i>:
 8006694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	7e0f      	ldrb	r7, [r1, #24]
 800669a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800669c:	2f78      	cmp	r7, #120	@ 0x78
 800669e:	4691      	mov	r9, r2
 80066a0:	4680      	mov	r8, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	469a      	mov	sl, r3
 80066a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066aa:	d807      	bhi.n	80066bc <_printf_i+0x28>
 80066ac:	2f62      	cmp	r7, #98	@ 0x62
 80066ae:	d80a      	bhi.n	80066c6 <_printf_i+0x32>
 80066b0:	2f00      	cmp	r7, #0
 80066b2:	f000 80d2 	beq.w	800685a <_printf_i+0x1c6>
 80066b6:	2f58      	cmp	r7, #88	@ 0x58
 80066b8:	f000 80b9 	beq.w	800682e <_printf_i+0x19a>
 80066bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066c4:	e03a      	b.n	800673c <_printf_i+0xa8>
 80066c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ca:	2b15      	cmp	r3, #21
 80066cc:	d8f6      	bhi.n	80066bc <_printf_i+0x28>
 80066ce:	a101      	add	r1, pc, #4	@ (adr r1, 80066d4 <_printf_i+0x40>)
 80066d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d4:	0800672d 	.word	0x0800672d
 80066d8:	08006741 	.word	0x08006741
 80066dc:	080066bd 	.word	0x080066bd
 80066e0:	080066bd 	.word	0x080066bd
 80066e4:	080066bd 	.word	0x080066bd
 80066e8:	080066bd 	.word	0x080066bd
 80066ec:	08006741 	.word	0x08006741
 80066f0:	080066bd 	.word	0x080066bd
 80066f4:	080066bd 	.word	0x080066bd
 80066f8:	080066bd 	.word	0x080066bd
 80066fc:	080066bd 	.word	0x080066bd
 8006700:	08006841 	.word	0x08006841
 8006704:	0800676b 	.word	0x0800676b
 8006708:	080067fb 	.word	0x080067fb
 800670c:	080066bd 	.word	0x080066bd
 8006710:	080066bd 	.word	0x080066bd
 8006714:	08006863 	.word	0x08006863
 8006718:	080066bd 	.word	0x080066bd
 800671c:	0800676b 	.word	0x0800676b
 8006720:	080066bd 	.word	0x080066bd
 8006724:	080066bd 	.word	0x080066bd
 8006728:	08006803 	.word	0x08006803
 800672c:	6833      	ldr	r3, [r6, #0]
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6032      	str	r2, [r6, #0]
 8006734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800673c:	2301      	movs	r3, #1
 800673e:	e09d      	b.n	800687c <_printf_i+0x1e8>
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1d19      	adds	r1, r3, #4
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	0606      	lsls	r6, r0, #24
 800674a:	d501      	bpl.n	8006750 <_printf_i+0xbc>
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	e003      	b.n	8006758 <_printf_i+0xc4>
 8006750:	0645      	lsls	r5, r0, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0xb8>
 8006754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006758:	2d00      	cmp	r5, #0
 800675a:	da03      	bge.n	8006764 <_printf_i+0xd0>
 800675c:	232d      	movs	r3, #45	@ 0x2d
 800675e:	426d      	negs	r5, r5
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006764:	4859      	ldr	r0, [pc, #356]	@ (80068cc <_printf_i+0x238>)
 8006766:	230a      	movs	r3, #10
 8006768:	e011      	b.n	800678e <_printf_i+0xfa>
 800676a:	6821      	ldr	r1, [r4, #0]
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	0608      	lsls	r0, r1, #24
 8006770:	f853 5b04 	ldr.w	r5, [r3], #4
 8006774:	d402      	bmi.n	800677c <_printf_i+0xe8>
 8006776:	0649      	lsls	r1, r1, #25
 8006778:	bf48      	it	mi
 800677a:	b2ad      	uxthmi	r5, r5
 800677c:	2f6f      	cmp	r7, #111	@ 0x6f
 800677e:	4853      	ldr	r0, [pc, #332]	@ (80068cc <_printf_i+0x238>)
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	bf14      	ite	ne
 8006784:	230a      	movne	r3, #10
 8006786:	2308      	moveq	r3, #8
 8006788:	2100      	movs	r1, #0
 800678a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800678e:	6866      	ldr	r6, [r4, #4]
 8006790:	60a6      	str	r6, [r4, #8]
 8006792:	2e00      	cmp	r6, #0
 8006794:	bfa2      	ittt	ge
 8006796:	6821      	ldrge	r1, [r4, #0]
 8006798:	f021 0104 	bicge.w	r1, r1, #4
 800679c:	6021      	strge	r1, [r4, #0]
 800679e:	b90d      	cbnz	r5, 80067a4 <_printf_i+0x110>
 80067a0:	2e00      	cmp	r6, #0
 80067a2:	d04b      	beq.n	800683c <_printf_i+0x1a8>
 80067a4:	4616      	mov	r6, r2
 80067a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80067aa:	fb03 5711 	mls	r7, r3, r1, r5
 80067ae:	5dc7      	ldrb	r7, [r0, r7]
 80067b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b4:	462f      	mov	r7, r5
 80067b6:	42bb      	cmp	r3, r7
 80067b8:	460d      	mov	r5, r1
 80067ba:	d9f4      	bls.n	80067a6 <_printf_i+0x112>
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d10b      	bne.n	80067d8 <_printf_i+0x144>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	07df      	lsls	r7, r3, #31
 80067c4:	d508      	bpl.n	80067d8 <_printf_i+0x144>
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	4299      	cmp	r1, r3
 80067cc:	bfde      	ittt	le
 80067ce:	2330      	movle	r3, #48	@ 0x30
 80067d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067d8:	1b92      	subs	r2, r2, r6
 80067da:	6122      	str	r2, [r4, #16]
 80067dc:	f8cd a000 	str.w	sl, [sp]
 80067e0:	464b      	mov	r3, r9
 80067e2:	aa03      	add	r2, sp, #12
 80067e4:	4621      	mov	r1, r4
 80067e6:	4640      	mov	r0, r8
 80067e8:	f7ff fee6 	bl	80065b8 <_printf_common>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d14a      	bne.n	8006886 <_printf_i+0x1f2>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b004      	add	sp, #16
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	4833      	ldr	r0, [pc, #204]	@ (80068d0 <_printf_i+0x23c>)
 8006804:	2778      	movs	r7, #120	@ 0x78
 8006806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6831      	ldr	r1, [r6, #0]
 800680e:	061f      	lsls	r7, r3, #24
 8006810:	f851 5b04 	ldr.w	r5, [r1], #4
 8006814:	d402      	bmi.n	800681c <_printf_i+0x188>
 8006816:	065f      	lsls	r7, r3, #25
 8006818:	bf48      	it	mi
 800681a:	b2ad      	uxthmi	r5, r5
 800681c:	6031      	str	r1, [r6, #0]
 800681e:	07d9      	lsls	r1, r3, #31
 8006820:	bf44      	itt	mi
 8006822:	f043 0320 	orrmi.w	r3, r3, #32
 8006826:	6023      	strmi	r3, [r4, #0]
 8006828:	b11d      	cbz	r5, 8006832 <_printf_i+0x19e>
 800682a:	2310      	movs	r3, #16
 800682c:	e7ac      	b.n	8006788 <_printf_i+0xf4>
 800682e:	4827      	ldr	r0, [pc, #156]	@ (80068cc <_printf_i+0x238>)
 8006830:	e7e9      	b.n	8006806 <_printf_i+0x172>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	f023 0320 	bic.w	r3, r3, #32
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	e7f6      	b.n	800682a <_printf_i+0x196>
 800683c:	4616      	mov	r6, r2
 800683e:	e7bd      	b.n	80067bc <_printf_i+0x128>
 8006840:	6833      	ldr	r3, [r6, #0]
 8006842:	6825      	ldr	r5, [r4, #0]
 8006844:	6961      	ldr	r1, [r4, #20]
 8006846:	1d18      	adds	r0, r3, #4
 8006848:	6030      	str	r0, [r6, #0]
 800684a:	062e      	lsls	r6, r5, #24
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	d501      	bpl.n	8006854 <_printf_i+0x1c0>
 8006850:	6019      	str	r1, [r3, #0]
 8006852:	e002      	b.n	800685a <_printf_i+0x1c6>
 8006854:	0668      	lsls	r0, r5, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0x1bc>
 8006858:	8019      	strh	r1, [r3, #0]
 800685a:	2300      	movs	r3, #0
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	4616      	mov	r6, r2
 8006860:	e7bc      	b.n	80067dc <_printf_i+0x148>
 8006862:	6833      	ldr	r3, [r6, #0]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	6032      	str	r2, [r6, #0]
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	2100      	movs	r1, #0
 800686e:	4630      	mov	r0, r6
 8006870:	f7f9 fcfe 	bl	8000270 <memchr>
 8006874:	b108      	cbz	r0, 800687a <_printf_i+0x1e6>
 8006876:	1b80      	subs	r0, r0, r6
 8006878:	6060      	str	r0, [r4, #4]
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	2300      	movs	r3, #0
 8006880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006884:	e7aa      	b.n	80067dc <_printf_i+0x148>
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d0ad      	beq.n	80067f0 <_printf_i+0x15c>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	079b      	lsls	r3, r3, #30
 8006898:	d413      	bmi.n	80068c2 <_printf_i+0x22e>
 800689a:	68e0      	ldr	r0, [r4, #12]
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	4298      	cmp	r0, r3
 80068a0:	bfb8      	it	lt
 80068a2:	4618      	movlt	r0, r3
 80068a4:	e7a6      	b.n	80067f4 <_printf_i+0x160>
 80068a6:	2301      	movs	r3, #1
 80068a8:	4632      	mov	r2, r6
 80068aa:	4649      	mov	r1, r9
 80068ac:	4640      	mov	r0, r8
 80068ae:	47d0      	blx	sl
 80068b0:	3001      	adds	r0, #1
 80068b2:	d09d      	beq.n	80067f0 <_printf_i+0x15c>
 80068b4:	3501      	adds	r5, #1
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	9903      	ldr	r1, [sp, #12]
 80068ba:	1a5b      	subs	r3, r3, r1
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dcf2      	bgt.n	80068a6 <_printf_i+0x212>
 80068c0:	e7eb      	b.n	800689a <_printf_i+0x206>
 80068c2:	2500      	movs	r5, #0
 80068c4:	f104 0619 	add.w	r6, r4, #25
 80068c8:	e7f5      	b.n	80068b6 <_printf_i+0x222>
 80068ca:	bf00      	nop
 80068cc:	08006b31 	.word	0x08006b31
 80068d0:	08006b42 	.word	0x08006b42

080068d4 <memmove>:
 80068d4:	4288      	cmp	r0, r1
 80068d6:	b510      	push	{r4, lr}
 80068d8:	eb01 0402 	add.w	r4, r1, r2
 80068dc:	d902      	bls.n	80068e4 <memmove+0x10>
 80068de:	4284      	cmp	r4, r0
 80068e0:	4623      	mov	r3, r4
 80068e2:	d807      	bhi.n	80068f4 <memmove+0x20>
 80068e4:	1e43      	subs	r3, r0, #1
 80068e6:	42a1      	cmp	r1, r4
 80068e8:	d008      	beq.n	80068fc <memmove+0x28>
 80068ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068f2:	e7f8      	b.n	80068e6 <memmove+0x12>
 80068f4:	4402      	add	r2, r0
 80068f6:	4601      	mov	r1, r0
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d100      	bne.n	80068fe <memmove+0x2a>
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006906:	e7f7      	b.n	80068f8 <memmove+0x24>

08006908 <_sbrk_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d06      	ldr	r5, [pc, #24]	@ (8006924 <_sbrk_r+0x1c>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f000 f83e 	bl	8006994 <_sbrk>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_sbrk_r+0x1a>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_sbrk_r+0x1a>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	2001a9b4 	.word	0x2001a9b4

08006928 <_realloc_r>:
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	4680      	mov	r8, r0
 800692e:	4615      	mov	r5, r2
 8006930:	460c      	mov	r4, r1
 8006932:	b921      	cbnz	r1, 800693e <_realloc_r+0x16>
 8006934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	4611      	mov	r1, r2
 800693a:	f7ff bc59 	b.w	80061f0 <_malloc_r>
 800693e:	b92a      	cbnz	r2, 800694c <_realloc_r+0x24>
 8006940:	f7ff fbea 	bl	8006118 <_free_r>
 8006944:	2400      	movs	r4, #0
 8006946:	4620      	mov	r0, r4
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	f000 f81a 	bl	8006984 <_malloc_usable_size_r>
 8006950:	4285      	cmp	r5, r0
 8006952:	4606      	mov	r6, r0
 8006954:	d802      	bhi.n	800695c <_realloc_r+0x34>
 8006956:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800695a:	d8f4      	bhi.n	8006946 <_realloc_r+0x1e>
 800695c:	4629      	mov	r1, r5
 800695e:	4640      	mov	r0, r8
 8006960:	f7ff fc46 	bl	80061f0 <_malloc_r>
 8006964:	4607      	mov	r7, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0ec      	beq.n	8006944 <_realloc_r+0x1c>
 800696a:	42b5      	cmp	r5, r6
 800696c:	462a      	mov	r2, r5
 800696e:	4621      	mov	r1, r4
 8006970:	bf28      	it	cs
 8006972:	4632      	movcs	r2, r6
 8006974:	f7ff fbc2 	bl	80060fc <memcpy>
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fbcc 	bl	8006118 <_free_r>
 8006980:	463c      	mov	r4, r7
 8006982:	e7e0      	b.n	8006946 <_realloc_r+0x1e>

08006984 <_malloc_usable_size_r>:
 8006984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006988:	1f18      	subs	r0, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbc      	itt	lt
 800698e:	580b      	ldrlt	r3, [r1, r0]
 8006990:	18c0      	addlt	r0, r0, r3
 8006992:	4770      	bx	lr

08006994 <_sbrk>:
 8006994:	4a04      	ldr	r2, [pc, #16]	@ (80069a8 <_sbrk+0x14>)
 8006996:	6811      	ldr	r1, [r2, #0]
 8006998:	4603      	mov	r3, r0
 800699a:	b909      	cbnz	r1, 80069a0 <_sbrk+0xc>
 800699c:	4903      	ldr	r1, [pc, #12]	@ (80069ac <_sbrk+0x18>)
 800699e:	6011      	str	r1, [r2, #0]
 80069a0:	6810      	ldr	r0, [r2, #0]
 80069a2:	4403      	add	r3, r0
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4770      	bx	lr
 80069a8:	2001a9c4 	.word	0x2001a9c4
 80069ac:	2001a9c8 	.word	0x2001a9c8

080069b0 <_init>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr

080069bc <_fini>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr

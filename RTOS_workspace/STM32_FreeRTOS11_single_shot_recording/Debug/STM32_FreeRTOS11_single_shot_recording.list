
STM32_FreeRTOS11_single_shot_recording.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f24  08005f24  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f2c  08005f2c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005f34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          0001a960  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001a9d0  2001a9d0  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001337d  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e58  00000000  00000000  0001a41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  0001d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e51  00000000  00000000  0001e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257dc  00000000  00000000  0001f379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f55  00000000  00000000  00044b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea221  00000000  00000000  0005aaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144ccb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005364  00000000  00000000  00144d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b4  00000000  00000000  0014a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dcc 	.word	0x08005dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005dcc 	.word	0x08005dcc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192ac 	.word	0x200192ac

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb9d 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f853 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8bb 	bl	80006dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <main+0x98>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <main+0x98>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000572:	f003 f953 	bl	800381c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000576:	f004 f95b 	bl	8004830 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <main+0x9c>)
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	491a      	ldr	r1, [pc, #104]	@ (80005f4 <main+0xa0>)
 800058a:	481b      	ldr	r0, [pc, #108]	@ (80005f8 <main+0xa4>)
 800058c:	f001 fe52 	bl	8002234 <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <main+0xa8>)
 80005ba:	22c8      	movs	r2, #200	@ 0xc8
 80005bc:	4910      	ldr	r1, [pc, #64]	@ (8000600 <main+0xac>)
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <main+0xb0>)
 80005c0:	f001 fe38 	bl	8002234 <xTaskCreate>
 80005c4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00b      	beq.n	80005e4 <main+0x90>
    __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	60fb      	str	r3, [r7, #12]
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005e4:	f001 ffcc 	bl	8002580 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>
 80005ec:	e0001000 	.word	0xe0001000
 80005f0:	08005de4 	.word	0x08005de4
 80005f4:	08005dfc 	.word	0x08005dfc
 80005f8:	08000999 	.word	0x08000999
 80005fc:	08005e04 	.word	0x08005e04
 8000600:	08005e1c 	.word	0x08005e1c
 8000604:	080009a9 	.word	0x080009a9

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 f920 	bl	800585c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800067c:	2332      	movs	r3, #50	@ 0x32
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000680:	2304      	movs	r3, #4
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fddd 	bl	800124c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f9a0 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f83e 	bl	800173c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f989 	bl	80009dc <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	4ba2      	ldr	r3, [pc, #648]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4aa1      	ldr	r2, [pc, #644]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b9f      	ldr	r3, [pc, #636]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b9b      	ldr	r3, [pc, #620]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a9a      	ldr	r2, [pc, #616]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b98      	ldr	r3, [pc, #608]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b94      	ldr	r3, [pc, #592]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a93      	ldr	r2, [pc, #588]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b91      	ldr	r3, [pc, #580]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b8d      	ldr	r3, [pc, #564]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a8c      	ldr	r2, [pc, #560]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b8a      	ldr	r3, [pc, #552]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b86      	ldr	r3, [pc, #536]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a85      	ldr	r2, [pc, #532]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b83      	ldr	r3, [pc, #524]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b7f      	ldr	r3, [pc, #508]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a7e      	ldr	r2, [pc, #504]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b7c      	ldr	r3, [pc, #496]	@ (8000980 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	4879      	ldr	r0, [pc, #484]	@ (8000984 <MX_GPIO_Init+0x2a8>)
 80007a0:	f000 fd3a 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	4877      	ldr	r0, [pc, #476]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 80007aa:	f000 fd35 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007b4:	4875      	ldr	r0, [pc, #468]	@ (800098c <MX_GPIO_Init+0x2b0>)
 80007b6:	f000 fd2f 	bl	8001218 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	486c      	ldr	r0, [pc, #432]	@ (8000984 <MX_GPIO_Init+0x2a8>)
 80007d2:	f000 fb85 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4866      	ldr	r0, [pc, #408]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 80007ee:	f000 fb77 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000802:	2305      	movs	r3, #5
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	485e      	ldr	r0, [pc, #376]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 800080e:	f000 fb67 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	485a      	ldr	r0, [pc, #360]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 8000828:	f000 fb5a 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800082c:	2310      	movs	r3, #16
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083c:	2306      	movs	r3, #6
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4852      	ldr	r0, [pc, #328]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 8000848:	f000 fb4a 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800084c:	23e0      	movs	r3, #224	@ 0xe0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085c:	2305      	movs	r3, #5
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484a      	ldr	r0, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fb3a 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800086c:	2304      	movs	r3, #4
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4845      	ldr	r0, [pc, #276]	@ (8000994 <MX_GPIO_Init+0x2b8>)
 8000880:	f000 fb2e 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	483c      	ldr	r0, [pc, #240]	@ (8000994 <MX_GPIO_Init+0x2b8>)
 80008a2:	f000 fb1d 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4833      	ldr	r0, [pc, #204]	@ (800098c <MX_GPIO_Init+0x2b0>)
 80008c0:	f000 fb0e 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4829      	ldr	r0, [pc, #164]	@ (8000988 <MX_GPIO_Init+0x2ac>)
 80008e2:	f000 fafd 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4825      	ldr	r0, [pc, #148]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 80008fc:	f000 faf0 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000900:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000912:	230a      	movs	r3, #10
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481c      	ldr	r0, [pc, #112]	@ (8000990 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 fadf 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4815      	ldr	r0, [pc, #84]	@ (800098c <MX_GPIO_Init+0x2b0>)
 8000936:	f000 fad3 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	480f      	ldr	r0, [pc, #60]	@ (8000994 <MX_GPIO_Init+0x2b8>)
 8000958:	f000 fac2 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000960:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_GPIO_Init+0x2a8>)
 8000972:	f000 fab5 	bl	8000ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	@ 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00
 8000990:	40020000 	.word	0x40020000
 8000994:	40020400 	.word	0x40020400

08000998 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  while(1){
    printf("%s\n",(char*)parameters);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f004 fe6b 	bl	800567c <puts>
 80009a6:	e7fb      	b.n	80009a0 <task1_handler+0x8>

080009a8 <task2_handler>:
    //taskYIELD();
  }
}

static void task2_handler(void* parameters){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  while(1){
    printf("%s\n",(char*)parameters);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f004 fe63 	bl	800567c <puts>
 80009b6:	e7fb      	b.n	80009b0 <task2_handler+0x8>

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f987 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a26:	f002 fabd 	bl	8002fa4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	@ 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b33      	ldr	r3, [pc, #204]	@ (8000b1c <HAL_InitTick+0xe4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	4a32      	ldr	r2, [pc, #200]	@ (8000b1c <HAL_InitTick+0xe4>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <HAL_InitTick+0xe4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f870 	bl	8001b54 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7e:	f001 f855 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a82:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a84:	e004      	b.n	8000a90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a86:	f001 f851 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a92:	4a23      	ldr	r2, [pc, #140]	@ (8000b20 <HAL_InitTick+0xe8>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	0c9b      	lsrs	r3, r3, #18
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <HAL_InitTick+0xf0>)
 8000aa2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aa6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aaa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_InitTick+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ac4:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ac6:	f001 f877 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11b      	bne.n	8000b10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ad8:	4812      	ldr	r0, [pc, #72]	@ (8000b24 <HAL_InitTick+0xec>)
 8000ada:	f001 f8c7 	bl	8001c6c <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d111      	bne.n	8000b10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aec:	2036      	movs	r0, #54	@ 0x36
 8000aee:	f000 f9e9 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d808      	bhi.n	8000b0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2036      	movs	r0, #54	@ 0x36
 8000afe:	f000 f9c5 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_InitTick+0xf4>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e002      	b.n	8000b10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3738      	adds	r7, #56	@ 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	2000008c 	.word	0x2000008c
 8000b28:	40001000 	.word	0x40001000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <MemManage_Handler+0x4>

08000b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM6_DAC_IRQHandler+0x10>)
 8000b6e:	f001 f8ed 	bl	8001d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000008c 	.word	0x2000008c

08000b7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8e:	f3af 8000 	nop.w
 8000b92:	4601      	mov	r1, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf0      	blt.n	8000b8e <_read+0x12>
  }

  return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 fe2f 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc6d 	bl	8000554 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c88:	08005f34 	.word	0x08005f34
  ldr r2, =_sbss
 8000c8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c90:	2001a9d0 	.word	0x2001a9d0

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f7ff feb6 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe8c 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000d4 	.word	0x200000d4

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000d4 	.word	0x200000d4

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e16b      	b.n	80011d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 815a 	bne.w	80011ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80b4 	beq.w	80011ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b60      	ldr	r3, [pc, #384]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a5f      	ldr	r2, [pc, #380]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b5d      	ldr	r3, [pc, #372]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a5b      	ldr	r2, [pc, #364]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	@ (80011f4 <HAL_GPIO_Init+0x314>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	@ (80011f8 <HAL_GPIO_Init+0x318>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	@ (80011fc <HAL_GPIO_Init+0x31c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <HAL_GPIO_Init+0x320>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <HAL_GPIO_Init+0x324>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001208 <HAL_GPIO_Init+0x328>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	@ (800120c <HAL_GPIO_Init+0x32c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001210 <HAL_GPIO_Init+0x330>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x20a>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <HAL_GPIO_Init+0x334>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <HAL_GPIO_Init+0x334>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x334>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HAL_GPIO_Init+0x334>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae90 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcfe 	bl	8000d04 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcfa 	bl	8000d04 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcea 	bl	8000d04 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce6 	bl	8000d04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc9f 	bl	8000d04 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc9b 	bl	8000d04 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc7e 	bl	8000d04 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc7a 	bl	8000d04 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc5e 	bl	8000d04 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc5a 	bl	8000d04 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc47 	bl	8000d04 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc43 	bl	8000d04 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc03 	bl	8000d04 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fbff 	bl	8000d04 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	@ 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	@ 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	@ 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	@ 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbc4 	bl	8000d04 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fbc0 	bl	8000d04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbae 	bl	8000d04 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbaa 	bl	8000d04 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb7e 	bl	8000d04 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb7a 	bl	8000d04 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb4f 	bl	8000d04 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb38 	bl	8000d04 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fa6a 	bl	8000d04 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa66 	bl	8000d04 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	@ (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	@ (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f8a8 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08005ee4 	.word	0x08005ee4
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b094      	sub	sp, #80	@ 0x50
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b79      	ldr	r3, [pc, #484]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80e1 	bhi.w	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e0db      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b73      	ldr	r3, [pc, #460]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001940:	e0db      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b73      	ldr	r3, [pc, #460]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001946:	e0d8      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001968:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800196a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800196c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
 8001976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800197a:	4622      	mov	r2, r4
 800197c:	462b      	mov	r3, r5
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	6139      	str	r1, [r7, #16]
 8001998:	4629      	mov	r1, r5
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ac:	4659      	mov	r1, fp
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4651      	mov	r1, sl
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4651      	mov	r1, sl
 80019bc:	ebb2 0801 	subs.w	r8, r2, r1
 80019c0:	4659      	mov	r1, fp
 80019c2:	eb63 0901 	sbc.w	r9, r3, r1
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	eb18 0303 	adds.w	r3, r8, r3
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	462b      	mov	r3, r5
 80019e8:	eb49 0303 	adc.w	r3, r9, r3
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fa:	4629      	mov	r1, r5
 80019fc:	024b      	lsls	r3, r1, #9
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a04:	4621      	mov	r1, r4
 8001a06:	024a      	lsls	r2, r1, #9
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a18:	f7fe fc24 	bl	8000264 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4611      	mov	r1, r2
 8001a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a40:	4642      	mov	r2, r8
 8001a42:	464b      	mov	r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0159      	lsls	r1, r3, #5
 8001a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a52:	0150      	lsls	r0, r2, #5
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a78:	ebb2 040a 	subs.w	r4, r2, sl
 8001a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	00eb      	lsls	r3, r5, #3
 8001a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	18e3      	adds	r3, r4, r3
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	028b      	lsls	r3, r1, #10
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab8:	4621      	mov	r1, r4
 8001aba:	028a      	lsls	r2, r1, #10
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001acc:	f7fe fbca 	bl	8000264 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001ae8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af2:	e002      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3750      	adds	r7, #80	@ 0x50
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08005ef4 	.word	0x08005ef4

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f839 	bl	8001c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 f9c0 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e04e      	b.n	8001d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cae:	d01d      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d010      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e007      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40010400 	.word	0x40010400
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40001800 	.word	0x40001800

08001d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0202 	mvn.w	r2, #2
 8001d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8d2 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8c4 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8d5 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0204 	mvn.w	r2, #4
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8ac 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f89e 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8af 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0208 	mvn.w	r2, #8
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f886 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f878 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f889 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d020      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0210 	mvn.w	r2, #16
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f860 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f852 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f863 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0201 	mvn.w	r2, #1
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fd80 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f906 	bl	80020e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f834 	bl	8001f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0220 	mvn.w	r2, #32
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8d8 	bl	80020d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <TIM_Base_SetConfig+0x12c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a43      	ldr	r2, [pc, #268]	@ (80020ac <TIM_Base_SetConfig+0x130>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a42      	ldr	r2, [pc, #264]	@ (80020b0 <TIM_Base_SetConfig+0x134>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a41      	ldr	r2, [pc, #260]	@ (80020b4 <TIM_Base_SetConfig+0x138>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a40      	ldr	r2, [pc, #256]	@ (80020b8 <TIM_Base_SetConfig+0x13c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a35      	ldr	r2, [pc, #212]	@ (80020a8 <TIM_Base_SetConfig+0x12c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d027      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a32      	ldr	r2, [pc, #200]	@ (80020ac <TIM_Base_SetConfig+0x130>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d023      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a31      	ldr	r2, [pc, #196]	@ (80020b0 <TIM_Base_SetConfig+0x134>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <TIM_Base_SetConfig+0x138>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80020b8 <TIM_Base_SetConfig+0x13c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d017      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2e      	ldr	r2, [pc, #184]	@ (80020bc <TIM_Base_SetConfig+0x140>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a2d      	ldr	r2, [pc, #180]	@ (80020c0 <TIM_Base_SetConfig+0x144>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	@ (80020c4 <TIM_Base_SetConfig+0x148>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <TIM_Base_SetConfig+0x14c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2a      	ldr	r2, [pc, #168]	@ (80020cc <TIM_Base_SetConfig+0x150>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <TIM_Base_SetConfig+0x154>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <TIM_Base_SetConfig+0x12c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <TIM_Base_SetConfig+0x13c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f023 0201 	bic.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
  }
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00
 80020b8:	40010400 	.word	0x40010400
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40014400 	.word	0x40014400
 80020c4:	40014800 	.word	0x40014800
 80020c8:	40001800 	.word	0x40001800
 80020cc:	40001c00 	.word	0x40001c00
 80020d0:	40002000 	.word	0x40002000

080020d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f103 0208 	add.w	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002130:	f240 1019 	movw	r0, #281	@ 0x119
 8002134:	f002 fec0 	bl	8004eb8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800214e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002152:	f002 feb1 	bl	8004eb8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6852      	ldr	r2, [r2, #4]
 800217e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d103      	bne.n	8002192 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	f240 101d 	movw	r0, #285	@ 0x11d
 80021ac:	f002 fec0 	bl	8004f30 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 f896 	bl	8003300 <pvPortMalloc>
 80021d4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80021dc:	2058      	movs	r0, #88	@ 0x58
 80021de:	f001 f88f 	bl	8003300 <pvPortMalloc>
 80021e2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80021ea:	2258      	movs	r2, #88	@ 0x58
 80021ec:	2100      	movs	r1, #0
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f003 fb34 	bl	800585c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80021fa:	e005      	b.n	8002208 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80021fc:	6938      	ldr	r0, [r7, #16]
 80021fe:	f001 f9b1 	bl	8003564 <vPortFree>
 8002202:	e001      	b.n	8002208 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800220e:	2300      	movs	r3, #0
 8002210:	9303      	str	r3, [sp, #12]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f82d 	bl	8002284 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800222a:	697b      	ldr	r3, [r7, #20]
    }
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff ffb3 	bl	80021bc <prvCreateTask>
 8002256:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800225e:	6938      	ldr	r0, [r7, #16]
 8002260:	f000 f8a0 	bl	80023a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002264:	2301      	movs	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e002      	b.n	8002270 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4619      	mov	r1, r3
 8002274:	20c2      	movs	r0, #194	@ 0xc2
 8002276:	f002 fe5b 	bl	8004f30 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800227a:	697b      	ldr	r3, [r7, #20]
    }
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	461a      	mov	r2, r3
 800229c:	21a5      	movs	r1, #165	@ 0xa5
 800229e:	f003 fadd 	bl	800585c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022ac:	3b01      	subs	r3, #1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <prvInitialiseNewTask+0x5a>
    __asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	617b      	str	r3, [r7, #20]
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	e7fd      	b.n	80022da <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01e      	beq.n	8002322 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	e012      	b.n	8002310 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4413      	add	r3, r2
 80022f0:	7819      	ldrb	r1, [r3, #0]
 80022f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	3334      	adds	r3, #52	@ 0x34
 80022fa:	460a      	mov	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b09      	cmp	r3, #9
 8002314:	d9e9      	bls.n	80022ea <prvInitialiseNewTask+0x66>
 8002316:	e000      	b.n	800231a <prvInitialiseNewTask+0x96>
            {
                break;
 8002318:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002324:	2b04      	cmp	r3, #4
 8002326:	d90b      	bls.n	8002340 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	613b      	str	r3, [r7, #16]
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	2b04      	cmp	r3, #4
 8002344:	d901      	bls.n	800234a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002346:	2304      	movs	r3, #4
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002354:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	3304      	adds	r3, #4
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fef0 	bl	8002140 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	3318      	adds	r3, #24
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feeb 	bl	8002140 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800236e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002372:	f1c3 0205 	rsb	r2, r3, #5
 8002376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002378:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	69b8      	ldr	r0, [r7, #24]
 8002386:	f000 fc8d 	bl	8002ca4 <pxPortInitialiseStack>
 800238a:	4602      	mov	r2, r0
 800238c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800239a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80023a4:	b5b0      	push	{r4, r5, r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80023ac:	f000 fe7a 	bl	80030a4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80023b0:	4b48      	ldr	r3, [pc, #288]	@ (80024d4 <prvAddNewTaskToReadyList+0x130>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a47      	ldr	r2, [pc, #284]	@ (80024d4 <prvAddNewTaskToReadyList+0x130>)
 80023b8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80023ba:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <prvAddNewTaskToReadyList+0x134>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80023c2:	4a45      	ldr	r2, [pc, #276]	@ (80024d8 <prvAddNewTaskToReadyList+0x134>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023c8:	4b42      	ldr	r3, [pc, #264]	@ (80024d4 <prvAddNewTaskToReadyList+0x130>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d110      	bne.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80023d0:	f000 fbce 	bl	8002b70 <prvInitialiseTaskLists>
 80023d4:	e00d      	b.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80023d6:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <prvAddNewTaskToReadyList+0x138>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023de:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <prvAddNewTaskToReadyList+0x134>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d802      	bhi.n	80023f2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80023ec:	4a3a      	ldr	r2, [pc, #232]	@ (80024d8 <prvAddNewTaskToReadyList+0x134>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80023f2:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <prvAddNewTaskToReadyList+0x13c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	4a39      	ldr	r2, [pc, #228]	@ (80024e0 <prvAddNewTaskToReadyList+0x13c>)
 80023fa:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023fc:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <prvAddNewTaskToReadyList+0x13c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <prvAddNewTaskToReadyList+0x94>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fe03 	bl	8005018 <SEGGER_SYSVIEW_OnTaskCreate>
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	461d      	mov	r5, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461c      	mov	r4, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	1ae3      	subs	r3, r4, r3
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	462b      	mov	r3, r5
 8002434:	f001 fa94 	bl	8003960 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fe70 	bl	8005120 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <prvAddNewTaskToReadyList+0x140>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	4a25      	ldr	r2, [pc, #148]	@ (80024e4 <prvAddNewTaskToReadyList+0x140>)
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002456:	4924      	ldr	r1, [pc, #144]	@ (80024e8 <prvAddNewTaskToReadyList+0x144>)
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3304      	adds	r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	3204      	adds	r2, #4
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <prvAddNewTaskToReadyList+0x144>)
 8002496:	441a      	add	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a0:	4911      	ldr	r1, [pc, #68]	@ (80024e8 <prvAddNewTaskToReadyList+0x144>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <prvAddNewTaskToReadyList+0x144>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4403      	add	r3, r0
 80024c0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80024c2:	f000 fe21 	bl	8003108 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80024c6:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <prvAddNewTaskToReadyList+0x138>)
 80024c8:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bdb0      	pop	{r4, r5, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200001b0 	.word	0x200001b0
 80024d8:	200000d8 	.word	0x200000d8
 80024dc:	200001bc 	.word	0x200001bc
 80024e0:	200001cc 	.word	0x200001cc
 80024e4:	200001b8 	.word	0x200001b8
 80024e8:	200000dc 	.word	0x200000dc

080024ec <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e011      	b.n	8002524 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002500:	4a1c      	ldr	r2, [pc, #112]	@ (8002574 <prvCreateIdleTasks+0x88>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4413      	add	r3, r2
 8002506:	7819      	ldrb	r1, [r3, #0]
 8002508:	1d3a      	adds	r2, r7, #4
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	4413      	add	r3, r2
 800250e:	460a      	mov	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002512:	1d3a      	adds	r2, r7, #4
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4413      	add	r3, r2
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b09      	cmp	r3, #9
 8002528:	ddea      	ble.n	8002500 <prvCreateIdleTasks+0x14>
 800252a:	e000      	b.n	800252e <prvCreateIdleTasks+0x42>
        {
            break;
 800252c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e015      	b.n	8002560 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002534:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <prvCreateIdleTasks+0x8c>)
 8002536:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <prvCreateIdleTasks+0x90>)
 800253e:	4413      	add	r3, r2
 8002540:	1d39      	adds	r1, r7, #4
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2300      	movs	r3, #0
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2300      	movs	r3, #0
 800254a:	2282      	movs	r2, #130	@ 0x82
 800254c:	6938      	ldr	r0, [r7, #16]
 800254e:	f7ff fe71 	bl	8002234 <xTaskCreate>
 8002552:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	3301      	adds	r3, #1
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	dde6      	ble.n	8002534 <prvCreateIdleTasks+0x48>
 8002566:	e000      	b.n	800256a <prvCreateIdleTasks+0x7e>
        {
            break;
 8002568:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800256a:	69fb      	ldr	r3, [r7, #28]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	08005e24 	.word	0x08005e24
 8002578:	08002b4d 	.word	0x08002b4d
 800257c:	200001d4 	.word	0x200001d4

08002580 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002586:	f7ff ffb1 	bl	80024ec <prvCreateIdleTasks>
 800258a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d124      	bne.n	80025dc <vTaskStartScheduler+0x5c>
    __asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	60bb      	str	r3, [r7, #8]
}
 80025a4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <vTaskStartScheduler+0x90>)
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <vTaskStartScheduler+0x94>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <vTaskStartScheduler+0x98>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <vTaskStartScheduler+0x9c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <vTaskStartScheduler+0xa0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d102      	bne.n	80025cc <vTaskStartScheduler+0x4c>
 80025c6:	f002 fd0b 	bl	8004fe0 <SEGGER_SYSVIEW_OnIdle>
 80025ca:	e004      	b.n	80025d6 <vTaskStartScheduler+0x56>
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <vTaskStartScheduler+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fd63 	bl	800509c <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80025d6:	f000 fbf5 	bl	8002dc4 <xPortStartScheduler>
 80025da:	e00f      	b.n	80025fc <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d10b      	bne.n	80025fc <vTaskStartScheduler+0x7c>
    __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	607b      	str	r3, [r7, #4]
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025fc:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <vTaskStartScheduler+0xa4>)
 80025fe:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002600:	20cd      	movs	r0, #205	@ 0xcd
 8002602:	f002 fc59 	bl	8004eb8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001d0 	.word	0x200001d0
 8002614:	200001bc 	.word	0x200001bc
 8002618:	200001b4 	.word	0x200001b4
 800261c:	200001d4 	.word	0x200001d4
 8002620:	200000d8 	.word	0x200000d8
 8002624:	2000000c 	.word	0x2000000c

08002628 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <vTaskSuspendAll+0x18>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	4a03      	ldr	r2, [pc, #12]	@ (8002640 <vTaskSuspendAll+0x18>)
 8002634:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002636:	20cf      	movs	r0, #207	@ 0xcf
 8002638:	f002 fc3e 	bl	8004eb8 <SEGGER_SYSVIEW_RecordEndCall>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200001d8 	.word	0x200001d8

08002644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002652:	f000 fd27 	bl	80030a4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800265a:	4b73      	ldr	r3, [pc, #460]	@ (8002828 <xTaskResumeAll+0x1e4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10b      	bne.n	800267a <xTaskResumeAll+0x36>
    __asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	603b      	str	r3, [r7, #0]
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	e7fd      	b.n	8002676 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800267a:	4b6b      	ldr	r3, [pc, #428]	@ (8002828 <xTaskResumeAll+0x1e4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	4a69      	ldr	r2, [pc, #420]	@ (8002828 <xTaskResumeAll+0x1e4>)
 8002682:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002684:	4b68      	ldr	r3, [pc, #416]	@ (8002828 <xTaskResumeAll+0x1e4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 80c0 	bne.w	800280e <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800268e:	4b67      	ldr	r3, [pc, #412]	@ (800282c <xTaskResumeAll+0x1e8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80bb 	beq.w	800280e <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002698:	e092      	b.n	80027c0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800269a:	4b65      	ldr	r3, [pc, #404]	@ (8002830 <xTaskResumeAll+0x1ec>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	6a12      	ldr	r2, [r2, #32]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	69d2      	ldr	r2, [r2, #28]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3318      	adds	r3, #24
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d103      	bne.n	80026d0 <xTaskResumeAll+0x8c>
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1e5a      	subs	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	429a      	cmp	r2, r3
 8002704:	d103      	bne.n	800270e <xTaskResumeAll+0xca>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fcfd 	bl	8005120 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <xTaskResumeAll+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	4a3f      	ldr	r2, [pc, #252]	@ (8002834 <xTaskResumeAll+0x1f0>)
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273c:	493e      	ldr	r1, [pc, #248]	@ (8002838 <xTaskResumeAll+0x1f4>)
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3304      	adds	r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	3204      	adds	r2, #4
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	1d1a      	adds	r2, r3, #4
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4a2f      	ldr	r2, [pc, #188]	@ (8002838 <xTaskResumeAll+0x1f4>)
 800277c:	441a      	add	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002786:	492c      	ldr	r1, [pc, #176]	@ (8002838 <xTaskResumeAll+0x1f4>)
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002798:	1c59      	adds	r1, r3, #1
 800279a:	4827      	ldr	r0, [pc, #156]	@ (8002838 <xTaskResumeAll+0x1f4>)
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4403      	add	r3, r0
 80027a6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <xTaskResumeAll+0x1f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d904      	bls.n	80027c0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80027b6:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <xTaskResumeAll+0x1fc>)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2101      	movs	r1, #1
 80027bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <xTaskResumeAll+0x1ec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f47f af68 	bne.w	800269a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80027d0:	f000 fa4c 	bl	8002c6c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <xTaskResumeAll+0x200>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d012      	beq.n	8002806 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80027e0:	f000 f848 	bl	8002874 <xTaskIncrementTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80027ea:	4a15      	ldr	r2, [pc, #84]	@ (8002840 <xTaskResumeAll+0x1fc>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2101      	movs	r1, #1
 80027f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ef      	bne.n	80027e0 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <xTaskResumeAll+0x200>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002806:	4a0e      	ldr	r2, [pc, #56]	@ (8002840 <xTaskResumeAll+0x1fc>)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800280e:	f000 fc7b 	bl	8003108 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4619      	mov	r1, r3
 8002816:	20d0      	movs	r0, #208	@ 0xd0
 8002818:	f002 fb8a 	bl	8004f30 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800281c:	697b      	ldr	r3, [r7, #20]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200001d8 	.word	0x200001d8
 800282c:	200001b0 	.word	0x200001b0
 8002830:	20000170 	.word	0x20000170
 8002834:	200001b8 	.word	0x200001b8
 8002838:	200000dc 	.word	0x200000dc
 800283c:	200000d8 	.word	0x200000d8
 8002840:	200001c4 	.word	0x200001c4
 8002844:	200001c0 	.word	0x200001c0

08002848 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800284e:	f000 fd15 	bl	800327c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <xTaskGetTickCountFromISR+0x28>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	20d2      	movs	r0, #210	@ 0xd2
 8002860:	f002 fb66 	bl	8004f30 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002864:	683b      	ldr	r3, [r7, #0]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200001b4 	.word	0x200001b4

08002874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800287e:	4b74      	ldr	r3, [pc, #464]	@ (8002a50 <xTaskIncrementTick+0x1dc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 80d4 	bne.w	8002a30 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002888:	4b72      	ldr	r3, [pc, #456]	@ (8002a54 <xTaskIncrementTick+0x1e0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002890:	4a70      	ldr	r2, [pc, #448]	@ (8002a54 <xTaskIncrementTick+0x1e0>)
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d121      	bne.n	80028e0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800289c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a58 <xTaskIncrementTick+0x1e4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <xTaskIncrementTick+0x4a>
    __asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	607b      	str	r3, [r7, #4]
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	e7fd      	b.n	80028ba <xTaskIncrementTick+0x46>
 80028be:	4b66      	ldr	r3, [pc, #408]	@ (8002a58 <xTaskIncrementTick+0x1e4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	4b65      	ldr	r3, [pc, #404]	@ (8002a5c <xTaskIncrementTick+0x1e8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a63      	ldr	r2, [pc, #396]	@ (8002a58 <xTaskIncrementTick+0x1e4>)
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4a63      	ldr	r2, [pc, #396]	@ (8002a5c <xTaskIncrementTick+0x1e8>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b63      	ldr	r3, [pc, #396]	@ (8002a60 <xTaskIncrementTick+0x1ec>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	4a61      	ldr	r2, [pc, #388]	@ (8002a60 <xTaskIncrementTick+0x1ec>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	f000 f9c6 	bl	8002c6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028e0:	4b60      	ldr	r3, [pc, #384]	@ (8002a64 <xTaskIncrementTick+0x1f0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a3a      	ldr	r2, [r7, #32]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	f0c0 80a7 	bcc.w	8002a3a <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <xTaskIncrementTick+0x1e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80028f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a64 <xTaskIncrementTick+0x1f0>)
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	601a      	str	r2, [r3, #0]
                    break;
 80028fe:	e09c      	b.n	8002a3a <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002900:	4b55      	ldr	r3, [pc, #340]	@ (8002a58 <xTaskIncrementTick+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	d203      	bcs.n	8002920 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <xTaskIncrementTick+0x1f0>)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	6013      	str	r3, [r2, #0]
                        break;
 800291e:	e08c      	b.n	8002a3a <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	68d2      	ldr	r2, [r2, #12]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3304      	adds	r3, #4
 8002942:	429a      	cmp	r2, r3
 8002944:	d103      	bne.n	800294e <xTaskIncrementTick+0xda>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01e      	beq.n	80029a4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	6a12      	ldr	r2, [r2, #32]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	69d2      	ldr	r2, [r2, #28]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	3318      	adds	r3, #24
 8002988:	429a      	cmp	r2, r3
 800298a:	d103      	bne.n	8002994 <xTaskIncrementTick+0x120>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2200      	movs	r2, #0
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fbba 	bl	8005120 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	2201      	movs	r2, #1
 80029b2:	409a      	lsls	r2, r3
 80029b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <xTaskIncrementTick+0x1f4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002a68 <xTaskIncrementTick+0x1f4>)
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c2:	492a      	ldr	r1, [pc, #168]	@ (8002a6c <xTaskIncrementTick+0x1f8>)
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3304      	adds	r3, #4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	3204      	adds	r2, #4
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1d1a      	adds	r2, r3, #4
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4a1a      	ldr	r2, [pc, #104]	@ (8002a6c <xTaskIncrementTick+0x1f8>)
 8002a02:	441a      	add	r2, r3
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	615a      	str	r2, [r3, #20]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0c:	4917      	ldr	r1, [pc, #92]	@ (8002a6c <xTaskIncrementTick+0x1f8>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	4812      	ldr	r0, [pc, #72]	@ (8002a6c <xTaskIncrementTick+0x1f8>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a2e:	e75d      	b.n	80028ec <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <xTaskIncrementTick+0x1fc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <xTaskIncrementTick+0x1fc>)
 8002a38:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	20db      	movs	r0, #219	@ 0xdb
 8002a40:	f002 fa76 	bl	8004f30 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3728      	adds	r7, #40	@ 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200001d8 	.word	0x200001d8
 8002a54:	200001b4 	.word	0x200001b4
 8002a58:	20000168 	.word	0x20000168
 8002a5c:	2000016c 	.word	0x2000016c
 8002a60:	200001c8 	.word	0x200001c8
 8002a64:	200001d0 	.word	0x200001d0
 8002a68:	200001b8 	.word	0x200001b8
 8002a6c:	200000dc 	.word	0x200000dc
 8002a70:	200001c0 	.word	0x200001c0

08002a74 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <vTaskSwitchContext+0xc0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002a82:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <vTaskSwitchContext+0xc4>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002a88:	e04f      	b.n	8002b2a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b38 <vTaskSwitchContext+0xc4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a90:	4b2a      	ldr	r3, [pc, #168]	@ (8002b3c <vTaskSwitchContext+0xc8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	f1c3 031f 	rsb	r3, r3, #31
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	4926      	ldr	r1, [pc, #152]	@ (8002b40 <vTaskSwitchContext+0xcc>)
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10b      	bne.n	8002ad2 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	607b      	str	r3, [r7, #4]
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	e7fd      	b.n	8002ace <vTaskSwitchContext+0x5a>
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4a18      	ldr	r2, [pc, #96]	@ (8002b40 <vTaskSwitchContext+0xcc>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	3308      	adds	r3, #8
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d103      	bne.n	8002b00 <vTaskSwitchContext+0x8c>
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a0f      	ldr	r2, [pc, #60]	@ (8002b44 <vTaskSwitchContext+0xd0>)
 8002b08:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <vTaskSwitchContext+0xd4>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <vTaskSwitchContext+0xd0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d102      	bne.n	8002b1c <vTaskSwitchContext+0xa8>
 8002b16:	f002 fa63 	bl	8004fe0 <SEGGER_SYSVIEW_OnIdle>
 8002b1a:	e004      	b.n	8002b26 <vTaskSwitchContext+0xb2>
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <vTaskSwitchContext+0xd0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fabb 	bl	800509c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <vTaskSwitchContext+0xd0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
    }
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200001d8 	.word	0x200001d8
 8002b38:	200001c4 	.word	0x200001c4
 8002b3c:	200001b8 	.word	0x200001b8
 8002b40:	200000dc 	.word	0x200000dc
 8002b44:	200000d8 	.word	0x200000d8
 8002b48:	200001d4 	.word	0x200001d4

08002b4c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b54:	f000 f84c 	bl	8002bf0 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <prvIdleTask+0x20>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b68:	bf00      	nop
 8002b6a:	e7f3      	b.n	8002b54 <prvIdleTask+0x8>
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	e00c      	b.n	8002b96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <prvInitialiseTaskLists+0x60>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fab6 	bl	80020fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d9ef      	bls.n	8002b7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b9c:	480d      	ldr	r0, [pc, #52]	@ (8002bd4 <prvInitialiseTaskLists+0x64>)
 8002b9e:	f7ff faad 	bl	80020fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002ba2:	480d      	ldr	r0, [pc, #52]	@ (8002bd8 <prvInitialiseTaskLists+0x68>)
 8002ba4:	f7ff faaa 	bl	80020fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ba8:	480c      	ldr	r0, [pc, #48]	@ (8002bdc <prvInitialiseTaskLists+0x6c>)
 8002baa:	f7ff faa7 	bl	80020fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002bae:	480c      	ldr	r0, [pc, #48]	@ (8002be0 <prvInitialiseTaskLists+0x70>)
 8002bb0:	f7ff faa4 	bl	80020fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002bb4:	480b      	ldr	r0, [pc, #44]	@ (8002be4 <prvInitialiseTaskLists+0x74>)
 8002bb6:	f7ff faa1 	bl	80020fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <prvInitialiseTaskLists+0x78>)
 8002bbc:	4a05      	ldr	r2, [pc, #20]	@ (8002bd4 <prvInitialiseTaskLists+0x64>)
 8002bbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <prvInitialiseTaskLists+0x7c>)
 8002bc2:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <prvInitialiseTaskLists+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200000dc 	.word	0x200000dc
 8002bd4:	20000140 	.word	0x20000140
 8002bd8:	20000154 	.word	0x20000154
 8002bdc:	20000170 	.word	0x20000170
 8002be0:	20000184 	.word	0x20000184
 8002be4:	2000019c 	.word	0x2000019c
 8002be8:	20000168 	.word	0x20000168
 8002bec:	2000016c 	.word	0x2000016c

08002bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bf6:	e019      	b.n	8002c2c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002bf8:	f000 fa54 	bl	80030a4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <prvCheckTasksWaitingTermination+0x50>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff faa8 	bl	800215e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <prvCheckTasksWaitingTermination+0x54>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <prvCheckTasksWaitingTermination+0x54>)
 8002c16:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <prvCheckTasksWaitingTermination+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <prvCheckTasksWaitingTermination+0x58>)
 8002c20:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002c22:	f000 fa71 	bl	8003108 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f810 	bl	8002c4c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <prvCheckTasksWaitingTermination+0x58>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e1      	bne.n	8002bf8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000184 	.word	0x20000184
 8002c44:	200001b0 	.word	0x200001b0
 8002c48:	20000198 	.word	0x20000198

08002c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fc83 	bl	8003564 <vPortFree>
            vPortFree( pxTCB );
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fc80 	bl	8003564 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <prvResetNextTaskUnblockTime+0x30>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <prvResetNextTaskUnblockTime+0x34>)
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c82:	e005      	b.n	8002c90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <prvResetNextTaskUnblockTime+0x30>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <prvResetNextTaskUnblockTime+0x34>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000168 	.word	0x20000168
 8002ca0:	200001d0 	.word	0x200001d0

08002ca4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b04      	subs	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002d08 <pxPortInitialiseStack+0x64>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3b14      	subs	r3, #20
 8002cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3b04      	subs	r3, #4
 8002cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f06f 0202 	mvn.w	r2, #2
 8002cf2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b20      	subs	r3, #32
 8002cf8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	08002d0d 	.word	0x08002d0d

08002d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <prvTaskExitError+0x58>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d00b      	beq.n	8002d38 <prvTaskExitError+0x2c>
    __asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	60fb      	str	r3, [r7, #12]
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <prvTaskExitError+0x28>
    __asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	60bb      	str	r3, [r7, #8]
}
 8002d4a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d4c:	bf00      	nop
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0fc      	beq.n	8002d4e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000010 	.word	0x20000010
	...

08002d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d70:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <pxCurrentTCBConst2>)
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	6808      	ldr	r0, [r1, #0]
 8002d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7a:	f380 8809 	msr	PSP, r0
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8811 	msr	BASEPRI, r0
 8002d8a:	4770      	bx	lr
 8002d8c:	f3af 8000 	nop.w

08002d90 <pxCurrentTCBConst2>:
 8002d90:	200000d8 	.word	0x200000d8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop

08002d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d98:	4808      	ldr	r0, [pc, #32]	@ (8002dbc <prvPortStartFirstTask+0x24>)
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	6800      	ldr	r0, [r0, #0]
 8002d9e:	f380 8808 	msr	MSP, r0
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f380 8814 	msr	CONTROL, r0
 8002daa:	b662      	cpsie	i
 8002dac:	b661      	cpsie	f
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	df00      	svc	0
 8002db8:	bf00      	nop
 8002dba:	0000      	.short	0x0000
 8002dbc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop

08002dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dca:	4b69      	ldr	r3, [pc, #420]	@ (8002f70 <xPortStartScheduler+0x1ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a69      	ldr	r2, [pc, #420]	@ (8002f74 <xPortStartScheduler+0x1b0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10b      	bne.n	8002dec <xPortStartScheduler+0x28>
    __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dec:	4b60      	ldr	r3, [pc, #384]	@ (8002f70 <xPortStartScheduler+0x1ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a61      	ldr	r2, [pc, #388]	@ (8002f78 <xPortStartScheduler+0x1b4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10b      	bne.n	8002e0e <xPortStartScheduler+0x4a>
    __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	623b      	str	r3, [r7, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	e7fd      	b.n	8002e0a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <xPortStartScheduler+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	332c      	adds	r3, #44	@ 0x2c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a59      	ldr	r2, [pc, #356]	@ (8002f80 <xPortStartScheduler+0x1bc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <xPortStartScheduler+0x74>
    __asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	61fb      	str	r3, [r7, #28]
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3a:	3338      	adds	r3, #56	@ 0x38
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a51      	ldr	r2, [pc, #324]	@ (8002f84 <xPortStartScheduler+0x1c0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <xPortStartScheduler+0x98>
    __asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	61bb      	str	r3, [r7, #24]
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e60:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <xPortStartScheduler+0x1c4>)
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6e:	22ff      	movs	r2, #255	@ 0xff
 8002e70:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <xPortStartScheduler+0x1c8>)
 8002e86:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002e88:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <xPortStartScheduler+0x1c8>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <xPortStartScheduler+0xe4>
    __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	617b      	str	r3, [r7, #20]
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d013      	beq.n	8002ede <xPortStartScheduler+0x11a>
    __asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	613b      	str	r3, [r7, #16]
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	e7fd      	b.n	8002eca <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d0f1      	beq.n	8002ece <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d103      	bne.n	8002ef8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002ef0:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <xPortStartScheduler+0x1cc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e004      	b.n	8002f02 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <xPortStartScheduler+0x1cc>)
 8002f00:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f02:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <xPortStartScheduler+0x1cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	4a21      	ldr	r2, [pc, #132]	@ (8002f90 <xPortStartScheduler+0x1cc>)
 8002f0a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <xPortStartScheduler+0x1cc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f14:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <xPortStartScheduler+0x1cc>)
 8002f16:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f20:	4b1c      	ldr	r3, [pc, #112]	@ (8002f94 <xPortStartScheduler+0x1d0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <xPortStartScheduler+0x1d0>)
 8002f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <xPortStartScheduler+0x1d0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <xPortStartScheduler+0x1d0>)
 8002f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f36:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002f38:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <xPortStartScheduler+0x1d4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f3e:	f000 f96d 	bl	800321c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <xPortStartScheduler+0x1d8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f48:	f000 f98c 	bl	8003264 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <xPortStartScheduler+0x1dc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <xPortStartScheduler+0x1dc>)
 8002f52:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002f56:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f58:	f7ff ff1e 	bl	8002d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f5c:	f7ff fd8a 	bl	8002a74 <vTaskSwitchContext>
    prvTaskExitError();
 8002f60:	f7ff fed4 	bl	8002d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3730      	adds	r7, #48	@ 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000ed00 	.word	0xe000ed00
 8002f74:	410fc271 	.word	0x410fc271
 8002f78:	410fc270 	.word	0x410fc270
 8002f7c:	e000ed08 	.word	0xe000ed08
 8002f80:	08002d71 	.word	0x08002d71
 8002f84:	08003161 	.word	0x08003161
 8002f88:	e000e400 	.word	0xe000e400
 8002f8c:	200001dc 	.word	0x200001dc
 8002f90:	200001e0 	.word	0x200001e0
 8002f94:	e000ed20 	.word	0xe000ed20
 8002f98:	e000ed1c 	.word	0xe000ed1c
 8002f9c:	20000010 	.word	0x20000010
 8002fa0:	e000ef34 	.word	0xe000ef34

08002fa4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002faa:	4b38      	ldr	r3, [pc, #224]	@ (800308c <vInitPrioGroupValue+0xe8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a38      	ldr	r2, [pc, #224]	@ (8003090 <vInitPrioGroupValue+0xec>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10b      	bne.n	8002fcc <vInitPrioGroupValue+0x28>
    __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	613b      	str	r3, [r7, #16]
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800308c <vInitPrioGroupValue+0xe8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <vInitPrioGroupValue+0xf0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10b      	bne.n	8002fee <vInitPrioGroupValue+0x4a>
    __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60fb      	str	r3, [r7, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fee:	4b2a      	ldr	r3, [pc, #168]	@ (8003098 <vInitPrioGroupValue+0xf4>)
 8002ff0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	22ff      	movs	r2, #255	@ 0xff
 8002ffe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <vInitPrioGroupValue+0xf8>)
 8003014:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003016:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800301c:	e009      	b.n	8003032 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3b01      	subs	r3, #1
 8003024:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 8003026:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b80      	cmp	r3, #128	@ 0x80
 800303c:	d0ef      	beq.n	800301e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800303e:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00b      	beq.n	8003062 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60bb      	str	r3, [r7, #8]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003062:	4b0f      	ldr	r3, [pc, #60]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4a0d      	ldr	r2, [pc, #52]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 800306a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003074:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <vInitPrioGroupValue+0xfc>)
 8003076:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00
 8003090:	410fc271 	.word	0x410fc271
 8003094:	410fc270 	.word	0x410fc270
 8003098:	e000e400 	.word	0xe000e400
 800309c:	200001dc 	.word	0x200001dc
 80030a0:	200001e0 	.word	0x200001e0

080030a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
    __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	607b      	str	r3, [r7, #4]
}
 80030bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <vPortEnterCritical+0x5c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <vPortEnterCritical+0x5c>)
 80030c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80030c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <vPortEnterCritical+0x5c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d110      	bne.n	80030f2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <vPortEnterCritical+0x60>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <vPortEnterCritical+0x4e>
    __asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	603b      	str	r3, [r7, #0]
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	e7fd      	b.n	80030ee <vPortEnterCritical+0x4a>
    }
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000010 	.word	0x20000010
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <vPortExitCritical+0x50>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <vPortExitCritical+0x26>
    __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	607b      	str	r3, [r7, #4]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800312e:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <vPortExitCritical+0x50>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3b01      	subs	r3, #1
 8003134:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <vPortExitCritical+0x50>)
 8003136:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003138:	4b07      	ldr	r3, [pc, #28]	@ (8003158 <vPortExitCritical+0x50>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <vPortExitCritical+0x44>
 8003140:	2300      	movs	r3, #0
 8003142:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800314a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20000010 	.word	0x20000010
 800315c:	00000000 	.word	0x00000000

08003160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003160:	f3ef 8009 	mrs	r0, PSP
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <pxCurrentTCBConst>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f01e 0f10 	tst.w	lr, #16
 8003170:	bf08      	it	eq
 8003172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317a:	6010      	str	r0, [r2, #0]
 800317c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003184:	f380 8811 	msr	BASEPRI, r0
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f7ff fc70 	bl	8002a74 <vTaskSwitchContext>
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f380 8811 	msr	BASEPRI, r0
 800319c:	bc09      	pop	{r0, r3}
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	6808      	ldr	r0, [r1, #0]
 80031a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a6:	f01e 0f10 	tst.w	lr, #16
 80031aa:	bf08      	it	eq
 80031ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031b0:	f380 8809 	msr	PSP, r0
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w

080031c0 <pxCurrentTCBConst>:
 80031c0:	200000d8 	.word	0x200000d8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop

080031c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
    __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	607b      	str	r3, [r7, #4]
}
 80031e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80031e2:	f001 fdef 	bl	8004dc4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80031e6:	f7ff fb45 	bl	8002874 <xTaskIncrementTick>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80031f0:	f001 fe46 	bl	8004e80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031f4:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <SysTick_Handler+0x50>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e001      	b.n	8003202 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80031fe:	f001 fe23 	bl	8004e48 <SEGGER_SYSVIEW_RecordExitISR>
 8003202:	2300      	movs	r3, #0
 8003204:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f383 8811 	msr	BASEPRI, r3
}
 800320c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003226:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <vPortSetupTimerInterrupt+0x38>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800322c:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <vPortSetupTimerInterrupt+0x3c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <vPortSetupTimerInterrupt+0x40>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <vPortSetupTimerInterrupt+0x44>)
 800323a:	3b01      	subs	r3, #1
 800323c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800323e:	4b04      	ldr	r3, [pc, #16]	@ (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010
 8003254:	e000e018 	.word	0xe000e018
 8003258:	20000000 	.word	0x20000000
 800325c:	10624dd3 	.word	0x10624dd3
 8003260:	e000e014 	.word	0xe000e014

08003264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003274 <vPortEnableVFP+0x10>
 8003268:	6801      	ldr	r1, [r0, #0]
 800326a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800326e:	6001      	str	r1, [r0, #0]
 8003270:	4770      	bx	lr
 8003272:	0000      	.short	0x0000
 8003274:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop

0800327c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003282:	f3ef 8305 	mrs	r3, IPSR
 8003286:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	d915      	bls.n	80032ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800328e:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <vPortValidateInterruptPriority+0x74>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003298:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <vPortValidateInterruptPriority+0x78>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	7afa      	ldrb	r2, [r7, #11]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d20b      	bcs.n	80032ba <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <vPortValidateInterruptPriority+0x7c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <vPortValidateInterruptPriority+0x80>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d90b      	bls.n	80032e2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	603b      	str	r3, [r7, #0]
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	e7fd      	b.n	80032de <vPortValidateInterruptPriority+0x62>
    }
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e3f0 	.word	0xe000e3f0
 80032f4:	200001dc 	.word	0x200001dc
 80032f8:	e000ed0c 	.word	0xe000ed0c
 80032fc:	200001e0 	.word	0x200001e0

08003300 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08e      	sub	sp, #56	@ 0x38
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d022      	beq.n	8003358 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003312:	2308      	movs	r3, #8
 8003314:	43db      	mvns	r3, r3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d81b      	bhi.n	8003354 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800331c:	2208      	movs	r2, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	2b00      	cmp	r3, #0
 800332c:	d014      	beq.n	8003358 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	f1c3 0308 	rsb	r3, r3, #8
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800333a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333c:	43db      	mvns	r3, r3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d804      	bhi.n	800334e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003348:	4413      	add	r3, r2
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	e004      	b.n	8003358 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	e001      	b.n	8003358 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003358:	f7ff f966 	bl	8002628 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800335c:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <pvPortMalloc+0x248>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003364:	f000 f978 	bl	8003658 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f2c0 80d3 	blt.w	8003516 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80cf 	beq.w	8003516 <pvPortMalloc+0x216>
 8003378:	4b74      	ldr	r3, [pc, #464]	@ (800354c <pvPortMalloc+0x24c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	f200 80c9 	bhi.w	8003516 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003384:	4b72      	ldr	r3, [pc, #456]	@ (8003550 <pvPortMalloc+0x250>)
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003388:	4b71      	ldr	r3, [pc, #452]	@ (8003550 <pvPortMalloc+0x250>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	4a70      	ldr	r2, [pc, #448]	@ (8003554 <pvPortMalloc+0x254>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d305      	bcc.n	80033a2 <pvPortMalloc+0xa2>
 8003396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003398:	4a6f      	ldr	r2, [pc, #444]	@ (8003558 <pvPortMalloc+0x258>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d801      	bhi.n	80033a2 <pvPortMalloc+0xa2>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <pvPortMalloc+0xa4>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d129      	bne.n	80033fc <pvPortMalloc+0xfc>
    __asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	4a61      	ldr	r2, [pc, #388]	@ (8003554 <pvPortMalloc+0x254>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d305      	bcc.n	80033de <pvPortMalloc+0xde>
 80033d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d4:	4a60      	ldr	r2, [pc, #384]	@ (8003558 <pvPortMalloc+0x258>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d801      	bhi.n	80033de <pvPortMalloc+0xde>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <pvPortMalloc+0xe0>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <pvPortMalloc+0xfc>
    __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61fb      	str	r3, [r7, #28]
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d903      	bls.n	800340e <pvPortMalloc+0x10e>
 8003406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1d8      	bne.n	80033c0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800340e:	4b4e      	ldr	r3, [pc, #312]	@ (8003548 <pvPortMalloc+0x248>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003414:	429a      	cmp	r2, r3
 8003416:	d07e      	beq.n	8003516 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2208      	movs	r2, #8
 800341e:	4413      	add	r3, r2
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	4a4b      	ldr	r2, [pc, #300]	@ (8003554 <pvPortMalloc+0x254>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d305      	bcc.n	8003436 <pvPortMalloc+0x136>
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	4a4a      	ldr	r2, [pc, #296]	@ (8003558 <pvPortMalloc+0x258>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d801      	bhi.n	8003436 <pvPortMalloc+0x136>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <pvPortMalloc+0x138>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <pvPortMalloc+0x154>
    __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	61bb      	str	r3, [r7, #24]
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800345c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d90b      	bls.n	800347e <pvPortMalloc+0x17e>
    __asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	617b      	str	r3, [r7, #20]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	1ad2      	subs	r2, r2, r3
 8003486:	2308      	movs	r3, #8
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	429a      	cmp	r2, r3
 800348c:	d924      	bls.n	80034d8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800348e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <pvPortMalloc+0x1b8>
    __asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	613b      	str	r3, [r7, #16]
}
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	1ad2      	subs	r2, r2, r3
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034d8:	4b1c      	ldr	r3, [pc, #112]	@ (800354c <pvPortMalloc+0x24c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	4a1a      	ldr	r2, [pc, #104]	@ (800354c <pvPortMalloc+0x24c>)
 80034e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034e6:	4b19      	ldr	r3, [pc, #100]	@ (800354c <pvPortMalloc+0x24c>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b1c      	ldr	r3, [pc, #112]	@ (800355c <pvPortMalloc+0x25c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d203      	bcs.n	80034fa <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034f2:	4b16      	ldr	r3, [pc, #88]	@ (800354c <pvPortMalloc+0x24c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a19      	ldr	r2, [pc, #100]	@ (800355c <pvPortMalloc+0x25c>)
 80034f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80034fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <pvPortMalloc+0x260>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <pvPortMalloc+0x260>)
 8003514:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003516:	f7ff f895 	bl	8002644 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800351a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <pvPortMalloc+0x23c>
    __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60fb      	str	r3, [r7, #12]
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <pvPortMalloc+0x238>
    return pvReturn;
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800353e:	4618      	mov	r0, r3
 8003540:	3738      	adds	r7, #56	@ 0x38
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200191ec 	.word	0x200191ec
 800354c:	200191f0 	.word	0x200191f0
 8003550:	200191e4 	.word	0x200191e4
 8003554:	200001e4 	.word	0x200001e4
 8003558:	200191e3 	.word	0x200191e3
 800355c:	200191f4 	.word	0x200191f4
 8003560:	200191f8 	.word	0x200191f8

08003564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d064      	beq.n	8003640 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003576:	2308      	movs	r3, #8
 8003578:	425b      	negs	r3, r3
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4a30      	ldr	r2, [pc, #192]	@ (8003648 <vPortFree+0xe4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d305      	bcc.n	8003598 <vPortFree+0x34>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4a2f      	ldr	r2, [pc, #188]	@ (800364c <vPortFree+0xe8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d801      	bhi.n	8003598 <vPortFree+0x34>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <vPortFree+0x36>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <vPortFree+0x52>
    __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	617b      	str	r3, [r7, #20]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0b      	blt.n	80035d6 <vPortFree+0x72>
    __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	613b      	str	r3, [r7, #16]
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	e7fd      	b.n	80035d2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <vPortFree+0x92>
    __asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	60fb      	str	r3, [r7, #12]
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	e7fd      	b.n	80035f2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0fdb      	lsrs	r3, r3, #31
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01c      	beq.n	8003640 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800361a:	f7ff f805 	bl	8002628 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <vPortFree+0xec>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4413      	add	r3, r2
 8003628:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <vPortFree+0xec>)
 800362a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800362c:	69b8      	ldr	r0, [r7, #24]
 800362e:	f000 f86d 	bl	800370c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003632:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <vPortFree+0xf0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a06      	ldr	r2, [pc, #24]	@ (8003654 <vPortFree+0xf0>)
 800363a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800363c:	f7ff f802 	bl	8002644 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003640:	bf00      	nop
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200001e4 	.word	0x200001e4
 800364c:	200191e3 	.word	0x200191e3
 8003650:	200191f0 	.word	0x200191f0
 8003654:	200191fc 	.word	0x200191fc

08003658 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800365e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8003662:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003664:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <prvHeapInit+0xa0>)
 8003666:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3307      	adds	r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <prvHeapInit+0xa0>)
 8003688:	4413      	add	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <prvHeapInit+0xa4>)
 8003690:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003692:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <prvHeapInit+0xa4>)
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80036a0:	2208      	movs	r2, #8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <prvHeapInit+0xa8>)
 80036b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <prvHeapInit+0xa8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <prvHeapInit+0xa8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80036d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <prvHeapInit+0xa8>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <prvHeapInit+0xac>)
 80036e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a07      	ldr	r2, [pc, #28]	@ (8003708 <prvHeapInit+0xb0>)
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	200001e4 	.word	0x200001e4
 80036fc:	200191e4 	.word	0x200191e4
 8003700:	200191ec 	.word	0x200191ec
 8003704:	200191f4 	.word	0x200191f4
 8003708:	200191f0 	.word	0x200191f0

0800370c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003714:	4b36      	ldr	r3, [pc, #216]	@ (80037f0 <prvInsertBlockIntoFreeList+0xe4>)
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e002      	b.n	8003720 <prvInsertBlockIntoFreeList+0x14>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d8f7      	bhi.n	800371a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a30      	ldr	r2, [pc, #192]	@ (80037f0 <prvInsertBlockIntoFreeList+0xe4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d018      	beq.n	8003764 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	4a2f      	ldr	r2, [pc, #188]	@ (80037f4 <prvInsertBlockIntoFreeList+0xe8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d305      	bcc.n	8003746 <prvInsertBlockIntoFreeList+0x3a>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	4a2e      	ldr	r2, [pc, #184]	@ (80037f8 <prvInsertBlockIntoFreeList+0xec>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d801      	bhi.n	8003746 <prvInsertBlockIntoFreeList+0x3a>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <prvInsertBlockIntoFreeList+0x3c>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	d108      	bne.n	8003788 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	441a      	add	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	441a      	add	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d118      	bne.n	80037ce <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <prvInsertBlockIntoFreeList+0xf0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d00d      	beq.n	80037c4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e008      	b.n	80037d6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80037c4:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <prvInsertBlockIntoFreeList+0xf0>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e003      	b.n	80037d6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d002      	beq.n	80037e4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	200191e4 	.word	0x200191e4
 80037f4:	200001e4 	.word	0x200001e4
 80037f8:	200191e3 	.word	0x200191e3
 80037fc:	200191ec 	.word	0x200191ec

08003800 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003804:	4803      	ldr	r0, [pc, #12]	@ (8003814 <_cbSendSystemDesc+0x14>)
 8003806:	f001 fa87 	bl	8004d18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800380a:	4803      	ldr	r0, [pc, #12]	@ (8003818 <_cbSendSystemDesc+0x18>)
 800380c:	f001 fa84 	bl	8004d18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	08005e2c 	.word	0x08005e2c
 8003818:	08005e60 	.word	0x08005e60

0800381c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003820:	4b06      	ldr	r3, [pc, #24]	@ (800383c <SEGGER_SYSVIEW_Conf+0x20>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <SEGGER_SYSVIEW_Conf+0x20>)
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <SEGGER_SYSVIEW_Conf+0x24>)
 800382a:	4a06      	ldr	r2, [pc, #24]	@ (8003844 <SEGGER_SYSVIEW_Conf+0x28>)
 800382c:	f000 fef8 	bl	8004620 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003830:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003834:	f000 ff38 	bl	80046a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000000 	.word	0x20000000
 8003840:	08003801 	.word	0x08003801
 8003844:	08005efc 	.word	0x08005efc

08003848 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384a:	b085      	sub	sp, #20
 800384c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	e033      	b.n	80038bc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003854:	491e      	ldr	r1, [pc, #120]	@ (80038d0 <_cbSendTaskList+0x88>)
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	491a      	ldr	r1, [pc, #104]	@ (80038d0 <_cbSendTaskList+0x88>)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3304      	adds	r3, #4
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	4c16      	ldr	r4, [pc, #88]	@ (80038d0 <_cbSendTaskList+0x88>)
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4423      	add	r3, r4
 8003884:	3308      	adds	r3, #8
 8003886:	681c      	ldr	r4, [r3, #0]
 8003888:	4d11      	ldr	r5, [pc, #68]	@ (80038d0 <_cbSendTaskList+0x88>)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	442b      	add	r3, r5
 8003896:	330c      	adds	r3, #12
 8003898:	681d      	ldr	r5, [r3, #0]
 800389a:	4e0d      	ldr	r6, [pc, #52]	@ (80038d0 <_cbSendTaskList+0x88>)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4433      	add	r3, r6
 80038a8:	3310      	adds	r3, #16
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	462b      	mov	r3, r5
 80038b0:	4622      	mov	r2, r4
 80038b2:	f000 f8bd 	bl	8003a30 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3301      	adds	r3, #1
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <_cbSendTaskList+0x8c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3c6      	bcc.n	8003854 <_cbSendTaskList+0xc>
  }
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d0:	20019200 	.word	0x20019200
 80038d4:	200192a0 	.word	0x200192a0

080038d8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038e0:	f7fe ffb2 	bl	8002848 <xTaskGetTickCountFromISR>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2200      	movs	r2, #0
 80038e8:	469a      	mov	sl, r3
 80038ea:	4693      	mov	fp, r2
 80038ec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	f04f 0a00 	mov.w	sl, #0
 80038fc:	f04f 0b00 	mov.w	fp, #0
 8003900:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003904:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003908:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800390c:	4652      	mov	r2, sl
 800390e:	465b      	mov	r3, fp
 8003910:	1a14      	subs	r4, r2, r0
 8003912:	eb63 0501 	sbc.w	r5, r3, r1
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	00ab      	lsls	r3, r5, #2
 8003920:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003924:	00a2      	lsls	r2, r4, #2
 8003926:	4614      	mov	r4, r2
 8003928:	461d      	mov	r5, r3
 800392a:	eb14 0800 	adds.w	r8, r4, r0
 800392e:	eb45 0901 	adc.w	r9, r5, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800394e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003960 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800396e:	2205      	movs	r2, #5
 8003970:	492b      	ldr	r1, [pc, #172]	@ (8003a20 <SYSVIEW_AddTask+0xc0>)
 8003972:	68b8      	ldr	r0, [r7, #8]
 8003974:	f001 ff62 	bl	800583c <memcmp>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d04b      	beq.n	8003a16 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800397e:	4b29      	ldr	r3, [pc, #164]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b07      	cmp	r3, #7
 8003984:	d903      	bls.n	800398e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003986:	4828      	ldr	r0, [pc, #160]	@ (8003a28 <SYSVIEW_AddTask+0xc8>)
 8003988:	f001 fcf2 	bl	8005370 <SEGGER_SYSVIEW_Warn>
    return;
 800398c:	e044      	b.n	8003a18 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800398e:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4926      	ldr	r1, [pc, #152]	@ (8003a2c <SYSVIEW_AddTask+0xcc>)
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039a2:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4921      	ldr	r1, [pc, #132]	@ (8003a2c <SYSVIEW_AddTask+0xcc>)
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3304      	adds	r3, #4
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80039b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	491b      	ldr	r1, [pc, #108]	@ (8003a2c <SYSVIEW_AddTask+0xcc>)
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3308      	adds	r3, #8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4916      	ldr	r1, [pc, #88]	@ (8003a2c <SYSVIEW_AddTask+0xcc>)
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	330c      	adds	r3, #12
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4910      	ldr	r1, [pc, #64]	@ (8003a2c <SYSVIEW_AddTask+0xcc>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3310      	adds	r3, #16
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a08      	ldr	r2, [pc, #32]	@ (8003a24 <SYSVIEW_AddTask+0xc4>)
 8003a02:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f80e 	bl	8003a30 <SYSVIEW_SendTaskInfo>
 8003a14:	e000      	b.n	8003a18 <SYSVIEW_AddTask+0xb8>
    return;
 8003a16:	bf00      	nop

}
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	08005e70 	.word	0x08005e70
 8003a24:	200192a0 	.word	0x200192a0
 8003a28:	08005e78 	.word	0x08005e78
 8003a2c:	20019200 	.word	0x20019200

08003a30 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a3e:	f107 0310 	add.w	r3, r7, #16
 8003a42:	2218      	movs	r2, #24
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 ff08 	bl	800585c <memset>
  TaskInfo.TaskID     = TaskID;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f85f 	bl	8004b28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a6a:	bf00      	nop
 8003a6c:	3728      	adds	r7, #40	@ 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003af4 <USART2_IRQHandler+0x80>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d011      	beq.n	8003aae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <USART2_IRQHandler+0x84>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 030b 	and.w	r3, r3, #11
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <USART2_IRQHandler+0x88>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003aa4:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <USART2_IRQHandler+0x88>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01a      	beq.n	8003aee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003ab8:	4b11      	ldr	r3, [pc, #68]	@ (8003b00 <USART2_IRQHandler+0x8c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <USART2_IRQHandler+0x8c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1dfa      	adds	r2, r7, #7
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4798      	blx	r3
 8003aca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <USART2_IRQHandler+0x90>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b04 <USART2_IRQHandler+0x90>)
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e006      	b.n	8003aee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003ae0:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <USART2_IRQHandler+0x80>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <USART2_IRQHandler+0x84>)
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e000      	b.n	8003aee <USART2_IRQHandler+0x7a>
      return;
 8003aec:	bf00      	nop
    }
  }
}
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40004400 	.word	0x40004400
 8003af8:	40004404 	.word	0x40004404
 8003afc:	200192a4 	.word	0x200192a4
 8003b00:	200192a8 	.word	0x200192a8
 8003b04:	4000440c 	.word	0x4000440c

08003b08 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	4000440c 	.word	0x4000440c

08003b28 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b2e:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <_DoInit+0xa0>)
 8003b30:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003b32:	22a8      	movs	r2, #168	@ 0xa8
 8003b34:	2100      	movs	r1, #0
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f001 fe90 	bl	800585c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2203      	movs	r2, #3
 8003b46:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4a20      	ldr	r2, [pc, #128]	@ (8003bcc <_DoInit+0xa4>)
 8003b4c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd0 <_DoInit+0xa8>)
 8003b52:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b5a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2200      	movs	r2, #0
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <_DoInit+0xa4>)
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <_DoInit+0xac>)
 8003b78:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b92:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e00c      	b.n	8003bb6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1c3 030f 	rsb	r3, r3, #15
 8003ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd8 <_DoInit+0xb0>)
 8003ba4:	5cd1      	ldrb	r1, [r2, r3]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	460a      	mov	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d9ef      	bls.n	8003b9c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003bbc:	f3bf 8f5f 	dmb	sy
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200192ac 	.word	0x200192ac
 8003bcc:	08005ec8 	.word	0x08005ec8
 8003bd0:	20019354 	.word	0x20019354
 8003bd4:	20019754 	.word	0x20019754
 8003bd8:	08005f04 	.word	0x08005f04

08003bdc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d905      	bls.n	8003c0c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	e007      	b.n	8003c1c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	1acb      	subs	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bf28      	it	cs
 8003c2a:	4613      	movcs	r3, r2
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4293      	cmp	r3, r2
 8003c34:	bf28      	it	cs
 8003c36:	4613      	movcs	r3, r2
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f001 fe6a 	bl	8005922 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	4413      	add	r3, r2
 8003c54:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	4413      	add	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d101      	bne.n	8003c7c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1b2      	bne.n	8003bf2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3728      	adds	r7, #40	@ 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b088      	sub	sp, #32
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d911      	bls.n	8003cde <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	6938      	ldr	r0, [r7, #16]
 8003cca:	f001 fe2a 	bl	8005922 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003cce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	441a      	add	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003cdc:	e01f      	b.n	8003d1e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	6938      	ldr	r0, [r7, #16]
 8003cf2:	f001 fe16 	bl	8005922 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4413      	add	r3, r2
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6938      	ldr	r0, [r7, #16]
 8003d10:	f001 fe07 	bl	8005922 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d14:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	60da      	str	r2, [r3, #12]
}
 8003d1e:	bf00      	nop
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d808      	bhi.n	8003d54 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad2      	subs	r2, r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e004      	b.n	8003d5e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d5e:	697b      	ldr	r3, [r7, #20]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d78:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b53      	cmp	r3, #83	@ 0x53
 8003d84:	d001      	beq.n	8003d8a <SEGGER_RTT_ReadNoLock+0x1e>
 8003d86:	f7ff fecf 	bl	8003b28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	3360      	adds	r3, #96	@ 0x60
 8003d96:	4a37      	ldr	r2, [pc, #220]	@ (8003e74 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003dac:	2300      	movs	r3, #0
 8003dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d92b      	bls.n	8003e10 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bf28      	it	cs
 8003dca:	4613      	movcs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	4413      	add	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	6939      	ldr	r1, [r7, #16]
 8003ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dde:	f001 fda0 	bl	8005922 <memcpy>
    NumBytesRead += NumBytesRem;
 8003de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4413      	add	r3, r2
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d101      	bne.n	8003e10 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bf28      	it	cs
 8003e20:	4613      	movcs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d019      	beq.n	8003e5e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e30:	4413      	add	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e3a:	f001 fd72 	bl	8005922 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200192ac 	.word	0x200192ac

08003e78 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4a1f      	ldr	r2, [pc, #124]	@ (8003f14 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003e96:	4413      	add	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d029      	beq.n	8003ef6 <SEGGER_RTT_WriteNoLock+0x7e>
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d82e      	bhi.n	8003f04 <SEGGER_RTT_WriteNoLock+0x8c>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <SEGGER_RTT_WriteNoLock+0x38>
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d013      	beq.n	8003ed6 <SEGGER_RTT_WriteNoLock+0x5e>
 8003eae:	e029      	b.n	8003f04 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003eb0:	6978      	ldr	r0, [r7, #20]
 8003eb2:	f7ff ff38 	bl	8003d26 <_GetAvailWriteSpace>
 8003eb6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d202      	bcs.n	8003ec6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003ec4:	e021      	b.n	8003f0a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff fee1 	bl	8003c96 <_WriteNoCheck>
    break;
 8003ed4:	e019      	b.n	8003f0a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff ff25 	bl	8003d26 <_GetAvailWriteSpace>
 8003edc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	bf28      	it	cs
 8003ee6:	4613      	movcs	r3, r2
 8003ee8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	f7ff fed1 	bl	8003c96 <_WriteNoCheck>
    break;
 8003ef4:	e009      	b.n	8003f0a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f7ff fe6e 	bl	8003bdc <_WriteBlocking>
 8003f00:	61f8      	str	r0, [r7, #28]
    break;
 8003f02:	e002      	b.n	8003f0a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
    break;
 8003f08:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200192ac 	.word	0x200192ac

08003f18 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <SEGGER_RTT_Write+0x48>)
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b53      	cmp	r3, #83	@ 0x53
 8003f30:	d001      	beq.n	8003f36 <SEGGER_RTT_Write+0x1e>
 8003f32:	f7ff fdf9 	bl	8003b28 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f36:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3a:	f04f 0120 	mov.w	r1, #32
 8003f3e:	f381 8811 	msr	BASEPRI, r1
 8003f42:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff ff95 	bl	8003e78 <SEGGER_RTT_WriteNoLock>
 8003f4e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200192ac 	.word	0x200192ac

08003f64 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f72:	4b3d      	ldr	r3, [pc, #244]	@ (8004068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b53      	cmp	r3, #83	@ 0x53
 8003f7e:	d001      	beq.n	8003f84 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003f80:	f7ff fdd2 	bl	8003b28 <_DoInit>
  SEGGER_RTT_LOCK();
 8003f84:	f3ef 8311 	mrs	r3, BASEPRI
 8003f88:	f04f 0120 	mov.w	r1, #32
 8003f8c:	f381 8811 	msr	BASEPRI, r1
 8003f90:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f92:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003f94:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	3304      	adds	r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	dbeb      	blt.n	8003f9a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003fc2:	e000      	b.n	8003fc6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003fc4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	da3f      	bge.n	8004050 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003fd0:	6939      	ldr	r1, [r7, #16]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003fe4:	6939      	ldr	r1, [r7, #16]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	3320      	adds	r3, #32
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800400e:	6939      	ldr	r1, [r7, #16]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	3328      	adds	r3, #40	@ 0x28
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004022:	6939      	ldr	r1, [r7, #16]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3324      	adds	r3, #36	@ 0x24
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004036:	6939      	ldr	r1, [r7, #16]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	332c      	adds	r3, #44	@ 0x2c
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800404a:	f3bf 8f5f 	dmb	sy
 800404e:	e002      	b.n	8004056 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004050:	f04f 33ff 	mov.w	r3, #4294967295
 8004054:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800405c:	69fb      	ldr	r3, [r7, #28]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200192ac 	.word	0x200192ac

0800406c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	@ 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800407a:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b53      	cmp	r3, #83	@ 0x53
 8004086:	d001      	beq.n	800408c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004088:	f7ff fd4e 	bl	8003b28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800408c:	4b1c      	ldr	r3, [pc, #112]	@ (8004100 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800408e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d82c      	bhi.n	80040f0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004096:	f3ef 8311 	mrs	r3, BASEPRI
 800409a:	f04f 0120 	mov.w	r1, #32
 800409e:	f381 8811 	msr	BASEPRI, r1
 80040a2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	3360      	adds	r3, #96	@ 0x60
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040de:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040e0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ee:	e002      	b.n	80040f6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	@ 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200192ac 	.word	0x200192ac

08004104 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	60fa      	str	r2, [r7, #12]
 800411a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b80      	cmp	r3, #128	@ 0x80
 8004120:	d90a      	bls.n	8004138 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004126:	e007      	b.n	8004138 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	1c53      	adds	r3, r2, #1
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1c59      	adds	r1, r3, #1
 8004132:	60f9      	str	r1, [r7, #12]
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <_EncodeStr+0x46>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1ee      	bne.n	8004128 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	b2da      	uxtb	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3307      	adds	r3, #7
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004182:	4b34      	ldr	r3, [pc, #208]	@ (8004254 <_HandleIncomingPacket+0xd8>)
 8004184:	7e1b      	ldrb	r3, [r3, #24]
 8004186:	4618      	mov	r0, r3
 8004188:	1cfb      	adds	r3, r7, #3
 800418a:	2201      	movs	r2, #1
 800418c:	4619      	mov	r1, r3
 800418e:	f7ff fded 	bl	8003d6c <SEGGER_RTT_ReadNoLock>
 8004192:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d057      	beq.n	800424a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	2b80      	cmp	r3, #128	@ 0x80
 800419e:	d031      	beq.n	8004204 <_HandleIncomingPacket+0x88>
 80041a0:	2b80      	cmp	r3, #128	@ 0x80
 80041a2:	dc40      	bgt.n	8004226 <_HandleIncomingPacket+0xaa>
 80041a4:	2b07      	cmp	r3, #7
 80041a6:	dc15      	bgt.n	80041d4 <_HandleIncomingPacket+0x58>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dd3c      	ble.n	8004226 <_HandleIncomingPacket+0xaa>
 80041ac:	3b01      	subs	r3, #1
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d839      	bhi.n	8004226 <_HandleIncomingPacket+0xaa>
 80041b2:	a201      	add	r2, pc, #4	@ (adr r2, 80041b8 <_HandleIncomingPacket+0x3c>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041db 	.word	0x080041db
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e7 	.word	0x080041e7
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	080041f3 	.word	0x080041f3
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	080041ff 	.word	0x080041ff
 80041d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80041d6:	d033      	beq.n	8004240 <_HandleIncomingPacket+0xc4>
 80041d8:	e025      	b.n	8004226 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80041da:	f000 fb29 	bl	8004830 <SEGGER_SYSVIEW_Start>
      break;
 80041de:	e034      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80041e0:	f000 fbe2 	bl	80049a8 <SEGGER_SYSVIEW_Stop>
      break;
 80041e4:	e031      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80041e6:	f000 fdbb 	bl	8004d60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80041ea:	e02e      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80041ec:	f000 fd80 	bl	8004cf0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80041f0:	e02b      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80041f2:	f000 fbff 	bl	80049f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80041f6:	e028      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80041f8:	f001 f87c 	bl	80052f4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80041fc:	e025      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80041fe:	f001 f85b 	bl	80052b8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004202:	e022      	b.n	800424a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004204:	4b13      	ldr	r3, [pc, #76]	@ (8004254 <_HandleIncomingPacket+0xd8>)
 8004206:	7e1b      	ldrb	r3, [r3, #24]
 8004208:	4618      	mov	r0, r3
 800420a:	1cfb      	adds	r3, r7, #3
 800420c:	2201      	movs	r2, #1
 800420e:	4619      	mov	r1, r3
 8004210:	f7ff fdac 	bl	8003d6c <SEGGER_RTT_ReadNoLock>
 8004214:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 ffc0 	bl	80051a4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004224:	e00e      	b.n	8004244 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	b25b      	sxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	da0c      	bge.n	8004248 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <_HandleIncomingPacket+0xd8>)
 8004230:	7e1b      	ldrb	r3, [r3, #24]
 8004232:	4618      	mov	r0, r3
 8004234:	1cfb      	adds	r3, r7, #3
 8004236:	2201      	movs	r2, #1
 8004238:	4619      	mov	r1, r3
 800423a:	f7ff fd97 	bl	8003d6c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800423e:	e003      	b.n	8004248 <_HandleIncomingPacket+0xcc>
      break;
 8004240:	bf00      	nop
 8004242:	e002      	b.n	800424a <_HandleIncomingPacket+0xce>
      break;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <_HandleIncomingPacket+0xce>
      break;
 8004248:	bf00      	nop
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2001a76c 	.word	0x2001a76c

08004258 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b08c      	sub	sp, #48	@ 0x30
 800425c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800425e:	2301      	movs	r3, #1
 8004260:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	3301      	adds	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426c:	4b32      	ldr	r3, [pc, #200]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004272:	e00b      	b.n	800428c <_TrySendOverflowPacket+0x34>
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	b2da      	uxtb	r2, r3
 8004278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427a:	1c59      	adds	r1, r3, #1
 800427c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800427e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	09db      	lsrs	r3, r3, #7
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004290:	d8f0      	bhi.n	8004274 <_TrySendOverflowPacket+0x1c>
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004298:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042a2:	4b26      	ldr	r3, [pc, #152]	@ (800433c <_TrySendOverflowPacket+0xe4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042a8:	4b23      	ldr	r3, [pc, #140]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	623b      	str	r3, [r7, #32]
 80042ba:	e00b      	b.n	80042d4 <_TrySendOverflowPacket+0x7c>
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	1c59      	adds	r1, r3, #1
 80042c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80042c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	09db      	lsrs	r3, r3, #7
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042d8:	d8f0      	bhi.n	80042bc <_TrySendOverflowPacket+0x64>
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	627a      	str	r2, [r7, #36]	@ 0x24
 80042e0:	6a3a      	ldr	r2, [r7, #32]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80042ea:	4b13      	ldr	r3, [pc, #76]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	4618      	mov	r0, r3
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	f7fb ff68 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004300:	4603      	mov	r3, r0
 8004302:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004304:	f7ff fc00 	bl	8003b08 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800430e:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004314:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	3b01      	subs	r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e004      	b.n	800432c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004322:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	3301      	adds	r3, #1
 8004328:	4a03      	ldr	r2, [pc, #12]	@ (8004338 <_TrySendOverflowPacket+0xe0>)
 800432a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800432c:	693b      	ldr	r3, [r7, #16]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3730      	adds	r7, #48	@ 0x30
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2001a76c 	.word	0x2001a76c
 800433c:	e0001004 	.word	0xe0001004

08004340 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	@ 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800434c:	4b96      	ldr	r3, [pc, #600]	@ (80045a8 <_SendPacket+0x268>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d010      	beq.n	8004376 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004354:	4b94      	ldr	r3, [pc, #592]	@ (80045a8 <_SendPacket+0x268>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8130 	beq.w	80045be <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800435e:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <_SendPacket+0x268>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d109      	bne.n	800437a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004366:	f7ff ff77 	bl	8004258 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800436a:	4b8f      	ldr	r3, [pc, #572]	@ (80045a8 <_SendPacket+0x268>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 8127 	bne.w	80045c2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004374:	e001      	b.n	800437a <_SendPacket+0x3a>
    goto Send;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <_SendPacket+0x3c>
Send:
 800437a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b1f      	cmp	r3, #31
 8004380:	d809      	bhi.n	8004396 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004382:	4b89      	ldr	r3, [pc, #548]	@ (80045a8 <_SendPacket+0x268>)
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 8118 	bne.w	80045c6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b17      	cmp	r3, #23
 800439a:	d807      	bhi.n	80043ac <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e0c4      	b.n	8004536 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80043b8:	d912      	bls.n	80043e0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	09da      	lsrs	r2, r3, #7
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	3a01      	subs	r2, #1
 80043d2:	60fa      	str	r2, [r7, #12]
 80043d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e006      	b.n	80043ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80043f2:	d807      	bhi.n	8004404 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e098      	b.n	8004536 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800440a:	d212      	bcs.n	8004432 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	09da      	lsrs	r2, r3, #7
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	3a01      	subs	r2, #1
 8004424:	60fa      	str	r2, [r7, #12]
 8004426:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e081      	b.n	8004536 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004438:	d21d      	bcs.n	8004476 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0b9a      	lsrs	r2, r3, #14
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b01      	subs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	09db      	lsrs	r3, r3, #7
 800444e:	b2db      	uxtb	r3, r3
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	3a01      	subs	r2, #1
 8004454:	60fa      	str	r2, [r7, #12]
 8004456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	3a01      	subs	r2, #1
 8004468:	60fa      	str	r2, [r7, #12]
 800446a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e05f      	b.n	8004536 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800447c:	d228      	bcs.n	80044d0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0d5a      	lsrs	r2, r3, #21
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3b01      	subs	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0b9b      	lsrs	r3, r3, #14
 8004492:	b2db      	uxtb	r3, r3
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	3a01      	subs	r2, #1
 8004498:	60fa      	str	r2, [r7, #12]
 800449a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	09db      	lsrs	r3, r3, #7
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	3a01      	subs	r2, #1
 80044ae:	60fa      	str	r2, [r7, #12]
 80044b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	3a01      	subs	r2, #1
 80044c2:	60fa      	str	r2, [r7, #12]
 80044c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e032      	b.n	8004536 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	0f1a      	lsrs	r2, r3, #28
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0d5b      	lsrs	r3, r3, #21
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	3a01      	subs	r2, #1
 80044ea:	60fa      	str	r2, [r7, #12]
 80044ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0b9b      	lsrs	r3, r3, #14
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	3a01      	subs	r2, #1
 8004500:	60fa      	str	r2, [r7, #12]
 8004502:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	09db      	lsrs	r3, r3, #7
 8004510:	b2db      	uxtb	r3, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	3a01      	subs	r2, #1
 8004516:	60fa      	str	r2, [r7, #12]
 8004518:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	3a01      	subs	r2, #1
 800452a:	60fa      	str	r2, [r7, #12]
 800452c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004536:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <_SendPacket+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800453c:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <_SendPacket+0x268>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	e00b      	b.n	8004568 <_SendPacket+0x228>
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	6279      	str	r1, [r7, #36]	@ 0x24
 800455a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	09db      	lsrs	r3, r3, #7
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b7f      	cmp	r3, #127	@ 0x7f
 800456c:	d8f0      	bhi.n	8004550 <_SendPacket+0x210>
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	627a      	str	r2, [r7, #36]	@ 0x24
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800457e:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <_SendPacket+0x268>)
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	4618      	mov	r0, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	461a      	mov	r2, r3
 800458c:	68f9      	ldr	r1, [r7, #12]
 800458e:	f7fb fe1f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004592:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004594:	f7ff fab8 	bl	8003b08 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800459e:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <_SendPacket+0x268>)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e010      	b.n	80045c8 <_SendPacket+0x288>
 80045a6:	bf00      	nop
 80045a8:	2001a76c 	.word	0x2001a76c
 80045ac:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045b0:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <_SendPacket+0x2d8>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b17      	ldr	r3, [pc, #92]	@ (8004618 <_SendPacket+0x2d8>)
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e004      	b.n	80045c8 <_SendPacket+0x288>
    goto SendDone;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <_SendPacket+0x288>
      goto SendDone;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <_SendPacket+0x288>
      goto SendDone;
 80045c6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80045c8:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <_SendPacket+0x2d8>)
 80045ca:	7e1b      	ldrb	r3, [r3, #24]
 80045cc:	4619      	mov	r1, r3
 80045ce:	4a13      	ldr	r2, [pc, #76]	@ (800461c <_SendPacket+0x2dc>)
 80045d0:	460b      	mov	r3, r1
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	440b      	add	r3, r1
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	336c      	adds	r3, #108	@ 0x6c
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b0e      	ldr	r3, [pc, #56]	@ (8004618 <_SendPacket+0x2d8>)
 80045e0:	7e1b      	ldrb	r3, [r3, #24]
 80045e2:	4618      	mov	r0, r3
 80045e4:	490d      	ldr	r1, [pc, #52]	@ (800461c <_SendPacket+0x2dc>)
 80045e6:	4603      	mov	r3, r0
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4403      	add	r3, r0
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	3370      	adds	r3, #112	@ 0x70
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d00b      	beq.n	8004610 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80045f8:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <_SendPacket+0x2d8>)
 80045fa:	789b      	ldrb	r3, [r3, #2]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <_SendPacket+0x2d8>)
 8004602:	2201      	movs	r2, #1
 8004604:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004606:	f7ff fdb9 	bl	800417c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800460a:	4b03      	ldr	r3, [pc, #12]	@ (8004618 <_SendPacket+0x2d8>)
 800460c:	2200      	movs	r2, #0
 800460e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004610:	bf00      	nop
 8004612:	3728      	adds	r7, #40	@ 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	2001a76c 	.word	0x2001a76c
 800461c:	200192ac 	.word	0x200192ac

08004620 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800462e:	2300      	movs	r3, #0
 8004630:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004634:	4917      	ldr	r1, [pc, #92]	@ (8004694 <SEGGER_SYSVIEW_Init+0x74>)
 8004636:	4818      	ldr	r0, [pc, #96]	@ (8004698 <SEGGER_SYSVIEW_Init+0x78>)
 8004638:	f7ff fc94 	bl	8003f64 <SEGGER_RTT_AllocUpBuffer>
 800463c:	4603      	mov	r3, r0
 800463e:	b2da      	uxtb	r2, r3
 8004640:	4b16      	ldr	r3, [pc, #88]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004642:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004644:	4b15      	ldr	r3, [pc, #84]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004646:	785a      	ldrb	r2, [r3, #1]
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 800464a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800464c:	4b13      	ldr	r3, [pc, #76]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 800464e:	7e1b      	ldrb	r3, [r3, #24]
 8004650:	4618      	mov	r0, r3
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2308      	movs	r3, #8
 8004658:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <SEGGER_SYSVIEW_Init+0x80>)
 800465a:	490f      	ldr	r1, [pc, #60]	@ (8004698 <SEGGER_SYSVIEW_Init+0x78>)
 800465c:	f7ff fd06 	bl	800406c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004660:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004662:	2200      	movs	r2, #0
 8004664:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004666:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <SEGGER_SYSVIEW_Init+0x84>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a0c      	ldr	r2, [pc, #48]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 800466c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800466e:	4a0b      	ldr	r2, [pc, #44]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004674:	4a09      	ldr	r2, [pc, #36]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800467a:	4a08      	ldr	r2, [pc, #32]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004680:	4a06      	ldr	r2, [pc, #24]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004686:	4b05      	ldr	r3, [pc, #20]	@ (800469c <SEGGER_SYSVIEW_Init+0x7c>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20019764 	.word	0x20019764
 8004698:	08005edc 	.word	0x08005edc
 800469c:	2001a76c 	.word	0x2001a76c
 80046a0:	2001a764 	.word	0x2001a764
 80046a4:	e0001004 	.word	0xe0001004

080046a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80046b0:	4a04      	ldr	r2, [pc, #16]	@ (80046c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6113      	str	r3, [r2, #16]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2001a76c 	.word	0x2001a76c

080046c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046d0:	f3ef 8311 	mrs	r3, BASEPRI
 80046d4:	f04f 0120 	mov.w	r1, #32
 80046d8:	f381 8811 	msr	BASEPRI, r1
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	4808      	ldr	r0, [pc, #32]	@ (8004700 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80046e0:	f7ff fd40 	bl	8004164 <_PreparePacket>
 80046e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68b8      	ldr	r0, [r7, #8]
 80046ec:	f7ff fe28 	bl	8004340 <_SendPacket>
  RECORD_END();
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f383 8811 	msr	BASEPRI, r3
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	2001a79c 	.word	0x2001a79c

08004704 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800470e:	f3ef 8311 	mrs	r3, BASEPRI
 8004712:	f04f 0120 	mov.w	r1, #32
 8004716:	f381 8811 	msr	BASEPRI, r1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	4816      	ldr	r0, [pc, #88]	@ (8004778 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800471e:	f7ff fd21 	bl	8004164 <_PreparePacket>
 8004722:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e00b      	b.n	800474a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	1c59      	adds	r1, r3, #1
 800473a:	61f9      	str	r1, [r7, #28]
 800473c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	09db      	lsrs	r3, r3, #7
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b7f      	cmp	r3, #127	@ 0x7f
 800474e:	d8f0      	bhi.n	8004732 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	61fa      	str	r2, [r7, #28]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	6938      	ldr	r0, [r7, #16]
 8004766:	f7ff fdeb 	bl	8004340 <_SendPacket>
  RECORD_END();
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f383 8811 	msr	BASEPRI, r3
}
 8004770:	bf00      	nop
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2001a79c 	.word	0x2001a79c

0800477c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	@ 0x30
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004788:	f3ef 8311 	mrs	r3, BASEPRI
 800478c:	f04f 0120 	mov.w	r1, #32
 8004790:	f381 8811 	msr	BASEPRI, r1
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	4825      	ldr	r0, [pc, #148]	@ (800482c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004798:	f7ff fce4 	bl	8004164 <_PreparePacket>
 800479c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047aa:	e00b      	b.n	80047c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80047b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	09db      	lsrs	r3, r3, #7
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80047c8:	d8f0      	bhi.n	80047ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80047ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	e00b      	b.n	80047fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80047ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	623b      	str	r3, [r7, #32]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004800:	d8f0      	bhi.n	80047e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	627a      	str	r2, [r7, #36]	@ 0x24
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	6979      	ldr	r1, [r7, #20]
 8004816:	69b8      	ldr	r0, [r7, #24]
 8004818:	f7ff fd92 	bl	8004340 <_SendPacket>
  RECORD_END();
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f383 8811 	msr	BASEPRI, r3
}
 8004822:	bf00      	nop
 8004824:	3730      	adds	r7, #48	@ 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2001a79c 	.word	0x2001a79c

08004830 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	@ 0x30
 8004834:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004836:	4b59      	ldr	r3, [pc, #356]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800483c:	f3ef 8311 	mrs	r3, BASEPRI
 8004840:	f04f 0120 	mov.w	r1, #32
 8004844:	f381 8811 	msr	BASEPRI, r1
 8004848:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800484a:	4b54      	ldr	r3, [pc, #336]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	220a      	movs	r2, #10
 8004850:	4953      	ldr	r1, [pc, #332]	@ (80049a0 <SEGGER_SYSVIEW_Start+0x170>)
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fcbc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800485e:	f7ff f953 	bl	8003b08 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004862:	200a      	movs	r0, #10
 8004864:	f7ff ff30 	bl	80046c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004868:	f3ef 8311 	mrs	r3, BASEPRI
 800486c:	f04f 0120 	mov.w	r1, #32
 8004870:	f381 8811 	msr	BASEPRI, r1
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	484b      	ldr	r0, [pc, #300]	@ (80049a4 <SEGGER_SYSVIEW_Start+0x174>)
 8004878:	f7ff fc74 	bl	8004164 <_PreparePacket>
 800487c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004886:	4b45      	ldr	r3, [pc, #276]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800488c:	e00b      	b.n	80048a6 <SEGGER_SYSVIEW_Start+0x76>
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	b2da      	uxtb	r2, r3
 8004892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004894:	1c59      	adds	r1, r3, #1
 8004896:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004898:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	09db      	lsrs	r3, r3, #7
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048aa:	d8f0      	bhi.n	800488e <SEGGER_SYSVIEW_Start+0x5e>
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	4b36      	ldr	r3, [pc, #216]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	623b      	str	r3, [r7, #32]
 80048c6:	e00b      	b.n	80048e0 <SEGGER_SYSVIEW_Start+0xb0>
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	1c59      	adds	r1, r3, #1
 80048d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80048d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	09db      	lsrs	r3, r3, #7
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80048e4:	d8f0      	bhi.n	80048c8 <SEGGER_SYSVIEW_Start+0x98>
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	4b28      	ldr	r3, [pc, #160]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	e00b      	b.n	800491a <SEGGER_SYSVIEW_Start+0xea>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	1c59      	adds	r1, r3, #1
 800490a:	61f9      	str	r1, [r7, #28]
 800490c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	09db      	lsrs	r3, r3, #7
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b7f      	cmp	r3, #127	@ 0x7f
 800491e:	d8f0      	bhi.n	8004902 <SEGGER_SYSVIEW_Start+0xd2>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	61fa      	str	r2, [r7, #28]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	e00b      	b.n	8004952 <SEGGER_SYSVIEW_Start+0x122>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	6179      	str	r1, [r7, #20]
 8004944:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	09db      	lsrs	r3, r3, #7
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b7f      	cmp	r3, #127	@ 0x7f
 8004956:	d8f0      	bhi.n	800493a <SEGGER_SYSVIEW_Start+0x10a>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	617a      	str	r2, [r7, #20]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004968:	2218      	movs	r2, #24
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fce7 	bl	8004340 <_SendPacket>
      RECORD_END();
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004978:	4b08      	ldr	r3, [pc, #32]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004980:	4b06      	ldr	r3, [pc, #24]	@ (800499c <SEGGER_SYSVIEW_Start+0x16c>)
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004986:	f000 f9eb 	bl	8004d60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800498a:	f000 f9b1 	bl	8004cf0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800498e:	f000 fcb1 	bl	80052f4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004992:	bf00      	nop
 8004994:	3730      	adds	r7, #48	@ 0x30
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	2001a76c 	.word	0x2001a76c
 80049a0:	08005f18 	.word	0x08005f18
 80049a4:	2001a79c 	.word	0x2001a79c

080049a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049ae:	f3ef 8311 	mrs	r3, BASEPRI
 80049b2:	f04f 0120 	mov.w	r1, #32
 80049b6:	f381 8811 	msr	BASEPRI, r1
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	480b      	ldr	r0, [pc, #44]	@ (80049ec <SEGGER_SYSVIEW_Stop+0x44>)
 80049be:	f7ff fbd1 	bl	8004164 <_PreparePacket>
 80049c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80049c4:	4b0a      	ldr	r3, [pc, #40]	@ (80049f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80049cc:	220b      	movs	r2, #11
 80049ce:	6839      	ldr	r1, [r7, #0]
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f7ff fcb5 	bl	8004340 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f383 8811 	msr	BASEPRI, r3
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	2001a79c 	.word	0x2001a79c
 80049f0:	2001a76c 	.word	0x2001a76c

080049f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	@ 0x30
 80049f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049fa:	f3ef 8311 	mrs	r3, BASEPRI
 80049fe:	f04f 0120 	mov.w	r1, #32
 8004a02:	f381 8811 	msr	BASEPRI, r1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	4845      	ldr	r0, [pc, #276]	@ (8004b20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004a0a:	f7ff fbab 	bl	8004164 <_PreparePacket>
 8004a0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a18:	4b42      	ldr	r3, [pc, #264]	@ (8004b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1e:	e00b      	b.n	8004a38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004a2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	09db      	lsrs	r3, r3, #7
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a3c:	d8f0      	bhi.n	8004a20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a52:	4b34      	ldr	r3, [pc, #208]	@ (8004b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	e00b      	b.n	8004a72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	09db      	lsrs	r3, r3, #7
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a76:	d8f0      	bhi.n	8004a5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	e00b      	b.n	8004aac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	1c59      	adds	r1, r3, #1
 8004a9c:	61f9      	str	r1, [r7, #28]
 8004a9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	09db      	lsrs	r3, r3, #7
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ab0:	d8f0      	bhi.n	8004a94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	61fa      	str	r2, [r7, #28]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e00b      	b.n	8004ae4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	6179      	str	r1, [r7, #20]
 8004ad6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	09db      	lsrs	r3, r3, #7
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ae8:	d8f0      	bhi.n	8004acc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	617a      	str	r2, [r7, #20]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004afa:	2218      	movs	r2, #24
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	68b8      	ldr	r0, [r7, #8]
 8004b00:	f7ff fc1e 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004b12:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	4798      	blx	r3
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3730      	adds	r7, #48	@ 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2001a79c 	.word	0x2001a79c
 8004b24:	2001a76c 	.word	0x2001a76c

08004b28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b092      	sub	sp, #72	@ 0x48
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004b30:	f3ef 8311 	mrs	r3, BASEPRI
 8004b34:	f04f 0120 	mov.w	r1, #32
 8004b38:	f381 8811 	msr	BASEPRI, r1
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	486a      	ldr	r0, [pc, #424]	@ (8004ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004b40:	f7ff fb10 	bl	8004164 <_PreparePacket>
 8004b44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b66      	ldr	r3, [pc, #408]	@ (8004cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b5a:	e00b      	b.n	8004b74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b62:	1c59      	adds	r1, r3, #1
 8004b64:	6479      	str	r1, [r7, #68]	@ 0x44
 8004b66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b70:	09db      	lsrs	r3, r3, #7
 8004b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b78:	d8f0      	bhi.n	8004b5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b94:	e00b      	b.n	8004bae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004ba0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	09db      	lsrs	r3, r3, #7
 8004bac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bb2:	d8f0      	bhi.n	8004b96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff fa99 	bl	8004104 <_EncodeStr>
 8004bd2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004bd4:	2209      	movs	r2, #9
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6938      	ldr	r0, [r7, #16]
 8004bda:	f7ff fbb1 	bl	8004340 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b40      	ldr	r3, [pc, #256]	@ (8004cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	e00b      	b.n	8004c0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	6379      	str	r1, [r7, #52]	@ 0x34
 8004bfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	09db      	lsrs	r3, r3, #7
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c10:	d8f0      	bhi.n	8004bf4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2c:	e00b      	b.n	8004c46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c42:	09db      	lsrs	r3, r3, #7
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c4a:	d8f0      	bhi.n	8004c2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	e00b      	b.n	8004c80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	09db      	lsrs	r3, r3, #7
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c84:	d8f0      	bhi.n	8004c68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	e00b      	b.n	8004cba <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	61f9      	str	r1, [r7, #28]
 8004cac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	09db      	lsrs	r3, r3, #7
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cbe:	d8f0      	bhi.n	8004ca2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004cd0:	2215      	movs	r2, #21
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	6938      	ldr	r0, [r7, #16]
 8004cd6:	f7ff fb33 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f383 8811 	msr	BASEPRI, r3
}
 8004ce0:	bf00      	nop
 8004ce2:	3748      	adds	r7, #72	@ 0x48
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	2001a79c 	.word	0x2001a79c
 8004cec:	2001a76c 	.word	0x2001a76c

08004cf0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004cf4:	4b07      	ldr	r3, [pc, #28]	@ (8004d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004d06:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4798      	blx	r3
  }
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	2001a76c 	.word	0x2001a76c

08004d18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d20:	f3ef 8311 	mrs	r3, BASEPRI
 8004d24:	f04f 0120 	mov.w	r1, #32
 8004d28:	f381 8811 	msr	BASEPRI, r1
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	480b      	ldr	r0, [pc, #44]	@ (8004d5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004d30:	f7ff fa18 	bl	8004164 <_PreparePacket>
 8004d34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d36:	2280      	movs	r2, #128	@ 0x80
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	6938      	ldr	r0, [r7, #16]
 8004d3c:	f7ff f9e2 	bl	8004104 <_EncodeStr>
 8004d40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004d42:	220e      	movs	r2, #14
 8004d44:	68f9      	ldr	r1, [r7, #12]
 8004d46:	6938      	ldr	r0, [r7, #16]
 8004d48:	f7ff fafa 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f383 8811 	msr	BASEPRI, r3
}
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	2001a79c 	.word	0x2001a79c

08004d60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004d66:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01a      	beq.n	8004da4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004d6e:	4b13      	ldr	r3, [pc, #76]	@ (8004dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004d78:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4798      	blx	r3
 8004d80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d84:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	000a      	movs	r2, r1
 8004d94:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d96:	4613      	mov	r3, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	200d      	movs	r0, #13
 8004d9e:	f7ff fced 	bl	800477c <SEGGER_SYSVIEW_RecordU32x2>
 8004da2:	e006      	b.n	8004db2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	200c      	movs	r0, #12
 8004dac:	f7ff fcaa 	bl	8004704 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	2001a76c 	.word	0x2001a76c
 8004dc0:	e0001004 	.word	0xe0001004

08004dc4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dca:	f3ef 8311 	mrs	r3, BASEPRI
 8004dce:	f04f 0120 	mov.w	r1, #32
 8004dd2:	f381 8811 	msr	BASEPRI, r1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	4819      	ldr	r0, [pc, #100]	@ (8004e40 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004dda:	f7ff f9c3 	bl	8004164 <_PreparePacket>
 8004dde:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004de4:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e00b      	b.n	8004e10 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	6179      	str	r1, [r7, #20]
 8004e02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	09db      	lsrs	r3, r3, #7
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e14:	d8f0      	bhi.n	8004df8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	617a      	str	r2, [r7, #20]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004e26:	2202      	movs	r2, #2
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f7ff fa88 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f383 8811 	msr	BASEPRI, r3
}
 8004e36:	bf00      	nop
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2001a79c 	.word	0x2001a79c
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e52:	f04f 0120 	mov.w	r1, #32
 8004e56:	f381 8811 	msr	BASEPRI, r1
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	4807      	ldr	r0, [pc, #28]	@ (8004e7c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004e5e:	f7ff f981 	bl	8004164 <_PreparePacket>
 8004e62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004e64:	2203      	movs	r2, #3
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	6838      	ldr	r0, [r7, #0]
 8004e6a:	f7ff fa69 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f383 8811 	msr	BASEPRI, r3
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2001a79c 	.word	0x2001a79c

08004e80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e86:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8a:	f04f 0120 	mov.w	r1, #32
 8004e8e:	f381 8811 	msr	BASEPRI, r1
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	4807      	ldr	r0, [pc, #28]	@ (8004eb4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004e96:	f7ff f965 	bl	8004164 <_PreparePacket>
 8004e9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004e9c:	2212      	movs	r2, #18
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6838      	ldr	r0, [r7, #0]
 8004ea2:	f7ff fa4d 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f383 8811 	msr	BASEPRI, r3
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	2001a79c 	.word	0x2001a79c

08004eb8 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec4:	f04f 0120 	mov.w	r1, #32
 8004ec8:	f381 8811 	msr	BASEPRI, r1
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	4817      	ldr	r0, [pc, #92]	@ (8004f2c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8004ed0:	f7ff f948 	bl	8004164 <_PreparePacket>
 8004ed4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e00b      	b.n	8004efc <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	61f9      	str	r1, [r7, #28]
 8004eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	09db      	lsrs	r3, r3, #7
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f00:	d8f0      	bhi.n	8004ee4 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	61fa      	str	r2, [r7, #28]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004f12:	221c      	movs	r2, #28
 8004f14:	68f9      	ldr	r1, [r7, #12]
 8004f16:	6938      	ldr	r0, [r7, #16]
 8004f18:	f7ff fa12 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f383 8811 	msr	BASEPRI, r3
}
 8004f22:	bf00      	nop
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2001a79c 	.word	0x2001a79c

08004f30 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	@ 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3e:	f04f 0120 	mov.w	r1, #32
 8004f42:	f381 8811 	msr	BASEPRI, r1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	4824      	ldr	r0, [pc, #144]	@ (8004fdc <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8004f4a:	f7ff f90b 	bl	8004164 <_PreparePacket>
 8004f4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	e00b      	b.n	8004f76 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	1c59      	adds	r1, r3, #1
 8004f66:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	09db      	lsrs	r3, r3, #7
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7a:	d8f0      	bhi.n	8004f5e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f82:	6a3a      	ldr	r2, [r7, #32]
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	e00b      	b.n	8004fae <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1c59      	adds	r1, r3, #1
 8004f9e:	61f9      	str	r1, [r7, #28]
 8004fa0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	09db      	lsrs	r3, r3, #7
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fb2:	d8f0      	bhi.n	8004f96 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	61fa      	str	r2, [r7, #28]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004fc4:	221c      	movs	r2, #28
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	6938      	ldr	r0, [r7, #16]
 8004fca:	f7ff f9b9 	bl	8004340 <_SendPacket>
  RECORD_END();
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f383 8811 	msr	BASEPRI, r3
}
 8004fd4:	bf00      	nop
 8004fd6:	3728      	adds	r7, #40	@ 0x28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	2001a79c 	.word	0x2001a79c

08004fe0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fea:	f04f 0120 	mov.w	r1, #32
 8004fee:	f381 8811 	msr	BASEPRI, r1
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	4807      	ldr	r0, [pc, #28]	@ (8005014 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ff6:	f7ff f8b5 	bl	8004164 <_PreparePacket>
 8004ffa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004ffc:	2211      	movs	r2, #17
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6838      	ldr	r0, [r7, #0]
 8005002:	f7ff f99d 	bl	8004340 <_SendPacket>
  RECORD_END();
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f383 8811 	msr	BASEPRI, r3
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	2001a79c 	.word	0x2001a79c

08005018 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005020:	f3ef 8311 	mrs	r3, BASEPRI
 8005024:	f04f 0120 	mov.w	r1, #32
 8005028:	f381 8811 	msr	BASEPRI, r1
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	4819      	ldr	r0, [pc, #100]	@ (8005094 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005030:	f7ff f898 	bl	8004164 <_PreparePacket>
 8005034:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800503a:	4b17      	ldr	r3, [pc, #92]	@ (8005098 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	e00b      	b.n	8005066 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	61f9      	str	r1, [r7, #28]
 8005058:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b7f      	cmp	r3, #127	@ 0x7f
 800506a:	d8f0      	bhi.n	800504e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	61fa      	str	r2, [r7, #28]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800507c:	2208      	movs	r2, #8
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	6938      	ldr	r0, [r7, #16]
 8005082:	f7ff f95d 	bl	8004340 <_SendPacket>
  RECORD_END();
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f383 8811 	msr	BASEPRI, r3
}
 800508c:	bf00      	nop
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2001a79c 	.word	0x2001a79c
 8005098:	2001a76c 	.word	0x2001a76c

0800509c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050a4:	f3ef 8311 	mrs	r3, BASEPRI
 80050a8:	f04f 0120 	mov.w	r1, #32
 80050ac:	f381 8811 	msr	BASEPRI, r1
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	4819      	ldr	r0, [pc, #100]	@ (8005118 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80050b4:	f7ff f856 	bl	8004164 <_PreparePacket>
 80050b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050be:	4b17      	ldr	r3, [pc, #92]	@ (800511c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e00b      	b.n	80050ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	1c59      	adds	r1, r3, #1
 80050da:	61f9      	str	r1, [r7, #28]
 80050dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	09db      	lsrs	r3, r3, #7
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ee:	d8f0      	bhi.n	80050d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	61fa      	str	r2, [r7, #28]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005100:	2204      	movs	r2, #4
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6938      	ldr	r0, [r7, #16]
 8005106:	f7ff f91b 	bl	8004340 <_SendPacket>
  RECORD_END();
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f383 8811 	msr	BASEPRI, r3
}
 8005110:	bf00      	nop
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2001a79c 	.word	0x2001a79c
 800511c:	2001a76c 	.word	0x2001a76c

08005120 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005128:	f3ef 8311 	mrs	r3, BASEPRI
 800512c:	f04f 0120 	mov.w	r1, #32
 8005130:	f381 8811 	msr	BASEPRI, r1
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	4819      	ldr	r0, [pc, #100]	@ (800519c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005138:	f7ff f814 	bl	8004164 <_PreparePacket>
 800513c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005142:	4b17      	ldr	r3, [pc, #92]	@ (80051a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e00b      	b.n	800516e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	61f9      	str	r1, [r7, #28]
 8005160:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	09db      	lsrs	r3, r3, #7
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b7f      	cmp	r3, #127	@ 0x7f
 8005172:	d8f0      	bhi.n	8005156 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	61fa      	str	r2, [r7, #28]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005184:	2206      	movs	r2, #6
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	6938      	ldr	r0, [r7, #16]
 800518a:	f7ff f8d9 	bl	8004340 <_SendPacket>
  RECORD_END();
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f383 8811 	msr	BASEPRI, r3
}
 8005194:	bf00      	nop
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	2001a79c 	.word	0x2001a79c
 80051a0:	2001a76c 	.word	0x2001a76c

080051a4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	@ 0x30
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80051ae:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d077      	beq.n	80052a6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80051b6:	4b3e      	ldr	r3, [pc, #248]	@ (80052b0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051bc:	2300      	movs	r3, #0
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c0:	e008      	b.n	80051d4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	3301      	adds	r3, #1
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d8:	429a      	cmp	r2, r3
 80051da:	d3f2      	bcc.n	80051c2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80051dc:	e000      	b.n	80051e0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80051de:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d055      	beq.n	8005292 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051e6:	f3ef 8311 	mrs	r3, BASEPRI
 80051ea:	f04f 0120 	mov.w	r1, #32
 80051ee:	f381 8811 	msr	BASEPRI, r1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	482f      	ldr	r0, [pc, #188]	@ (80052b4 <SEGGER_SYSVIEW_SendModule+0x110>)
 80051f6:	f7fe ffb5 	bl	8004164 <_PreparePacket>
 80051fa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	623b      	str	r3, [r7, #32]
 8005208:	e00b      	b.n	8005222 <SEGGER_SYSVIEW_SendModule+0x7e>
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	1c59      	adds	r1, r3, #1
 8005212:	6279      	str	r1, [r7, #36]	@ 0x24
 8005214:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	09db      	lsrs	r3, r3, #7
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2b7f      	cmp	r3, #127	@ 0x7f
 8005226:	d8f0      	bhi.n	800520a <SEGGER_SYSVIEW_SendModule+0x66>
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	627a      	str	r2, [r7, #36]	@ 0x24
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e00b      	b.n	800525c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	61f9      	str	r1, [r7, #28]
 800524e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	09db      	lsrs	r3, r3, #7
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005260:	d8f0      	bhi.n	8005244 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	61fa      	str	r2, [r7, #28]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2280      	movs	r2, #128	@ 0x80
 8005278:	4619      	mov	r1, r3
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7fe ff42 	bl	8004104 <_EncodeStr>
 8005280:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005282:	2216      	movs	r2, #22
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f7ff f85a 	bl	8004340 <_SendPacket>
      RECORD_END();
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <SEGGER_SYSVIEW_SendModule+0x102>
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4798      	blx	r3
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3730      	adds	r7, #48	@ 0x30
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	2001a794 	.word	0x2001a794
 80052b4:	2001a79c 	.word	0x2001a79c

080052b8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00f      	beq.n	80052e6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052c6:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f2      	bne.n	80052cc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2001a794 	.word	0x2001a794

080052f4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80052fa:	f3ef 8311 	mrs	r3, BASEPRI
 80052fe:	f04f 0120 	mov.w	r1, #32
 8005302:	f381 8811 	msr	BASEPRI, r1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	4817      	ldr	r0, [pc, #92]	@ (8005368 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800530a:	f7fe ff2b 	bl	8004164 <_PreparePacket>
 800530e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	4b14      	ldr	r3, [pc, #80]	@ (800536c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e00b      	b.n	8005338 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	6179      	str	r1, [r7, #20]
 800532a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b7f      	cmp	r3, #127	@ 0x7f
 800533c:	d8f0      	bhi.n	8005320 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	617a      	str	r2, [r7, #20]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800534e:	221b      	movs	r2, #27
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f7fe fff4 	bl	8004340 <_SendPacket>
  RECORD_END();
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2001a79c 	.word	0x2001a79c
 800536c:	2001a798 	.word	0x2001a798

08005370 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	@ 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005378:	f3ef 8311 	mrs	r3, BASEPRI
 800537c:	f04f 0120 	mov.w	r1, #32
 8005380:	f381 8811 	msr	BASEPRI, r1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	4827      	ldr	r0, [pc, #156]	@ (8005424 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005388:	f7fe feec 	bl	8004164 <_PreparePacket>
 800538c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800538e:	2280      	movs	r2, #128	@ 0x80
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	6938      	ldr	r0, [r7, #16]
 8005394:	f7fe feb6 	bl	8004104 <_EncodeStr>
 8005398:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
 800539e:	2301      	movs	r3, #1
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	e00b      	b.n	80053bc <SEGGER_SYSVIEW_Warn+0x4c>
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	1c59      	adds	r1, r3, #1
 80053ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80053ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	09db      	lsrs	r3, r3, #7
 80053ba:	623b      	str	r3, [r7, #32]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	2b7f      	cmp	r3, #127	@ 0x7f
 80053c0:	d8f0      	bhi.n	80053a4 <SEGGER_SYSVIEW_Warn+0x34>
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	e00b      	b.n	80053f4 <SEGGER_SYSVIEW_Warn+0x84>
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1c59      	adds	r1, r3, #1
 80053e4:	61f9      	str	r1, [r7, #28]
 80053e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	09db      	lsrs	r3, r3, #7
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053f8:	d8f0      	bhi.n	80053dc <SEGGER_SYSVIEW_Warn+0x6c>
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	61fa      	str	r2, [r7, #28]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800540a:	221a      	movs	r2, #26
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	6938      	ldr	r0, [r7, #16]
 8005410:	f7fe ff96 	bl	8004340 <_SendPacket>
  RECORD_END();
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f383 8811 	msr	BASEPRI, r3
}
 800541a:	bf00      	nop
 800541c:	3728      	adds	r7, #40	@ 0x28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	2001a79c 	.word	0x2001a79c

08005428 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	2000      	movs	r0, #0
 800543c:	f7fe fd6c 	bl	8003f18 <SEGGER_RTT_Write>
  return len;
 8005440:	683b      	ldr	r3, [r7, #0]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <std>:
 800544c:	2300      	movs	r3, #0
 800544e:	b510      	push	{r4, lr}
 8005450:	4604      	mov	r4, r0
 8005452:	e9c0 3300 	strd	r3, r3, [r0]
 8005456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800545a:	6083      	str	r3, [r0, #8]
 800545c:	8181      	strh	r1, [r0, #12]
 800545e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005460:	81c2      	strh	r2, [r0, #14]
 8005462:	6183      	str	r3, [r0, #24]
 8005464:	4619      	mov	r1, r3
 8005466:	2208      	movs	r2, #8
 8005468:	305c      	adds	r0, #92	@ 0x5c
 800546a:	f000 f9f7 	bl	800585c <memset>
 800546e:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <std+0x58>)
 8005470:	6263      	str	r3, [r4, #36]	@ 0x24
 8005472:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <std+0x5c>)
 8005474:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005476:	4b0d      	ldr	r3, [pc, #52]	@ (80054ac <std+0x60>)
 8005478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <std+0x64>)
 800547c:	6323      	str	r3, [r4, #48]	@ 0x30
 800547e:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <std+0x68>)
 8005480:	6224      	str	r4, [r4, #32]
 8005482:	429c      	cmp	r4, r3
 8005484:	d006      	beq.n	8005494 <std+0x48>
 8005486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800548a:	4294      	cmp	r4, r2
 800548c:	d002      	beq.n	8005494 <std+0x48>
 800548e:	33d0      	adds	r3, #208	@ 0xd0
 8005490:	429c      	cmp	r4, r3
 8005492:	d105      	bne.n	80054a0 <std+0x54>
 8005494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549c:	f000 ba3e 	b.w	800591c <__retarget_lock_init_recursive>
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	bf00      	nop
 80054a4:	0800568d 	.word	0x0800568d
 80054a8:	080056af 	.word	0x080056af
 80054ac:	080056e7 	.word	0x080056e7
 80054b0:	0800570b 	.word	0x0800570b
 80054b4:	2001a880 	.word	0x2001a880

080054b8 <stdio_exit_handler>:
 80054b8:	4a02      	ldr	r2, [pc, #8]	@ (80054c4 <stdio_exit_handler+0xc>)
 80054ba:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <stdio_exit_handler+0x10>)
 80054bc:	4803      	ldr	r0, [pc, #12]	@ (80054cc <stdio_exit_handler+0x14>)
 80054be:	f000 b869 	b.w	8005594 <_fwalk_sglue>
 80054c2:	bf00      	nop
 80054c4:	20000014 	.word	0x20000014
 80054c8:	08005c39 	.word	0x08005c39
 80054cc:	20000024 	.word	0x20000024

080054d0 <cleanup_stdio>:
 80054d0:	6841      	ldr	r1, [r0, #4]
 80054d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005504 <cleanup_stdio+0x34>)
 80054d4:	4299      	cmp	r1, r3
 80054d6:	b510      	push	{r4, lr}
 80054d8:	4604      	mov	r4, r0
 80054da:	d001      	beq.n	80054e0 <cleanup_stdio+0x10>
 80054dc:	f000 fbac 	bl	8005c38 <_fflush_r>
 80054e0:	68a1      	ldr	r1, [r4, #8]
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <cleanup_stdio+0x38>)
 80054e4:	4299      	cmp	r1, r3
 80054e6:	d002      	beq.n	80054ee <cleanup_stdio+0x1e>
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 fba5 	bl	8005c38 <_fflush_r>
 80054ee:	68e1      	ldr	r1, [r4, #12]
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <cleanup_stdio+0x3c>)
 80054f2:	4299      	cmp	r1, r3
 80054f4:	d004      	beq.n	8005500 <cleanup_stdio+0x30>
 80054f6:	4620      	mov	r0, r4
 80054f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fc:	f000 bb9c 	b.w	8005c38 <_fflush_r>
 8005500:	bd10      	pop	{r4, pc}
 8005502:	bf00      	nop
 8005504:	2001a880 	.word	0x2001a880
 8005508:	2001a8e8 	.word	0x2001a8e8
 800550c:	2001a950 	.word	0x2001a950

08005510 <global_stdio_init.part.0>:
 8005510:	b510      	push	{r4, lr}
 8005512:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <global_stdio_init.part.0+0x30>)
 8005514:	4c0b      	ldr	r4, [pc, #44]	@ (8005544 <global_stdio_init.part.0+0x34>)
 8005516:	4a0c      	ldr	r2, [pc, #48]	@ (8005548 <global_stdio_init.part.0+0x38>)
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	4620      	mov	r0, r4
 800551c:	2200      	movs	r2, #0
 800551e:	2104      	movs	r1, #4
 8005520:	f7ff ff94 	bl	800544c <std>
 8005524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005528:	2201      	movs	r2, #1
 800552a:	2109      	movs	r1, #9
 800552c:	f7ff ff8e 	bl	800544c <std>
 8005530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005534:	2202      	movs	r2, #2
 8005536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800553a:	2112      	movs	r1, #18
 800553c:	f7ff bf86 	b.w	800544c <std>
 8005540:	2001a9b8 	.word	0x2001a9b8
 8005544:	2001a880 	.word	0x2001a880
 8005548:	080054b9 	.word	0x080054b9

0800554c <__sfp_lock_acquire>:
 800554c:	4801      	ldr	r0, [pc, #4]	@ (8005554 <__sfp_lock_acquire+0x8>)
 800554e:	f000 b9e6 	b.w	800591e <__retarget_lock_acquire_recursive>
 8005552:	bf00      	nop
 8005554:	2001a9c1 	.word	0x2001a9c1

08005558 <__sfp_lock_release>:
 8005558:	4801      	ldr	r0, [pc, #4]	@ (8005560 <__sfp_lock_release+0x8>)
 800555a:	f000 b9e1 	b.w	8005920 <__retarget_lock_release_recursive>
 800555e:	bf00      	nop
 8005560:	2001a9c1 	.word	0x2001a9c1

08005564 <__sinit>:
 8005564:	b510      	push	{r4, lr}
 8005566:	4604      	mov	r4, r0
 8005568:	f7ff fff0 	bl	800554c <__sfp_lock_acquire>
 800556c:	6a23      	ldr	r3, [r4, #32]
 800556e:	b11b      	cbz	r3, 8005578 <__sinit+0x14>
 8005570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005574:	f7ff bff0 	b.w	8005558 <__sfp_lock_release>
 8005578:	4b04      	ldr	r3, [pc, #16]	@ (800558c <__sinit+0x28>)
 800557a:	6223      	str	r3, [r4, #32]
 800557c:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <__sinit+0x2c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f5      	bne.n	8005570 <__sinit+0xc>
 8005584:	f7ff ffc4 	bl	8005510 <global_stdio_init.part.0>
 8005588:	e7f2      	b.n	8005570 <__sinit+0xc>
 800558a:	bf00      	nop
 800558c:	080054d1 	.word	0x080054d1
 8005590:	2001a9b8 	.word	0x2001a9b8

08005594 <_fwalk_sglue>:
 8005594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005598:	4607      	mov	r7, r0
 800559a:	4688      	mov	r8, r1
 800559c:	4614      	mov	r4, r2
 800559e:	2600      	movs	r6, #0
 80055a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055a4:	f1b9 0901 	subs.w	r9, r9, #1
 80055a8:	d505      	bpl.n	80055b6 <_fwalk_sglue+0x22>
 80055aa:	6824      	ldr	r4, [r4, #0]
 80055ac:	2c00      	cmp	r4, #0
 80055ae:	d1f7      	bne.n	80055a0 <_fwalk_sglue+0xc>
 80055b0:	4630      	mov	r0, r6
 80055b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d907      	bls.n	80055cc <_fwalk_sglue+0x38>
 80055bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055c0:	3301      	adds	r3, #1
 80055c2:	d003      	beq.n	80055cc <_fwalk_sglue+0x38>
 80055c4:	4629      	mov	r1, r5
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c0      	blx	r8
 80055ca:	4306      	orrs	r6, r0
 80055cc:	3568      	adds	r5, #104	@ 0x68
 80055ce:	e7e9      	b.n	80055a4 <_fwalk_sglue+0x10>

080055d0 <_puts_r>:
 80055d0:	6a03      	ldr	r3, [r0, #32]
 80055d2:	b570      	push	{r4, r5, r6, lr}
 80055d4:	6884      	ldr	r4, [r0, #8]
 80055d6:	4605      	mov	r5, r0
 80055d8:	460e      	mov	r6, r1
 80055da:	b90b      	cbnz	r3, 80055e0 <_puts_r+0x10>
 80055dc:	f7ff ffc2 	bl	8005564 <__sinit>
 80055e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055e2:	07db      	lsls	r3, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_puts_r+0x22>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	0598      	lsls	r0, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_puts_r+0x22>
 80055ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055ee:	f000 f996 	bl	800591e <__retarget_lock_acquire_recursive>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	0719      	lsls	r1, r3, #28
 80055f6:	d502      	bpl.n	80055fe <_puts_r+0x2e>
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d135      	bne.n	800566a <_puts_r+0x9a>
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f8c5 	bl	8005790 <__swsetup_r>
 8005606:	b380      	cbz	r0, 800566a <_puts_r+0x9a>
 8005608:	f04f 35ff 	mov.w	r5, #4294967295
 800560c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800560e:	07da      	lsls	r2, r3, #31
 8005610:	d405      	bmi.n	800561e <_puts_r+0x4e>
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	059b      	lsls	r3, r3, #22
 8005616:	d402      	bmi.n	800561e <_puts_r+0x4e>
 8005618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800561a:	f000 f981 	bl	8005920 <__retarget_lock_release_recursive>
 800561e:	4628      	mov	r0, r5
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	2b00      	cmp	r3, #0
 8005624:	da04      	bge.n	8005630 <_puts_r+0x60>
 8005626:	69a2      	ldr	r2, [r4, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	dc17      	bgt.n	800565c <_puts_r+0x8c>
 800562c:	290a      	cmp	r1, #10
 800562e:	d015      	beq.n	800565c <_puts_r+0x8c>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	6022      	str	r2, [r4, #0]
 8005636:	7019      	strb	r1, [r3, #0]
 8005638:	68a3      	ldr	r3, [r4, #8]
 800563a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800563e:	3b01      	subs	r3, #1
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	2900      	cmp	r1, #0
 8005644:	d1ed      	bne.n	8005622 <_puts_r+0x52>
 8005646:	2b00      	cmp	r3, #0
 8005648:	da11      	bge.n	800566e <_puts_r+0x9e>
 800564a:	4622      	mov	r2, r4
 800564c:	210a      	movs	r1, #10
 800564e:	4628      	mov	r0, r5
 8005650:	f000 f85f 	bl	8005712 <__swbuf_r>
 8005654:	3001      	adds	r0, #1
 8005656:	d0d7      	beq.n	8005608 <_puts_r+0x38>
 8005658:	250a      	movs	r5, #10
 800565a:	e7d7      	b.n	800560c <_puts_r+0x3c>
 800565c:	4622      	mov	r2, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f857 	bl	8005712 <__swbuf_r>
 8005664:	3001      	adds	r0, #1
 8005666:	d1e7      	bne.n	8005638 <_puts_r+0x68>
 8005668:	e7ce      	b.n	8005608 <_puts_r+0x38>
 800566a:	3e01      	subs	r6, #1
 800566c:	e7e4      	b.n	8005638 <_puts_r+0x68>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	220a      	movs	r2, #10
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e7ee      	b.n	8005658 <_puts_r+0x88>
	...

0800567c <puts>:
 800567c:	4b02      	ldr	r3, [pc, #8]	@ (8005688 <puts+0xc>)
 800567e:	4601      	mov	r1, r0
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	f7ff bfa5 	b.w	80055d0 <_puts_r>
 8005686:	bf00      	nop
 8005688:	20000020 	.word	0x20000020

0800568c <__sread>:
 800568c:	b510      	push	{r4, lr}
 800568e:	460c      	mov	r4, r1
 8005690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005694:	f000 f90c 	bl	80058b0 <_read_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	bfab      	itete	ge
 800569c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800569e:	89a3      	ldrhlt	r3, [r4, #12]
 80056a0:	181b      	addge	r3, r3, r0
 80056a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056a6:	bfac      	ite	ge
 80056a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056aa:	81a3      	strhlt	r3, [r4, #12]
 80056ac:	bd10      	pop	{r4, pc}

080056ae <__swrite>:
 80056ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b2:	461f      	mov	r7, r3
 80056b4:	898b      	ldrh	r3, [r1, #12]
 80056b6:	05db      	lsls	r3, r3, #23
 80056b8:	4605      	mov	r5, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	4616      	mov	r6, r2
 80056be:	d505      	bpl.n	80056cc <__swrite+0x1e>
 80056c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c4:	2302      	movs	r3, #2
 80056c6:	2200      	movs	r2, #0
 80056c8:	f000 f8e0 	bl	800588c <_lseek_r>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	4632      	mov	r2, r6
 80056da:	463b      	mov	r3, r7
 80056dc:	4628      	mov	r0, r5
 80056de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e2:	f7ff bea1 	b.w	8005428 <_write_r>

080056e6 <__sseek>:
 80056e6:	b510      	push	{r4, lr}
 80056e8:	460c      	mov	r4, r1
 80056ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ee:	f000 f8cd 	bl	800588c <_lseek_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	bf15      	itete	ne
 80056f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005702:	81a3      	strheq	r3, [r4, #12]
 8005704:	bf18      	it	ne
 8005706:	81a3      	strhne	r3, [r4, #12]
 8005708:	bd10      	pop	{r4, pc}

0800570a <__sclose>:
 800570a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570e:	f000 b8ad 	b.w	800586c <_close_r>

08005712 <__swbuf_r>:
 8005712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005714:	460e      	mov	r6, r1
 8005716:	4614      	mov	r4, r2
 8005718:	4605      	mov	r5, r0
 800571a:	b118      	cbz	r0, 8005724 <__swbuf_r+0x12>
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	b90b      	cbnz	r3, 8005724 <__swbuf_r+0x12>
 8005720:	f7ff ff20 	bl	8005564 <__sinit>
 8005724:	69a3      	ldr	r3, [r4, #24]
 8005726:	60a3      	str	r3, [r4, #8]
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	071a      	lsls	r2, r3, #28
 800572c:	d501      	bpl.n	8005732 <__swbuf_r+0x20>
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	b943      	cbnz	r3, 8005744 <__swbuf_r+0x32>
 8005732:	4621      	mov	r1, r4
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f82b 	bl	8005790 <__swsetup_r>
 800573a:	b118      	cbz	r0, 8005744 <__swbuf_r+0x32>
 800573c:	f04f 37ff 	mov.w	r7, #4294967295
 8005740:	4638      	mov	r0, r7
 8005742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	6922      	ldr	r2, [r4, #16]
 8005748:	1a98      	subs	r0, r3, r2
 800574a:	6963      	ldr	r3, [r4, #20]
 800574c:	b2f6      	uxtb	r6, r6
 800574e:	4283      	cmp	r3, r0
 8005750:	4637      	mov	r7, r6
 8005752:	dc05      	bgt.n	8005760 <__swbuf_r+0x4e>
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fa6e 	bl	8005c38 <_fflush_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	d1ed      	bne.n	800573c <__swbuf_r+0x2a>
 8005760:	68a3      	ldr	r3, [r4, #8]
 8005762:	3b01      	subs	r3, #1
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	6022      	str	r2, [r4, #0]
 800576c:	701e      	strb	r6, [r3, #0]
 800576e:	6962      	ldr	r2, [r4, #20]
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	429a      	cmp	r2, r3
 8005774:	d004      	beq.n	8005780 <__swbuf_r+0x6e>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	07db      	lsls	r3, r3, #31
 800577a:	d5e1      	bpl.n	8005740 <__swbuf_r+0x2e>
 800577c:	2e0a      	cmp	r6, #10
 800577e:	d1df      	bne.n	8005740 <__swbuf_r+0x2e>
 8005780:	4621      	mov	r1, r4
 8005782:	4628      	mov	r0, r5
 8005784:	f000 fa58 	bl	8005c38 <_fflush_r>
 8005788:	2800      	cmp	r0, #0
 800578a:	d0d9      	beq.n	8005740 <__swbuf_r+0x2e>
 800578c:	e7d6      	b.n	800573c <__swbuf_r+0x2a>
	...

08005790 <__swsetup_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4b29      	ldr	r3, [pc, #164]	@ (8005838 <__swsetup_r+0xa8>)
 8005794:	4605      	mov	r5, r0
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	460c      	mov	r4, r1
 800579a:	b118      	cbz	r0, 80057a4 <__swsetup_r+0x14>
 800579c:	6a03      	ldr	r3, [r0, #32]
 800579e:	b90b      	cbnz	r3, 80057a4 <__swsetup_r+0x14>
 80057a0:	f7ff fee0 	bl	8005564 <__sinit>
 80057a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a8:	0719      	lsls	r1, r3, #28
 80057aa:	d422      	bmi.n	80057f2 <__swsetup_r+0x62>
 80057ac:	06da      	lsls	r2, r3, #27
 80057ae:	d407      	bmi.n	80057c0 <__swsetup_r+0x30>
 80057b0:	2209      	movs	r2, #9
 80057b2:	602a      	str	r2, [r5, #0]
 80057b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295
 80057be:	e033      	b.n	8005828 <__swsetup_r+0x98>
 80057c0:	0758      	lsls	r0, r3, #29
 80057c2:	d512      	bpl.n	80057ea <__swsetup_r+0x5a>
 80057c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057c6:	b141      	cbz	r1, 80057da <__swsetup_r+0x4a>
 80057c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057cc:	4299      	cmp	r1, r3
 80057ce:	d002      	beq.n	80057d6 <__swsetup_r+0x46>
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 f8b5 	bl	8005940 <_free_r>
 80057d6:	2300      	movs	r3, #0
 80057d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	2300      	movs	r3, #0
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f043 0308 	orr.w	r3, r3, #8
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	b94b      	cbnz	r3, 800580a <__swsetup_r+0x7a>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005800:	d003      	beq.n	800580a <__swsetup_r+0x7a>
 8005802:	4621      	mov	r1, r4
 8005804:	4628      	mov	r0, r5
 8005806:	f000 fa65 	bl	8005cd4 <__smakebuf_r>
 800580a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580e:	f013 0201 	ands.w	r2, r3, #1
 8005812:	d00a      	beq.n	800582a <__swsetup_r+0x9a>
 8005814:	2200      	movs	r2, #0
 8005816:	60a2      	str	r2, [r4, #8]
 8005818:	6962      	ldr	r2, [r4, #20]
 800581a:	4252      	negs	r2, r2
 800581c:	61a2      	str	r2, [r4, #24]
 800581e:	6922      	ldr	r2, [r4, #16]
 8005820:	b942      	cbnz	r2, 8005834 <__swsetup_r+0xa4>
 8005822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005826:	d1c5      	bne.n	80057b4 <__swsetup_r+0x24>
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	0799      	lsls	r1, r3, #30
 800582c:	bf58      	it	pl
 800582e:	6962      	ldrpl	r2, [r4, #20]
 8005830:	60a2      	str	r2, [r4, #8]
 8005832:	e7f4      	b.n	800581e <__swsetup_r+0x8e>
 8005834:	2000      	movs	r0, #0
 8005836:	e7f7      	b.n	8005828 <__swsetup_r+0x98>
 8005838:	20000020 	.word	0x20000020

0800583c <memcmp>:
 800583c:	b510      	push	{r4, lr}
 800583e:	3901      	subs	r1, #1
 8005840:	4402      	add	r2, r0
 8005842:	4290      	cmp	r0, r2
 8005844:	d101      	bne.n	800584a <memcmp+0xe>
 8005846:	2000      	movs	r0, #0
 8005848:	e005      	b.n	8005856 <memcmp+0x1a>
 800584a:	7803      	ldrb	r3, [r0, #0]
 800584c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005850:	42a3      	cmp	r3, r4
 8005852:	d001      	beq.n	8005858 <memcmp+0x1c>
 8005854:	1b18      	subs	r0, r3, r4
 8005856:	bd10      	pop	{r4, pc}
 8005858:	3001      	adds	r0, #1
 800585a:	e7f2      	b.n	8005842 <memcmp+0x6>

0800585c <memset>:
 800585c:	4402      	add	r2, r0
 800585e:	4603      	mov	r3, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	f803 1b01 	strb.w	r1, [r3], #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <_close_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d06      	ldr	r5, [pc, #24]	@ (8005888 <_close_r+0x1c>)
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	f7fb f99d 	bl	8000bb6 <_close>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_close_r+0x1a>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_close_r+0x1a>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	2001a9bc 	.word	0x2001a9bc

0800588c <_lseek_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4d07      	ldr	r5, [pc, #28]	@ (80058ac <_lseek_r+0x20>)
 8005890:	4604      	mov	r4, r0
 8005892:	4608      	mov	r0, r1
 8005894:	4611      	mov	r1, r2
 8005896:	2200      	movs	r2, #0
 8005898:	602a      	str	r2, [r5, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f7fb f9b2 	bl	8000c04 <_lseek>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_lseek_r+0x1e>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_lseek_r+0x1e>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	2001a9bc 	.word	0x2001a9bc

080058b0 <_read_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4d07      	ldr	r5, [pc, #28]	@ (80058d0 <_read_r+0x20>)
 80058b4:	4604      	mov	r4, r0
 80058b6:	4608      	mov	r0, r1
 80058b8:	4611      	mov	r1, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	602a      	str	r2, [r5, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7fb f95c 	bl	8000b7c <_read>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_read_r+0x1e>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_read_r+0x1e>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	2001a9bc 	.word	0x2001a9bc

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4d0d      	ldr	r5, [pc, #52]	@ (800590c <__libc_init_array+0x38>)
 80058d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005910 <__libc_init_array+0x3c>)
 80058da:	1b64      	subs	r4, r4, r5
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2600      	movs	r6, #0
 80058e0:	42a6      	cmp	r6, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005914 <__libc_init_array+0x40>)
 80058e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005918 <__libc_init_array+0x44>)
 80058e8:	f000 fa70 	bl	8005dcc <_init>
 80058ec:	1b64      	subs	r4, r4, r5
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	2600      	movs	r6, #0
 80058f2:	42a6      	cmp	r6, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fc:	4798      	blx	r3
 80058fe:	3601      	adds	r6, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f855 3b04 	ldr.w	r3, [r5], #4
 8005906:	4798      	blx	r3
 8005908:	3601      	adds	r6, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	08005f2c 	.word	0x08005f2c
 8005910:	08005f2c 	.word	0x08005f2c
 8005914:	08005f2c 	.word	0x08005f2c
 8005918:	08005f30 	.word	0x08005f30

0800591c <__retarget_lock_init_recursive>:
 800591c:	4770      	bx	lr

0800591e <__retarget_lock_acquire_recursive>:
 800591e:	4770      	bx	lr

08005920 <__retarget_lock_release_recursive>:
 8005920:	4770      	bx	lr

08005922 <memcpy>:
 8005922:	440a      	add	r2, r1
 8005924:	4291      	cmp	r1, r2
 8005926:	f100 33ff 	add.w	r3, r0, #4294967295
 800592a:	d100      	bne.n	800592e <memcpy+0xc>
 800592c:	4770      	bx	lr
 800592e:	b510      	push	{r4, lr}
 8005930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005938:	4291      	cmp	r1, r2
 800593a:	d1f9      	bne.n	8005930 <memcpy+0xe>
 800593c:	bd10      	pop	{r4, pc}
	...

08005940 <_free_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4605      	mov	r5, r0
 8005944:	2900      	cmp	r1, #0
 8005946:	d041      	beq.n	80059cc <_free_r+0x8c>
 8005948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594c:	1f0c      	subs	r4, r1, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfb8      	it	lt
 8005952:	18e4      	addlt	r4, r4, r3
 8005954:	f000 f8e0 	bl	8005b18 <__malloc_lock>
 8005958:	4a1d      	ldr	r2, [pc, #116]	@ (80059d0 <_free_r+0x90>)
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	b933      	cbnz	r3, 800596c <_free_r+0x2c>
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	6014      	str	r4, [r2, #0]
 8005962:	4628      	mov	r0, r5
 8005964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005968:	f000 b8dc 	b.w	8005b24 <__malloc_unlock>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d908      	bls.n	8005982 <_free_r+0x42>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	1821      	adds	r1, r4, r0
 8005974:	428b      	cmp	r3, r1
 8005976:	bf01      	itttt	eq
 8005978:	6819      	ldreq	r1, [r3, #0]
 800597a:	685b      	ldreq	r3, [r3, #4]
 800597c:	1809      	addeq	r1, r1, r0
 800597e:	6021      	streq	r1, [r4, #0]
 8005980:	e7ed      	b.n	800595e <_free_r+0x1e>
 8005982:	461a      	mov	r2, r3
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b10b      	cbz	r3, 800598c <_free_r+0x4c>
 8005988:	42a3      	cmp	r3, r4
 800598a:	d9fa      	bls.n	8005982 <_free_r+0x42>
 800598c:	6811      	ldr	r1, [r2, #0]
 800598e:	1850      	adds	r0, r2, r1
 8005990:	42a0      	cmp	r0, r4
 8005992:	d10b      	bne.n	80059ac <_free_r+0x6c>
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	4401      	add	r1, r0
 8005998:	1850      	adds	r0, r2, r1
 800599a:	4283      	cmp	r3, r0
 800599c:	6011      	str	r1, [r2, #0]
 800599e:	d1e0      	bne.n	8005962 <_free_r+0x22>
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	6053      	str	r3, [r2, #4]
 80059a6:	4408      	add	r0, r1
 80059a8:	6010      	str	r0, [r2, #0]
 80059aa:	e7da      	b.n	8005962 <_free_r+0x22>
 80059ac:	d902      	bls.n	80059b4 <_free_r+0x74>
 80059ae:	230c      	movs	r3, #12
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	e7d6      	b.n	8005962 <_free_r+0x22>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	1821      	adds	r1, r4, r0
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf04      	itt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	6063      	str	r3, [r4, #4]
 80059c2:	bf04      	itt	eq
 80059c4:	1809      	addeq	r1, r1, r0
 80059c6:	6021      	streq	r1, [r4, #0]
 80059c8:	6054      	str	r4, [r2, #4]
 80059ca:	e7ca      	b.n	8005962 <_free_r+0x22>
 80059cc:	bd38      	pop	{r3, r4, r5, pc}
 80059ce:	bf00      	nop
 80059d0:	2001a9c8 	.word	0x2001a9c8

080059d4 <sbrk_aligned>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005a14 <sbrk_aligned+0x40>)
 80059d8:	460c      	mov	r4, r1
 80059da:	6831      	ldr	r1, [r6, #0]
 80059dc:	4605      	mov	r5, r0
 80059de:	b911      	cbnz	r1, 80059e6 <sbrk_aligned+0x12>
 80059e0:	f000 f9d6 	bl	8005d90 <_sbrk_r>
 80059e4:	6030      	str	r0, [r6, #0]
 80059e6:	4621      	mov	r1, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 f9d1 	bl	8005d90 <_sbrk_r>
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	d103      	bne.n	80059fa <sbrk_aligned+0x26>
 80059f2:	f04f 34ff 	mov.w	r4, #4294967295
 80059f6:	4620      	mov	r0, r4
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	1cc4      	adds	r4, r0, #3
 80059fc:	f024 0403 	bic.w	r4, r4, #3
 8005a00:	42a0      	cmp	r0, r4
 8005a02:	d0f8      	beq.n	80059f6 <sbrk_aligned+0x22>
 8005a04:	1a21      	subs	r1, r4, r0
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f9c2 	bl	8005d90 <_sbrk_r>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d1f2      	bne.n	80059f6 <sbrk_aligned+0x22>
 8005a10:	e7ef      	b.n	80059f2 <sbrk_aligned+0x1e>
 8005a12:	bf00      	nop
 8005a14:	2001a9c4 	.word	0x2001a9c4

08005a18 <_malloc_r>:
 8005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	1ccd      	adds	r5, r1, #3
 8005a1e:	f025 0503 	bic.w	r5, r5, #3
 8005a22:	3508      	adds	r5, #8
 8005a24:	2d0c      	cmp	r5, #12
 8005a26:	bf38      	it	cc
 8005a28:	250c      	movcc	r5, #12
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	db01      	blt.n	8005a34 <_malloc_r+0x1c>
 8005a30:	42a9      	cmp	r1, r5
 8005a32:	d904      	bls.n	8005a3e <_malloc_r+0x26>
 8005a34:	230c      	movs	r3, #12
 8005a36:	6033      	str	r3, [r6, #0]
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b14 <_malloc_r+0xfc>
 8005a42:	f000 f869 	bl	8005b18 <__malloc_lock>
 8005a46:	f8d8 3000 	ldr.w	r3, [r8]
 8005a4a:	461c      	mov	r4, r3
 8005a4c:	bb44      	cbnz	r4, 8005aa0 <_malloc_r+0x88>
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4630      	mov	r0, r6
 8005a52:	f7ff ffbf 	bl	80059d4 <sbrk_aligned>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	4604      	mov	r4, r0
 8005a5a:	d158      	bne.n	8005b0e <_malloc_r+0xf6>
 8005a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a60:	4627      	mov	r7, r4
 8005a62:	2f00      	cmp	r7, #0
 8005a64:	d143      	bne.n	8005aee <_malloc_r+0xd6>
 8005a66:	2c00      	cmp	r4, #0
 8005a68:	d04b      	beq.n	8005b02 <_malloc_r+0xea>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	4630      	mov	r0, r6
 8005a70:	eb04 0903 	add.w	r9, r4, r3
 8005a74:	f000 f98c 	bl	8005d90 <_sbrk_r>
 8005a78:	4581      	cmp	r9, r0
 8005a7a:	d142      	bne.n	8005b02 <_malloc_r+0xea>
 8005a7c:	6821      	ldr	r1, [r4, #0]
 8005a7e:	1a6d      	subs	r5, r5, r1
 8005a80:	4629      	mov	r1, r5
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff ffa6 	bl	80059d4 <sbrk_aligned>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d03a      	beq.n	8005b02 <_malloc_r+0xea>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	442b      	add	r3, r5
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	f8d8 3000 	ldr.w	r3, [r8]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	bb62      	cbnz	r2, 8005af4 <_malloc_r+0xdc>
 8005a9a:	f8c8 7000 	str.w	r7, [r8]
 8005a9e:	e00f      	b.n	8005ac0 <_malloc_r+0xa8>
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	1b52      	subs	r2, r2, r5
 8005aa4:	d420      	bmi.n	8005ae8 <_malloc_r+0xd0>
 8005aa6:	2a0b      	cmp	r2, #11
 8005aa8:	d917      	bls.n	8005ada <_malloc_r+0xc2>
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	6025      	str	r5, [r4, #0]
 8005ab0:	bf18      	it	ne
 8005ab2:	6059      	strne	r1, [r3, #4]
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	bf08      	it	eq
 8005ab8:	f8c8 1000 	streq.w	r1, [r8]
 8005abc:	5162      	str	r2, [r4, r5]
 8005abe:	604b      	str	r3, [r1, #4]
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 f82f 	bl	8005b24 <__malloc_unlock>
 8005ac6:	f104 000b 	add.w	r0, r4, #11
 8005aca:	1d23      	adds	r3, r4, #4
 8005acc:	f020 0007 	bic.w	r0, r0, #7
 8005ad0:	1ac2      	subs	r2, r0, r3
 8005ad2:	bf1c      	itt	ne
 8005ad4:	1a1b      	subne	r3, r3, r0
 8005ad6:	50a3      	strne	r3, [r4, r2]
 8005ad8:	e7af      	b.n	8005a3a <_malloc_r+0x22>
 8005ada:	6862      	ldr	r2, [r4, #4]
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	bf0c      	ite	eq
 8005ae0:	f8c8 2000 	streq.w	r2, [r8]
 8005ae4:	605a      	strne	r2, [r3, #4]
 8005ae6:	e7eb      	b.n	8005ac0 <_malloc_r+0xa8>
 8005ae8:	4623      	mov	r3, r4
 8005aea:	6864      	ldr	r4, [r4, #4]
 8005aec:	e7ae      	b.n	8005a4c <_malloc_r+0x34>
 8005aee:	463c      	mov	r4, r7
 8005af0:	687f      	ldr	r7, [r7, #4]
 8005af2:	e7b6      	b.n	8005a62 <_malloc_r+0x4a>
 8005af4:	461a      	mov	r2, r3
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d1fb      	bne.n	8005af4 <_malloc_r+0xdc>
 8005afc:	2300      	movs	r3, #0
 8005afe:	6053      	str	r3, [r2, #4]
 8005b00:	e7de      	b.n	8005ac0 <_malloc_r+0xa8>
 8005b02:	230c      	movs	r3, #12
 8005b04:	6033      	str	r3, [r6, #0]
 8005b06:	4630      	mov	r0, r6
 8005b08:	f000 f80c 	bl	8005b24 <__malloc_unlock>
 8005b0c:	e794      	b.n	8005a38 <_malloc_r+0x20>
 8005b0e:	6005      	str	r5, [r0, #0]
 8005b10:	e7d6      	b.n	8005ac0 <_malloc_r+0xa8>
 8005b12:	bf00      	nop
 8005b14:	2001a9c8 	.word	0x2001a9c8

08005b18 <__malloc_lock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	@ (8005b20 <__malloc_lock+0x8>)
 8005b1a:	f7ff bf00 	b.w	800591e <__retarget_lock_acquire_recursive>
 8005b1e:	bf00      	nop
 8005b20:	2001a9c0 	.word	0x2001a9c0

08005b24 <__malloc_unlock>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__malloc_unlock+0x8>)
 8005b26:	f7ff befb 	b.w	8005920 <__retarget_lock_release_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	2001a9c0 	.word	0x2001a9c0

08005b30 <__sflush_r>:
 8005b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b38:	0716      	lsls	r6, r2, #28
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	d454      	bmi.n	8005bea <__sflush_r+0xba>
 8005b40:	684b      	ldr	r3, [r1, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dc02      	bgt.n	8005b4c <__sflush_r+0x1c>
 8005b46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	dd48      	ble.n	8005bde <__sflush_r+0xae>
 8005b4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b4e:	2e00      	cmp	r6, #0
 8005b50:	d045      	beq.n	8005bde <__sflush_r+0xae>
 8005b52:	2300      	movs	r3, #0
 8005b54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b58:	682f      	ldr	r7, [r5, #0]
 8005b5a:	6a21      	ldr	r1, [r4, #32]
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	d030      	beq.n	8005bc2 <__sflush_r+0x92>
 8005b60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	0759      	lsls	r1, r3, #29
 8005b66:	d505      	bpl.n	8005b74 <__sflush_r+0x44>
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b6e:	b10b      	cbz	r3, 8005b74 <__sflush_r+0x44>
 8005b70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	2300      	movs	r3, #0
 8005b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b78:	6a21      	ldr	r1, [r4, #32]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b0      	blx	r6
 8005b7e:	1c43      	adds	r3, r0, #1
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	d106      	bne.n	8005b92 <__sflush_r+0x62>
 8005b84:	6829      	ldr	r1, [r5, #0]
 8005b86:	291d      	cmp	r1, #29
 8005b88:	d82b      	bhi.n	8005be2 <__sflush_r+0xb2>
 8005b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005c34 <__sflush_r+0x104>)
 8005b8c:	410a      	asrs	r2, r1
 8005b8e:	07d6      	lsls	r6, r2, #31
 8005b90:	d427      	bmi.n	8005be2 <__sflush_r+0xb2>
 8005b92:	2200      	movs	r2, #0
 8005b94:	6062      	str	r2, [r4, #4]
 8005b96:	04d9      	lsls	r1, r3, #19
 8005b98:	6922      	ldr	r2, [r4, #16]
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	d504      	bpl.n	8005ba8 <__sflush_r+0x78>
 8005b9e:	1c42      	adds	r2, r0, #1
 8005ba0:	d101      	bne.n	8005ba6 <__sflush_r+0x76>
 8005ba2:	682b      	ldr	r3, [r5, #0]
 8005ba4:	b903      	cbnz	r3, 8005ba8 <__sflush_r+0x78>
 8005ba6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005baa:	602f      	str	r7, [r5, #0]
 8005bac:	b1b9      	cbz	r1, 8005bde <__sflush_r+0xae>
 8005bae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	d002      	beq.n	8005bbc <__sflush_r+0x8c>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff fec2 	bl	8005940 <_free_r>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc0:	e00d      	b.n	8005bde <__sflush_r+0xae>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b0      	blx	r6
 8005bc8:	4602      	mov	r2, r0
 8005bca:	1c50      	adds	r0, r2, #1
 8005bcc:	d1c9      	bne.n	8005b62 <__sflush_r+0x32>
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0c6      	beq.n	8005b62 <__sflush_r+0x32>
 8005bd4:	2b1d      	cmp	r3, #29
 8005bd6:	d001      	beq.n	8005bdc <__sflush_r+0xac>
 8005bd8:	2b16      	cmp	r3, #22
 8005bda:	d11e      	bne.n	8005c1a <__sflush_r+0xea>
 8005bdc:	602f      	str	r7, [r5, #0]
 8005bde:	2000      	movs	r0, #0
 8005be0:	e022      	b.n	8005c28 <__sflush_r+0xf8>
 8005be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	e01b      	b.n	8005c22 <__sflush_r+0xf2>
 8005bea:	690f      	ldr	r7, [r1, #16]
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	d0f6      	beq.n	8005bde <__sflush_r+0xae>
 8005bf0:	0793      	lsls	r3, r2, #30
 8005bf2:	680e      	ldr	r6, [r1, #0]
 8005bf4:	bf08      	it	eq
 8005bf6:	694b      	ldreq	r3, [r1, #20]
 8005bf8:	600f      	str	r7, [r1, #0]
 8005bfa:	bf18      	it	ne
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	eba6 0807 	sub.w	r8, r6, r7
 8005c02:	608b      	str	r3, [r1, #8]
 8005c04:	f1b8 0f00 	cmp.w	r8, #0
 8005c08:	dde9      	ble.n	8005bde <__sflush_r+0xae>
 8005c0a:	6a21      	ldr	r1, [r4, #32]
 8005c0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c0e:	4643      	mov	r3, r8
 8005c10:	463a      	mov	r2, r7
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b0      	blx	r6
 8005c16:	2800      	cmp	r0, #0
 8005c18:	dc08      	bgt.n	8005c2c <__sflush_r+0xfc>
 8005c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c2c:	4407      	add	r7, r0
 8005c2e:	eba8 0800 	sub.w	r8, r8, r0
 8005c32:	e7e7      	b.n	8005c04 <__sflush_r+0xd4>
 8005c34:	dfbffffe 	.word	0xdfbffffe

08005c38 <_fflush_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	690b      	ldr	r3, [r1, #16]
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	b913      	cbnz	r3, 8005c48 <_fflush_r+0x10>
 8005c42:	2500      	movs	r5, #0
 8005c44:	4628      	mov	r0, r5
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	b118      	cbz	r0, 8005c52 <_fflush_r+0x1a>
 8005c4a:	6a03      	ldr	r3, [r0, #32]
 8005c4c:	b90b      	cbnz	r3, 8005c52 <_fflush_r+0x1a>
 8005c4e:	f7ff fc89 	bl	8005564 <__sinit>
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f3      	beq.n	8005c42 <_fflush_r+0xa>
 8005c5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c5c:	07d0      	lsls	r0, r2, #31
 8005c5e:	d404      	bmi.n	8005c6a <_fflush_r+0x32>
 8005c60:	0599      	lsls	r1, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_fflush_r+0x32>
 8005c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c66:	f7ff fe5a 	bl	800591e <__retarget_lock_acquire_recursive>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	f7ff ff5f 	bl	8005b30 <__sflush_r>
 8005c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c74:	07da      	lsls	r2, r3, #31
 8005c76:	4605      	mov	r5, r0
 8005c78:	d4e4      	bmi.n	8005c44 <_fflush_r+0xc>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	059b      	lsls	r3, r3, #22
 8005c7e:	d4e1      	bmi.n	8005c44 <_fflush_r+0xc>
 8005c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c82:	f7ff fe4d 	bl	8005920 <__retarget_lock_release_recursive>
 8005c86:	e7dd      	b.n	8005c44 <_fflush_r+0xc>

08005c88 <__swhatbuf_r>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c90:	2900      	cmp	r1, #0
 8005c92:	b096      	sub	sp, #88	@ 0x58
 8005c94:	4615      	mov	r5, r2
 8005c96:	461e      	mov	r6, r3
 8005c98:	da0d      	bge.n	8005cb6 <__swhatbuf_r+0x2e>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	bf14      	ite	ne
 8005ca6:	2340      	movne	r3, #64	@ 0x40
 8005ca8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cac:	2000      	movs	r0, #0
 8005cae:	6031      	str	r1, [r6, #0]
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	b016      	add	sp, #88	@ 0x58
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	466a      	mov	r2, sp
 8005cb8:	f000 f848 	bl	8005d4c <_fstat_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	dbec      	blt.n	8005c9a <__swhatbuf_r+0x12>
 8005cc0:	9901      	ldr	r1, [sp, #4]
 8005cc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cca:	4259      	negs	r1, r3
 8005ccc:	4159      	adcs	r1, r3
 8005cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cd2:	e7eb      	b.n	8005cac <__swhatbuf_r+0x24>

08005cd4 <__smakebuf_r>:
 8005cd4:	898b      	ldrh	r3, [r1, #12]
 8005cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cd8:	079d      	lsls	r5, r3, #30
 8005cda:	4606      	mov	r6, r0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	d507      	bpl.n	8005cf0 <__smakebuf_r+0x1c>
 8005ce0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6163      	str	r3, [r4, #20]
 8005cec:	b003      	add	sp, #12
 8005cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf0:	ab01      	add	r3, sp, #4
 8005cf2:	466a      	mov	r2, sp
 8005cf4:	f7ff ffc8 	bl	8005c88 <__swhatbuf_r>
 8005cf8:	9f00      	ldr	r7, [sp, #0]
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff fe8a 	bl	8005a18 <_malloc_r>
 8005d04:	b948      	cbnz	r0, 8005d1a <__smakebuf_r+0x46>
 8005d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0a:	059a      	lsls	r2, r3, #22
 8005d0c:	d4ee      	bmi.n	8005cec <__smakebuf_r+0x18>
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	f043 0302 	orr.w	r3, r3, #2
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	e7e2      	b.n	8005ce0 <__smakebuf_r+0xc>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	6020      	str	r0, [r4, #0]
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d2a:	b15b      	cbz	r3, 8005d44 <__smakebuf_r+0x70>
 8005d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 f81d 	bl	8005d70 <_isatty_r>
 8005d36:	b128      	cbz	r0, 8005d44 <__smakebuf_r+0x70>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	431d      	orrs	r5, r3
 8005d48:	81a5      	strh	r5, [r4, #12]
 8005d4a:	e7cf      	b.n	8005cec <__smakebuf_r+0x18>

08005d4c <_fstat_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d07      	ldr	r5, [pc, #28]	@ (8005d6c <_fstat_r+0x20>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	f7fa ff38 	bl	8000bce <_fstat>
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	d102      	bne.n	8005d68 <_fstat_r+0x1c>
 8005d62:	682b      	ldr	r3, [r5, #0]
 8005d64:	b103      	cbz	r3, 8005d68 <_fstat_r+0x1c>
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	bd38      	pop	{r3, r4, r5, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2001a9bc 	.word	0x2001a9bc

08005d70 <_isatty_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d06      	ldr	r5, [pc, #24]	@ (8005d8c <_isatty_r+0x1c>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	f7fa ff37 	bl	8000bee <_isatty>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_isatty_r+0x1a>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_isatty_r+0x1a>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	2001a9bc 	.word	0x2001a9bc

08005d90 <_sbrk_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d06      	ldr	r5, [pc, #24]	@ (8005dac <_sbrk_r+0x1c>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f000 f808 	bl	8005db0 <_sbrk>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_sbrk_r+0x1a>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_sbrk_r+0x1a>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	2001a9bc 	.word	0x2001a9bc

08005db0 <_sbrk>:
 8005db0:	4a04      	ldr	r2, [pc, #16]	@ (8005dc4 <_sbrk+0x14>)
 8005db2:	6811      	ldr	r1, [r2, #0]
 8005db4:	4603      	mov	r3, r0
 8005db6:	b909      	cbnz	r1, 8005dbc <_sbrk+0xc>
 8005db8:	4903      	ldr	r1, [pc, #12]	@ (8005dc8 <_sbrk+0x18>)
 8005dba:	6011      	str	r1, [r2, #0]
 8005dbc:	6810      	ldr	r0, [r2, #0]
 8005dbe:	4403      	add	r3, r0
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4770      	bx	lr
 8005dc4:	2001a9cc 	.word	0x2001a9cc
 8005dc8:	2001a9d0 	.word	0x2001a9d0

08005dcc <_init>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_fini>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr
